import typing
import java.awt.datatransfer
import java.lang
import javax.swing
import javax.swing.table


class ETable(javax.swing.JTable):
    pass
    
class ETableColumn(javax.swing.table.TableColumn, java.lang.Comparable):
    pass
    
class ETableColumnModel(javax.swing.table.DefaultTableColumnModel):
    pass
    
class ETableTransferHandler(javax.swing.TransferHandler):
    COPY = 1
    COPY_OR_MOVE = 3
    LINK = 1073741824
    MOVE = 2
    NONE = 0
    
    def __init__(self) -> None: ...
    
    def getSourceActions(self, j: javax.swing.JComponent) -> int: ...
    
    
class ETableTransferable(java.awt.datatransfer.Transferable):
    def __init__(self, s: str) -> None: ...
    
    def getTransferData(self, j: java.awt.datatransfer.DataFlavor) -> object: ...
    
    def getTransferDataFlavors(self) -> typing.List[java.awt.datatransfer.DataFlavor]: ...
    
    def isDataFlavorSupported(self, j: java.awt.datatransfer.DataFlavor) -> bool: ...
    
    
class QuickFilter:
    def __init__(self) -> None: ...
    
    def accept(self, o: object) -> bool: ...
    
    
class TableColumnSelector:
    def __init__(self) -> None: ...
    
    def selectVisibleColumns(self, t: typing.List[str], t2: typing.List[str]) -> typing.List[str]: ...
    
    
    class TreeNode:
        def __init__(self) -> None: ...
        
        def getChildren(self) -> typing.List[str]: ...
        
        def getText(self) -> str: ...
        
        def isLeaf(self) -> bool: ...
        
        
    
