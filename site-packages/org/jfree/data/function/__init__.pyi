import typing
import java.io


class Function2D:
    def __init__(self) -> None: ...
    
    def getValue(self, f: float) -> float: ...
    
    
class LineFunction2D(Function2D, java.io.Serializable):
    def __init__(self, f: float, f2: float) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getIntercept(self) -> float: ...
    
    def getSlope(self) -> float: ...
    
    def getValue(self, f: float) -> float: ...
    
    def hashCode(self) -> int: ...
    
    
class NormalDistributionFunction2D(Function2D, java.io.Serializable):
    def __init__(self, f: float, f2: float) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMean(self) -> float: ...
    
    def getStandardDeviation(self) -> float: ...
    
    def getValue(self, f: float) -> float: ...
    
    def hashCode(self) -> int: ...
    
    
class PolynomialFunction2D(Function2D, java.io.Serializable):
    def __init__(self, t: typing.List[float]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCoefficients(self) -> typing.List[float]: ...
    
    def getOrder(self) -> int: ...
    
    def getValue(self, f: float) -> float: ...
    
    def hashCode(self) -> int: ...
    
    
class PowerFunction2D(Function2D, java.io.Serializable):
    def __init__(self, f: float, f2: float) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getA(self) -> float: ...
    
    def getB(self) -> float: ...
    
    def getValue(self, f: float) -> float: ...
    
    def hashCode(self) -> int: ...
    
    
