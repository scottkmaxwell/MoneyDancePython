import typing
import java.io
import java.lang
import org.jfree.data
import org.jfree.data.category
import org.jfree.data.general
import org.jfree.data.xy
import org.jfree.util


class BoxAndWhiskerCalculator:
    def __init__(self) -> None: ...
    
    @staticmethod
    def calculateBoxAndWhiskerStatistics(l: list) -> 'BoxAndWhiskerItem': ...
    
    @staticmethod
    def calculateQ1(l: list) -> float: ...
    
    @staticmethod
    def calculateQ3(l: list) -> float: ...
    
    
class BoxAndWhiskerCategoryDataset(org.jfree.data.category.CategoryDataset):
    pass
    
class BoxAndWhiskerItem(java.io.Serializable):
    def __init__(self, f: float, f2: float, f3: float, f4: float, f5: float, f6: float, f7: float, f8: float, l: list) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMaxOutlier(self) -> java.lang.Number: ...
    
    def getMaxRegularValue(self) -> java.lang.Number: ...
    
    def getMean(self) -> java.lang.Number: ...
    
    def getMedian(self) -> java.lang.Number: ...
    
    def getMinOutlier(self) -> java.lang.Number: ...
    
    def getMinRegularValue(self) -> java.lang.Number: ...
    
    def getOutliers(self) -> list: ...
    
    def getQ1(self) -> java.lang.Number: ...
    
    def getQ3(self) -> java.lang.Number: ...
    
    def toString(self) -> str: ...
    
    
class BoxAndWhiskerXYDataset(org.jfree.data.xy.XYDataset):
    pass
    
class DefaultBoxAndWhiskerCategoryDataset(BoxAndWhiskerCategoryDataset, org.jfree.data.general.AbstractDataset, org.jfree.data.RangeInfo, org.jfree.util.PublicCloneable):
    pass
    
class DefaultBoxAndWhiskerXYDataset(BoxAndWhiskerXYDataset, org.jfree.data.xy.AbstractXYDataset, org.jfree.data.RangeInfo):
    pass
    
class MultiValueCategoryDataset(org.jfree.data.category.CategoryDataset):
    pass
    
class DefaultMultiValueCategoryDataset(MultiValueCategoryDataset, org.jfree.data.general.AbstractDataset, org.jfree.data.RangeInfo, org.jfree.util.PublicCloneable):
    pass
    
class StatisticalCategoryDataset(org.jfree.data.category.CategoryDataset):
    pass
    
class DefaultStatisticalCategoryDataset(StatisticalCategoryDataset, org.jfree.data.general.AbstractDataset, org.jfree.data.RangeInfo, org.jfree.util.PublicCloneable):
    pass
    
class HistogramBin(java.lang.Cloneable, java.io.Serializable):
    def __init__(self, f: float, f2: float) -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getBinWidth(self) -> float: ...
    
    def getCount(self) -> int: ...
    
    def getEndBoundary(self) -> float: ...
    
    def getStartBoundary(self) -> float: ...
    
    def incrementCount(self) -> None: ...
    
    
class HistogramDataset(org.jfree.data.xy.AbstractIntervalXYDataset, org.jfree.util.PublicCloneable):
    pass
    
class HistogramType(java.io.Serializable):
    FREQUENCY = 'FREQUENCY'
    RELATIVE_FREQUENCY = 'RELATIVE_FREQUENCY'
    SCALE_AREA_TO_1 = 'SCALE_AREA_TO_1'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class MeanAndStandardDeviation(java.io.Serializable):
    def __init__(self, f: float, f2: float) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMean(self) -> java.lang.Number: ...
    
    def getMeanValue(self) -> float: ...
    
    def getStandardDeviation(self) -> java.lang.Number: ...
    
    def getStandardDeviationValue(self) -> float: ...
    
    def toString(self) -> str: ...
    
    
class Regression:
    def __init__(self) -> None: ...
    
    @staticmethod
    def getOLSRegression(t: typing.List[typing.List[float]]) -> typing.List[float]: ...
    
    @staticmethod
    def getPowerRegression(t: typing.List[typing.List[float]]) -> typing.List[float]: ...
    
    
class SimpleHistogramBin(java.lang.Comparable, java.lang.Cloneable, org.jfree.util.PublicCloneable, java.io.Serializable):
    def __init__(self, f: float, f2: float) -> None: ...
    
    def accepts(self, f: float) -> bool: ...
    
    def clone(self) -> object: ...
    
    def compareTo(self, o: object) -> int: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getItemCount(self) -> int: ...
    
    def getLowerBound(self) -> float: ...
    
    def getUpperBound(self) -> float: ...
    
    def overlapsWith(self, simpleHistogramBin: 'SimpleHistogramBin') -> bool: ...
    
    def setItemCount(self, i: int) -> None: ...
    
    
class SimpleHistogramDataset(org.jfree.data.xy.AbstractIntervalXYDataset, org.jfree.util.PublicCloneable):
    pass
    
class Statistics:
    def __init__(self) -> None: ...
    
    @staticmethod
    def calculateMean(t: typing.List[java.lang.Number]) -> float: ...
    
    @staticmethod
    def calculateMedian(l: list) -> float: ...
    
    @staticmethod
    def getCorrelation(t: typing.List[java.lang.Number], t2: typing.List[java.lang.Number]) -> float: ...
    
    @staticmethod
    def getLinearFit(t: typing.List[java.lang.Number], t2: typing.List[java.lang.Number]) -> typing.List[float]: ...
    
    @staticmethod
    def getMovingAverage(t: typing.List[java.lang.Number], t2: typing.List[java.lang.Number], i: int) -> typing.List[typing.List[float]]: ...
    
    @staticmethod
    def getSlope(t: typing.List[java.lang.Number], t2: typing.List[java.lang.Number]) -> float: ...
    
    @staticmethod
    def getStdDev(t: typing.List[java.lang.Number]) -> float: ...
    
    
