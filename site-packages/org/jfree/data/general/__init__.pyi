import typing
import java.awt.image
import java.io
import java.lang
import java.util
import org.jfree.chart.renderer
import org.jfree.data
import org.jfree.data.category
import org.jfree.data.function
import org.jfree.data.xy
import org.jfree.util


class Dataset:
    pass
    
class AbstractDataset(Dataset, java.lang.Cloneable, java.io.Serializable, java.io.ObjectInputValidation):
    pass
    
class SeriesDataset(Dataset):
    pass
    
class SeriesChangeListener(java.util.EventListener):
    def __init__(self) -> None: ...
    
    def seriesChanged(self, seriesChangeEvent: 'SeriesChangeEvent') -> None: ...
    
    
class AbstractSeriesDataset(AbstractDataset, SeriesDataset, SeriesChangeListener):
    pass
    
class CombinationDataset:
    def __init__(self) -> None: ...
    
    def getMap(self) -> typing.List[int]: ...
    
    def getParent(self) -> SeriesDataset: ...
    
    
class CombinedDataset(CombinationDataset, org.jfree.data.xy.AbstractIntervalXYDataset, org.jfree.data.xy.OHLCDataset):
    pass
    
class DatasetChangeEvent(java.util.EventObject):
    def __init__(self, o: object, dataset: Dataset) -> None: ...
    
    def getDataset(self) -> Dataset: ...
    
    
class DatasetChangeListener(java.util.EventListener):
    def __init__(self) -> None: ...
    
    def datasetChanged(self, datasetChangeEvent: DatasetChangeEvent) -> None: ...
    
    
class DatasetGroup(java.lang.Cloneable, java.io.Serializable):
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getID(self) -> str: ...
    
    
class DatasetUtilities:
    def __init__(self) -> None: ...
    
    @staticmethod
    def calculatePieDatasetTotal(pieDataset: 'PieDataset') -> float: ...
    
    @staticmethod
    def calculateStackTotal(o: org.jfree.data.xy.TableXYDataset, i: int) -> float: ...
    
    @staticmethod
    def createCategoryDataset(j: java.lang.Comparable, o: org.jfree.data.KeyedValues) -> org.jfree.data.category.CategoryDataset: ...
    
    @staticmethod
    def createConsolidatedPieDataset(pieDataset: 'PieDataset', j: java.lang.Comparable, f: float) -> 'PieDataset': ...
    
    @staticmethod
    def createPieDatasetForColumn(o: org.jfree.data.category.CategoryDataset, i: int) -> 'PieDataset': ...
    
    @staticmethod
    def createPieDatasetForRow(o: org.jfree.data.category.CategoryDataset, i: int) -> 'PieDataset': ...
    
    @staticmethod
    def findCumulativeRangeBounds(o: org.jfree.data.category.CategoryDataset) -> org.jfree.data.Range: ...
    
    @staticmethod
    def findDomainBounds(o: org.jfree.data.xy.XYDataset) -> org.jfree.data.Range: ...
    
    @staticmethod
    def findMaximumDomainValue(o: org.jfree.data.xy.XYDataset) -> java.lang.Number: ...
    
    @staticmethod
    def findMaximumRangeValue(o: org.jfree.data.category.CategoryDataset) -> java.lang.Number: ...
    
    @staticmethod
    def findMaximumStackedRangeValue(o: org.jfree.data.category.CategoryDataset) -> java.lang.Number: ...
    
    @staticmethod
    def findMinimumDomainValue(o: org.jfree.data.xy.XYDataset) -> java.lang.Number: ...
    
    @staticmethod
    def findMinimumRangeValue(o: org.jfree.data.category.CategoryDataset) -> java.lang.Number: ...
    
    @staticmethod
    def findMinimumStackedRangeValue(o: org.jfree.data.category.CategoryDataset) -> java.lang.Number: ...
    
    @staticmethod
    def findRangeBounds(o: org.jfree.data.category.CategoryDataset) -> org.jfree.data.Range: ...
    
    @staticmethod
    def findStackedRangeBounds(o: org.jfree.data.category.CategoryDataset) -> org.jfree.data.Range: ...
    
    @staticmethod
    def isEmptyOrNull(o: org.jfree.data.category.CategoryDataset) -> bool: ...
    
    @staticmethod
    def iterateCategoryRangeBounds(o: org.jfree.data.category.CategoryDataset, b: bool) -> org.jfree.data.Range: ...
    
    @staticmethod
    def iterateDomainBounds(o: org.jfree.data.xy.XYDataset) -> org.jfree.data.Range: ...
    
    @staticmethod
    def iterateRangeBounds(o: org.jfree.data.category.CategoryDataset) -> org.jfree.data.Range: ...
    
    @staticmethod
    def iterateToFindDomainBounds(o: org.jfree.data.xy.XYDataset, l: list, b: bool) -> org.jfree.data.Range: ...
    
    @staticmethod
    def iterateToFindRangeBounds(o: org.jfree.data.category.CategoryDataset, l: list, b: bool) -> org.jfree.data.Range: ...
    
    @staticmethod
    def iterateXYRangeBounds(o: org.jfree.data.xy.XYDataset) -> org.jfree.data.Range: ...
    
    @staticmethod
    def sampleFunction2D(o: org.jfree.data.function.Function2D, f: float, f2: float, i: int, j: java.lang.Comparable) -> org.jfree.data.xy.XYDataset: ...
    
    @staticmethod
    def sampleFunction2DToSeries(o: org.jfree.data.function.Function2D, f: float, f2: float, i: int, j: java.lang.Comparable) -> org.jfree.data.xy.XYSeries: ...
    
    
class HeatMapDataset:
    def __init__(self) -> None: ...
    
    def getMaximumXValue(self) -> float: ...
    
    def getMaximumYValue(self) -> float: ...
    
    def getMinimumXValue(self) -> float: ...
    
    def getMinimumYValue(self) -> float: ...
    
    def getXSampleCount(self) -> int: ...
    
    def getXValue(self, i: int) -> float: ...
    
    def getYSampleCount(self) -> int: ...
    
    def getYValue(self, i: int) -> float: ...
    
    def getZ(self, i: int, i2: int) -> java.lang.Number: ...
    
    def getZValue(self, i: int, i2: int) -> float: ...
    
    
class DefaultHeatMapDataset(AbstractDataset, HeatMapDataset, org.jfree.util.PublicCloneable):
    pass
    
class KeyedValueDataset(Dataset, org.jfree.data.KeyedValue):
    pass
    
class DefaultKeyedValueDataset(AbstractDataset, KeyedValueDataset):
    pass
    
class KeyedValues2DDataset(org.jfree.data.category.CategoryDataset):
    pass
    
class DefaultKeyedValues2DDataset(KeyedValues2DDataset, org.jfree.data.category.DefaultCategoryDataset):
    pass
    
class PieDataset(Dataset, org.jfree.data.KeyedValues):
    pass
    
class DefaultPieDataset(AbstractDataset, PieDataset, org.jfree.util.PublicCloneable):
    pass
    
class KeyedValuesDataset(PieDataset):
    pass
    
class DefaultKeyedValuesDataset(DefaultPieDataset, KeyedValuesDataset):
    pass
    
class ValueDataset(Dataset, org.jfree.data.Value):
    pass
    
class DefaultValueDataset(AbstractDataset, ValueDataset, org.jfree.util.PublicCloneable):
    pass
    
class HeatMapUtilities:
    def __init__(self) -> None: ...
    
    @staticmethod
    def createHeatMapImage(heatMapDataset: HeatMapDataset, o: org.jfree.chart.renderer.PaintScale) -> java.awt.image.BufferedImage: ...
    
    @staticmethod
    def extractColumnFromHeatMapDataset(heatMapDataset: HeatMapDataset, i: int, j: java.lang.Comparable) -> org.jfree.data.xy.XYDataset: ...
    
    @staticmethod
    def extractRowFromHeatMapDataset(heatMapDataset: HeatMapDataset, i: int, j: java.lang.Comparable) -> org.jfree.data.xy.XYDataset: ...
    
    
class Series(java.lang.Cloneable, java.io.Serializable):
    pass
    
class SeriesChangeEvent(java.util.EventObject):
    def __init__(self, o: object) -> None: ...
    
    
class SeriesException(java.lang.RuntimeException):
    def __init__(self, s: str) -> None: ...
    
    
class SubSeriesDataset(CombinationDataset, org.jfree.data.xy.AbstractIntervalXYDataset, org.jfree.data.xy.OHLCDataset):
    pass
    
class WaferMapDataset(AbstractDataset):
    pass
    
