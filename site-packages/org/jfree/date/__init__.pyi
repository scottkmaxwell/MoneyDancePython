import typing
import java.io
import java.lang
import java.util


class AnnualDateRule(java.lang.Cloneable):
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def getDate(self, i: int) -> 'SerialDate': ...
    
    
class DateUtilities:
    def __init__(self) -> None: ...
    
    @staticmethod
    def createDate(i: int, i2: int, i3: int) -> java.util.Date: ...
    
    
class DayAndMonthRule(AnnualDateRule):
    def __init__(self) -> None: ...
    
    def getDate(self, i: int) -> 'SerialDate': ...
    
    def getDayOfMonth(self) -> int: ...
    
    def getMonth(self) -> int: ...
    
    def setDayOfMonth(self, i: int) -> None: ...
    
    def setMonth(self, i: int) -> None: ...
    
    
class DayOfWeekInMonthRule(AnnualDateRule):
    def __init__(self) -> None: ...
    
    def getCount(self) -> int: ...
    
    def getDate(self, i: int) -> 'SerialDate': ...
    
    def getDayOfWeek(self) -> int: ...
    
    def getMonth(self) -> int: ...
    
    def setCount(self, i: int) -> None: ...
    
    def setDayOfWeek(self, i: int) -> None: ...
    
    def setMonth(self, i: int) -> None: ...
    
    
class EasterSundayRule(AnnualDateRule):
    def __init__(self) -> None: ...
    
    def getDate(self, i: int) -> 'SerialDate': ...
    
    
class MonthConstants:
    APRIL = 4
    AUGUST = 8
    DECEMBER = 12
    FEBRUARY = 2
    JANUARY = 1
    JULY = 7
    JUNE = 6
    MARCH = 3
    MAY = 5
    NOVEMBER = 11
    OCTOBER = 10
    SEPTEMBER = 9
    
    def __init__(self) -> None: ...
    
    
class RelativeDayOfWeekRule(AnnualDateRule):
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def getDate(self, i: int) -> 'SerialDate': ...
    
    def getDayOfWeek(self) -> int: ...
    
    def getRelative(self) -> int: ...
    
    def getSubrule(self) -> AnnualDateRule: ...
    
    def setDayOfWeek(self, i: int) -> None: ...
    
    def setRelative(self, i: int) -> None: ...
    
    def setSubrule(self, annualDateRule: AnnualDateRule) -> None: ...
    
    
class SerialDate(MonthConstants, java.lang.Comparable, java.io.Serializable):
    APRIL = 4
    AUGUST = 8
    DATE_FORMAT_SYMBOLS = 'java.text.DateFormatSymbols'
    DECEMBER = 12
    FEBRUARY = 2
    FIRST_WEEK_IN_MONTH = 1
    FOLLOWING = 1
    FOURTH_WEEK_IN_MONTH = 4
    FRIDAY = 6
    INCLUDE_BOTH = 3
    INCLUDE_FIRST = 1
    INCLUDE_NONE = 0
    INCLUDE_SECOND = 2
    JANUARY = 1
    JULY = 7
    JUNE = 6
    LAST_WEEK_IN_MONTH = 0
    MARCH = 3
    MAXIMUM_YEAR_SUPPORTED = 9999
    MAY = 5
    MINIMUM_YEAR_SUPPORTED = 1900
    MONDAY = 2
    NEAREST = 0
    NOVEMBER = 11
    OCTOBER = 10
    PRECEDING = -1
    SATURDAY = 7
    SECOND_WEEK_IN_MONTH = 2
    SEPTEMBER = 9
    SERIAL_LOWER_BOUND = 2
    SERIAL_UPPER_BOUND = 2958465
    SUNDAY = 1
    THIRD_WEEK_IN_MONTH = 3
    THURSDAY = 5
    TUESDAY = 3
    WEDNESDAY = 4
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def addDays(i: int, serialDate: 'SerialDate') -> 'SerialDate': ...
    
    @staticmethod
    def addMonths(i: int, serialDate: 'SerialDate') -> 'SerialDate': ...
    
    @staticmethod
    def addYears(i: int, serialDate: 'SerialDate') -> 'SerialDate': ...
    
    def compare(self, serialDate: 'SerialDate') -> int: ...
    
    @staticmethod
    def createInstance(i: int) -> 'SerialDate': ...
    
    def getDayOfMonth(self) -> int: ...
    
    def getDayOfWeek(self) -> int: ...
    
    def getDescription(self) -> str: ...
    
    def getEndOfCurrentMonth(self, serialDate: 'SerialDate') -> 'SerialDate': ...
    
    def getFollowingDayOfWeek(self, i: int) -> 'SerialDate': ...
    
    def getMonth(self) -> int: ...
    
    @staticmethod
    def getMonths() -> typing.List[str]: ...
    
    def getNearestDayOfWeek(self, i: int) -> 'SerialDate': ...
    
    def getPreviousDayOfWeek(self, i: int) -> 'SerialDate': ...
    
    def getYYYY(self) -> int: ...
    
    def isAfter(self, serialDate: 'SerialDate') -> bool: ...
    
    def isBefore(self, serialDate: 'SerialDate') -> bool: ...
    
    def isInRange(self, serialDate: 'SerialDate', serialDate2: 'SerialDate') -> bool: ...
    
    @staticmethod
    def isLeapYear(i: int) -> bool: ...
    
    def isOn(self, serialDate: 'SerialDate') -> bool: ...
    
    def isOnOrAfter(self, serialDate: 'SerialDate') -> bool: ...
    
    def isOnOrBefore(self, serialDate: 'SerialDate') -> bool: ...
    
    @staticmethod
    def isValidMonthCode(i: int) -> bool: ...
    
    @staticmethod
    def isValidWeekInMonthCode(i: int) -> bool: ...
    
    @staticmethod
    def isValidWeekdayCode(i: int) -> bool: ...
    
    @staticmethod
    def lastDayOfMonth(i: int, i2: int) -> int: ...
    
    @staticmethod
    def leapYearCount(i: int) -> int: ...
    
    @staticmethod
    def monthCodeToQuarter(i: int) -> int: ...
    
    @staticmethod
    def monthCodeToString(i: int) -> str: ...
    
    @staticmethod
    def relativeToString(i: int) -> str: ...
    
    def setDescription(self, s: str) -> None: ...
    
    @staticmethod
    def stringToMonthCode(s: str) -> int: ...
    
    @staticmethod
    def stringToWeekdayCode(s: str) -> int: ...
    
    def toDate(self) -> java.util.Date: ...
    
    def toSerial(self) -> int: ...
    
    def toString(self) -> str: ...
    
    @staticmethod
    def weekInMonthToString(i: int) -> str: ...
    
    @staticmethod
    def weekdayCodeToString(i: int) -> str: ...
    
    
class SerialDateUtilities:
    def __init__(self) -> None: ...
    
    @staticmethod
    def countFeb29s(serialDate: SerialDate, serialDate2: SerialDate) -> int: ...
    
    @staticmethod
    def dayCount30(serialDate: SerialDate, serialDate2: SerialDate) -> int: ...
    
    @staticmethod
    def dayCount30E(serialDate: SerialDate, serialDate2: SerialDate) -> int: ...
    
    @staticmethod
    def dayCount30ISDA(serialDate: SerialDate, serialDate2: SerialDate) -> int: ...
    
    @staticmethod
    def dayCount30PSA(serialDate: SerialDate, serialDate2: SerialDate) -> int: ...
    
    @staticmethod
    def dayCountActual(serialDate: SerialDate, serialDate2: SerialDate) -> int: ...
    
    def getMonths(self) -> typing.List[str]: ...
    
    def getWeekdays(self) -> typing.List[str]: ...
    
    @staticmethod
    def isLastDayOfFebruary(serialDate: SerialDate) -> bool: ...
    
    def stringToWeekday(self, s: str) -> int: ...
    
    
class SpreadsheetDate(SerialDate):
    APRIL = 4
    AUGUST = 8
    DATE_FORMAT_SYMBOLS = 'java.text.DateFormatSymbols'
    DECEMBER = 12
    FEBRUARY = 2
    FIRST_WEEK_IN_MONTH = 1
    FOLLOWING = 1
    FOURTH_WEEK_IN_MONTH = 4
    FRIDAY = 6
    INCLUDE_BOTH = 3
    INCLUDE_FIRST = 1
    INCLUDE_NONE = 0
    INCLUDE_SECOND = 2
    JANUARY = 1
    JULY = 7
    JUNE = 6
    LAST_WEEK_IN_MONTH = 0
    MARCH = 3
    MAXIMUM_YEAR_SUPPORTED = 9999
    MAY = 5
    MINIMUM_YEAR_SUPPORTED = 1900
    MONDAY = 2
    NEAREST = 0
    NOVEMBER = 11
    OCTOBER = 10
    PRECEDING = -1
    SATURDAY = 7
    SECOND_WEEK_IN_MONTH = 2
    SEPTEMBER = 9
    SERIAL_LOWER_BOUND = 2
    SERIAL_UPPER_BOUND = 2958465
    SUNDAY = 1
    THIRD_WEEK_IN_MONTH = 3
    THURSDAY = 5
    TUESDAY = 3
    WEDNESDAY = 4
    
    def __init__(self, i: int) -> None: ...
    
    def compare(self, serialDate: SerialDate) -> int: ...
    
    def compareTo(self, o: object) -> int: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDayOfMonth(self) -> int: ...
    
    def getDayOfWeek(self) -> int: ...
    
    def getMonth(self) -> int: ...
    
    def getYYYY(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def isAfter(self, serialDate: SerialDate) -> bool: ...
    
    def isBefore(self, serialDate: SerialDate) -> bool: ...
    
    def isInRange(self, serialDate: SerialDate, serialDate2: SerialDate) -> bool: ...
    
    def isOn(self, serialDate: SerialDate) -> bool: ...
    
    def isOnOrAfter(self, serialDate: SerialDate) -> bool: ...
    
    def isOnOrBefore(self, serialDate: SerialDate) -> bool: ...
    
    def toDate(self) -> java.util.Date: ...
    
    def toSerial(self) -> int: ...
    
    
