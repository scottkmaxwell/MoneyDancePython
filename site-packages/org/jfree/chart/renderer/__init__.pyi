import typing
import java.awt
import java.awt.geom
import java.io
import java.lang
import org.jfree.chart.entity
import org.jfree.chart.plot
import org.jfree.data.xy


class AbstractRenderer(java.lang.Cloneable, java.io.Serializable):
    pass
    
class AreaRendererEndType(java.io.Serializable):
    LEVEL = 'AreaRendererEndType.LEVEL'
    TAPER = 'AreaRendererEndType.TAPER'
    TRUNCATE = 'AreaRendererEndType.TRUNCATE'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def toString(self) -> str: ...
    
    
class PolarItemRenderer:
    pass
    
class DefaultPolarItemRenderer(AbstractRenderer, PolarItemRenderer):
    pass
    
class PaintScale:
    def __init__(self) -> None: ...
    
    def getLowerBound(self) -> float: ...
    
    def getPaint(self, f: float) -> java.awt.Paint: ...
    
    def getUpperBound(self) -> float: ...
    
    
class GrayPaintScale(PaintScale, 'org.jfree.chart.util.PublicCloneable', java.io.Serializable):
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAlpha(self) -> int: ...
    
    def getLowerBound(self) -> float: ...
    
    def getPaint(self, f: float) -> java.awt.Paint: ...
    
    def getUpperBound(self) -> float: ...
    
    def hashCode(self) -> int: ...
    
    
class LookupPaintScale(PaintScale, 'org.jfree.chart.util.PublicCloneable', java.io.Serializable):
    def __init__(self) -> None: ...
    
    def add(self, f: float, j: java.awt.Paint) -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDefaultPaint(self) -> java.awt.Paint: ...
    
    def getLowerBound(self) -> float: ...
    
    def getPaint(self, f: float) -> java.awt.Paint: ...
    
    def getUpperBound(self) -> float: ...
    
    
class NotOutlierException(Exception):
    def __init__(self, s: str) -> None: ...
    
    
class Outlier(java.lang.Comparable):
    def __init__(self, f: float, f2: float, f3: float) -> None: ...
    
    def compareTo(self, o: object) -> int: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPoint(self) -> java.awt.geom.Point2D: ...
    
    def getRadius(self) -> float: ...
    
    def getX(self) -> float: ...
    
    def getY(self) -> float: ...
    
    def overlaps(self, outlier: 'Outlier') -> bool: ...
    
    def setPoint(self, j: java.awt.geom.Point2D) -> None: ...
    
    def setRadius(self, f: float) -> None: ...
    
    def toString(self) -> str: ...
    
    
class OutlierList:
    def __init__(self, outlier: Outlier) -> None: ...
    
    def add(self, outlier: Outlier) -> bool: ...
    
    def getAveragedOutlier(self) -> Outlier: ...
    
    def getItemCount(self) -> int: ...
    
    def isMultiple(self) -> bool: ...
    
    def isOverlapped(self, outlier: Outlier) -> bool: ...
    
    def setAveragedOutlier(self, outlier: Outlier) -> None: ...
    
    def setMultiple(self, b: bool) -> None: ...
    
    def updateAveragedOutlier(self) -> None: ...
    
    
class OutlierListCollection:
    def __init__(self) -> None: ...
    
    def add(self, outlier: Outlier) -> bool: ...
    
    def isHighFarOut(self) -> bool: ...
    
    def isLowFarOut(self) -> bool: ...
    
    def iterator(self) -> typing.Iterator[OutlierList]: ...
    
    def setHighFarOut(self, b: bool) -> None: ...
    
    def setLowFarOut(self, b: bool) -> None: ...
    
    
class RendererState:
    def __init__(self, o: org.jfree.chart.plot.PlotRenderingInfo) -> None: ...
    
    def getElementHinting(self) -> bool: ...
    
    def getEntityCollection(self) -> org.jfree.chart.entity.EntityCollection: ...
    
    def getInfo(self) -> org.jfree.chart.plot.PlotRenderingInfo: ...
    
    def setElementHinting(self, b: bool) -> None: ...
    
    
class RendererUtils:
    def __init__(self) -> None: ...
    
    @staticmethod
    def findLiveItems(o: org.jfree.data.xy.XYDataset, i: int, f: float, f2: float) -> typing.List[int]: ...
    
    @staticmethod
    def findLiveItemsLowerBound(o: org.jfree.data.xy.XYDataset, i: int, f: float, f2: float) -> int: ...
    
    @staticmethod
    def findLiveItemsUpperBound(o: org.jfree.data.xy.XYDataset, i: int, f: float, f2: float) -> int: ...
    
    
class WaferMapRenderer(AbstractRenderer):
    pass
    
