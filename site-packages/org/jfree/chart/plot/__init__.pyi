import typing
import java.awt
import java.awt.geom
import java.beans
import java.io
import java.lang
import javax.swing
import org.jfree.chart
import org.jfree.chart.axis
import org.jfree.chart.event
import org.jfree.chart.renderer
import org.jfree.data
import org.jfree.data.contour
import org.jfree.data.general
import org.jfree.text
import org.jfree.util


class AbstractPieLabelDistributor(java.io.Serializable):
    def __init__(self) -> None: ...
    
    def addPieLabelRecord(self, pieLabelRecord: 'PieLabelRecord') -> None: ...
    
    def clear(self) -> None: ...
    
    def distributeLabels(self, f: float, f2: float) -> None: ...
    
    def getItemCount(self) -> int: ...
    
    def getPieLabelRecord(self, i: int) -> 'PieLabelRecord': ...
    
    
class CrosshairState:
    def __init__(self) -> None: ...
    
    def getAnchor(self) -> java.awt.geom.Point2D: ...
    
    def getAnchorX(self) -> float: ...
    
    def getAnchorY(self) -> float: ...
    
    def getCrosshairDistance(self) -> float: ...
    
    def getCrosshairX(self) -> float: ...
    
    def getCrosshairY(self) -> float: ...
    
    def getDatasetIndex(self) -> int: ...
    
    def getDomainAxisIndex(self) -> int: ...
    
    def getRangeAxisIndex(self) -> int: ...
    
    def setAnchor(self, j: java.awt.geom.Point2D) -> None: ...
    
    def setAnchorX(self, f: float) -> None: ...
    
    def setAnchorY(self, f: float) -> None: ...
    
    def setCrosshairDistance(self, f: float) -> None: ...
    
    def setCrosshairX(self, f: float) -> None: ...
    
    def setCrosshairY(self, f: float) -> None: ...
    
    def setDatasetIndex(self, i: int) -> None: ...
    
    def updateCrosshairPoint(self, f: float, f2: float, f3: float, f4: float, plotOrientation: 'PlotOrientation') -> None: ...
    
    def updateCrosshairX(self, f: float) -> None: ...
    
    def updateCrosshairY(self, f: float) -> None: ...
    
    
class CategoryCrosshairState(CrosshairState):
    def __init__(self) -> None: ...
    
    def getColumnKey(self) -> java.lang.Comparable: ...
    
    def getRowKey(self) -> java.lang.Comparable: ...
    
    def setColumnKey(self, j: java.lang.Comparable) -> None: ...
    
    def setRowKey(self, j: java.lang.Comparable) -> None: ...
    
    
class Marker(java.lang.Cloneable, java.io.Serializable):
    pass
    
class CategoryMarker(Marker):
    pass
    
class Plot(org.jfree.chart.event.AxisChangeListener, org.jfree.data.general.DatasetChangeListener, org.jfree.chart.event.MarkerChangeListener, org.jfree.chart.LegendItemSource, org.jfree.util.PublicCloneable, java.lang.Cloneable, java.io.Serializable):
    pass
    
class ValueAxisPlot:
    def __init__(self) -> None: ...
    
    def getDataRange(self, o: org.jfree.chart.axis.ValueAxis) -> org.jfree.data.Range: ...
    
    
class Pannable:
    def __init__(self) -> None: ...
    
    def getOrientation(self) -> 'PlotOrientation': ...
    
    def isDomainPannable(self) -> bool: ...
    
    def isRangePannable(self) -> bool: ...
    
    def panDomainAxes(self, f: float, plotRenderingInfo: 'PlotRenderingInfo', j: java.awt.geom.Point2D) -> None: ...
    
    def panRangeAxes(self, f: float, plotRenderingInfo: 'PlotRenderingInfo', j: java.awt.geom.Point2D) -> None: ...
    
    
class Zoomable:
    def __init__(self) -> None: ...
    
    def getOrientation(self) -> 'PlotOrientation': ...
    
    def isDomainZoomable(self) -> bool: ...
    
    def isRangeZoomable(self) -> bool: ...
    
    def zoomDomainAxes(self, f: float, plotRenderingInfo: 'PlotRenderingInfo', j: java.awt.geom.Point2D) -> None: ...
    
    def zoomRangeAxes(self, f: float, plotRenderingInfo: 'PlotRenderingInfo', j: java.awt.geom.Point2D) -> None: ...
    
    
class CategoryPlot(Plot, ValueAxisPlot, Pannable, Zoomable, org.jfree.chart.event.RendererChangeListener):
    pass
    
class ColorPalette(java.lang.Cloneable, java.io.Serializable):
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getColor(self, i: int) -> java.awt.Color: ...
    
    def getColorLinear(self, f: float) -> java.awt.Color: ...
    
    def getColorLog(self, f: float) -> java.awt.Color: ...
    
    def getMaxZ(self) -> float: ...
    
    def getMinZ(self) -> float: ...
    
    def getPaint(self, f: float) -> java.awt.Paint: ...
    
    def getPaletteName(self) -> str: ...
    
    def getTickValues(self) -> typing.List[float]: ...
    
    def hashCode(self) -> int: ...
    
    def initialize(self) -> None: ...
    
    def invertPalette(self) -> None: ...
    
    def isInverse(self) -> bool: ...
    
    def isLogscale(self) -> bool: ...
    
    def isStepped(self) -> bool: ...
    
    def setInverse(self, b: bool) -> None: ...
    
    def setLogscale(self, b: bool) -> None: ...
    
    def setMaxZ(self, f: float) -> None: ...
    
    def setMinZ(self, f: float) -> None: ...
    
    def setPaletteName(self, s: str) -> None: ...
    
    def setStepped(self, b: bool) -> None: ...
    
    def setTickValues(self, t: typing.List[float]) -> None: ...
    
    
class CombinedDomainCategoryPlot(CategoryPlot, org.jfree.chart.event.PlotChangeListener):
    pass
    
class XYPlot(Plot, ValueAxisPlot, Pannable, Zoomable, org.jfree.chart.event.RendererChangeListener):
    pass
    
class CombinedDomainXYPlot(XYPlot, org.jfree.chart.event.PlotChangeListener):
    pass
    
class CombinedRangeCategoryPlot(CategoryPlot, org.jfree.chart.event.PlotChangeListener):
    pass
    
class CombinedRangeXYPlot(XYPlot, org.jfree.chart.event.PlotChangeListener):
    pass
    
class CompassPlot(Plot):
    pass
    
class ContourValuePlot:
    def __init__(self) -> None: ...
    
    def getContourDataRange(self) -> org.jfree.data.Range: ...
    
    
class ContourPlot(Plot, ContourValuePlot, ValueAxisPlot, java.beans.PropertyChangeListener):
    pass
    
class ContourPlotUtilities:
    def __init__(self) -> None: ...
    
    @staticmethod
    def visibleRange(o: org.jfree.data.contour.ContourDataset, o2: org.jfree.data.Range, o3: org.jfree.data.Range) -> org.jfree.data.Range: ...
    
    
class Crosshair(java.lang.Cloneable, org.jfree.util.PublicCloneable, java.io.Serializable):
    pass
    
class DatasetRenderingOrder(java.io.Serializable):
    FORWARD = 'DatasetRenderingOrder.FORWARD'
    REVERSE = 'DatasetRenderingOrder.REVERSE'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class DrawingSupplier:
    def __init__(self) -> None: ...
    
    def getNextFillPaint(self) -> java.awt.Paint: ...
    
    def getNextOutlinePaint(self) -> java.awt.Paint: ...
    
    def getNextOutlineStroke(self) -> java.awt.Stroke: ...
    
    def getNextPaint(self) -> java.awt.Paint: ...
    
    def getNextShape(self) -> java.awt.Shape: ...
    
    def getNextStroke(self) -> java.awt.Stroke: ...
    
    
class DefaultDrawingSupplier(DrawingSupplier, java.lang.Cloneable, org.jfree.util.PublicCloneable, java.io.Serializable):
    DEFAULT_FILL_PAINT_SEQUENCE = 'array(java.awt.Paint, [java.awt.Color[r=255,g=255,b=255]])'
    DEFAULT_OUTLINE_PAINT_SEQUENCE = 'array(java.awt.Paint, [java.awt.Color[r=192,g=192,b=192]])'
    DEFAULT_OUTLINE_STROKE_SEQUENCE = 'array(java.awt.Stroke, [java.awt.BasicStroke@d1a007c0])'
    DEFAULT_PAINT_SEQUENCE = 'array(java.awt.Paint, [java.awt.Color[r=255,g=85,b=85], java.awt.Color[r=85,g=85,b=255], java.awt.Color[r=85,g=255,b=85], java.awt.Color[r=255,g=255,b=85], java.awt.Color[r=255,g=85,b=255], java.awt.Color[r=85,g=255,b=255], java.awt.Color[r=255,g=175,b=175], java.awt.Color[r=128,g=128,b=128], java.awt.Color[r=192,g=0,b=0], java.awt.Color[r=0,g=0,b=192], java.awt.Color[r=0,g=192,b=0], java.awt.Color[r=192,g=192,b=0], java.awt.Color[r=192,g=0,b=192], java.awt.Color[r=0,g=192,b=192], java.awt.Color[r=64,g=64,b=64], java.awt.Color[r=255,g=64,b=64], java.awt.Color[r=64,g=64,b=255], java.awt.Color[r=64,g=255,b=64], java.awt.Color[r=255,g=255,b=64], java.awt.Color[r=255,g=64,b=255], java.awt.Color[r=64,g=255,b=255], java.awt.Color[r=192,g=192,b=192], java.awt.Color[r=128,g=0,b=0], java.awt.Color[r=0,g=0,b=128], java.awt.Color[r=0,g=128,b=0], java.awt.Color[r=128,g=128,b=0], java.awt.Color[r=128,g=0,b=128], java.awt.Color[r=0,g=128,b=128], java.awt.Color[r=255,g=128,b=128], java.awt.Color[r=128,g=128,b=255], java.awt.Color[r=128,g=255,b=128], java.awt.Color[r=255,g=255,b=128], java.awt.Color[r=255,g=128,b=255], java.awt.Color[r=128,g=255,b=255]])'
    DEFAULT_SHAPE_SEQUENCE = 'array(java.awt.Shape, [java.awt.geom.Rectangle2D$Double[x=-3.0,y=-3.0,w=6.0,h=6.0], java.awt.geom.Ellipse2D$Double@9a00000, java.awt.Polygon@31b342eb, java.awt.Polygon@d2bdab1, java.awt.geom.Rectangle2D$Double[x=-3.0,y=-1.5,w=6.0,h=3.0], java.awt.Polygon@bdaefb4, java.awt.geom.Ellipse2D$Double@4600000, java.awt.Polygon@58a71488, java.awt.geom.Rectangle2D$Double[x=-1.5,y=-3.0,w=3.0,h=6.0], java.awt.Polygon@7328b16d])'
    DEFAULT_STROKE_SEQUENCE = 'array(java.awt.Stroke, [java.awt.BasicStroke@d1a007c0])'
    
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    @staticmethod
    def createStandardSeriesShapes() -> typing.List[java.awt.Shape]: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getNextFillPaint(self) -> java.awt.Paint: ...
    
    def getNextOutlinePaint(self) -> java.awt.Paint: ...
    
    def getNextOutlineStroke(self) -> java.awt.Stroke: ...
    
    def getNextPaint(self) -> java.awt.Paint: ...
    
    def getNextShape(self) -> java.awt.Shape: ...
    
    def getNextStroke(self) -> java.awt.Stroke: ...
    
    
class DialShape(java.io.Serializable):
    CHORD = 'DialShape.CHORD'
    CIRCLE = 'DialShape.CIRCLE'
    PIE = 'DialShape.PIE'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class FastScatterPlot(Plot, ValueAxisPlot, Pannable, Zoomable):
    pass
    
class GreyPalette(ColorPalette):
    def __init__(self) -> None: ...
    
    def initialize(self) -> None: ...
    
    
class IntervalMarker(Marker):
    pass
    
class JThermometer(javax.swing.JPanel):
    pass
    
class MeterInterval(java.io.Serializable):
    def __init__(self, s: str, o: org.jfree.data.Range) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getBackgroundPaint(self) -> java.awt.Paint: ...
    
    def getLabel(self) -> str: ...
    
    def getOutlinePaint(self) -> java.awt.Paint: ...
    
    def getOutlineStroke(self) -> java.awt.Stroke: ...
    
    def getRange(self) -> org.jfree.data.Range: ...
    
    
class MeterPlot(Plot):
    pass
    
class MultiplePiePlot(Plot):
    pass
    
class PieLabelDistributor(AbstractPieLabelDistributor):
    def __init__(self, i: int) -> None: ...
    
    def distributeLabels(self, f: float, f2: float) -> None: ...
    
    def sort(self) -> None: ...
    
    def toString(self) -> str: ...
    
    
class PieLabelLinkStyle(java.io.Serializable):
    CUBIC_CURVE = 'PieLabelLinkStyle.CUBIC_CURVE'
    QUAD_CURVE = 'PieLabelLinkStyle.QUAD_CURVE'
    STANDARD = 'PieLabelLinkStyle.STANDARD'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class PieLabelRecord(java.lang.Comparable, java.io.Serializable):
    def __init__(self, j: java.lang.Comparable, f: float, f2: float, o: org.jfree.text.TextBox, f3: float, f4: float, f5: float) -> None: ...
    
    def compareTo(self, o: object) -> int: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAllocatedY(self) -> float: ...
    
    def getAngle(self) -> float: ...
    
    def getBaseY(self) -> float: ...
    
    def getGap(self) -> float: ...
    
    def getKey(self) -> java.lang.Comparable: ...
    
    def getLabel(self) -> org.jfree.text.TextBox: ...
    
    def getLabelHeight(self) -> float: ...
    
    def getLinkPercent(self) -> float: ...
    
    def getLowerY(self) -> float: ...
    
    def getUpperY(self) -> float: ...
    
    def setAllocatedY(self, f: float) -> None: ...
    
    def setBaseY(self, f: float) -> None: ...
    
    def toString(self) -> str: ...
    
    
class PiePlot(Plot):
    pass
    
class PiePlot3D(PiePlot):
    pass
    
class PiePlotState(org.jfree.chart.renderer.RendererState):
    def __init__(self, plotRenderingInfo: 'PlotRenderingInfo') -> None: ...
    
    def getExplodedPieArea(self) -> java.awt.geom.Rectangle2D: ...
    
    def getLatestAngle(self) -> float: ...
    
    def getLinkArea(self) -> java.awt.geom.Rectangle2D: ...
    
    def getPassesRequired(self) -> int: ...
    
    def getPieArea(self) -> java.awt.geom.Rectangle2D: ...
    
    def getPieCenterX(self) -> float: ...
    
    def getPieCenterY(self) -> float: ...
    
    def getPieHRadius(self) -> float: ...
    
    def getPieWRadius(self) -> float: ...
    
    def getTotal(self) -> float: ...
    
    def setExplodedPieArea(self, j: java.awt.geom.Rectangle2D) -> None: ...
    
    def setLatestAngle(self, f: float) -> None: ...
    
    def setLinkArea(self, j: java.awt.geom.Rectangle2D) -> None: ...
    
    def setPassesRequired(self, i: int) -> None: ...
    
    def setPieArea(self, j: java.awt.geom.Rectangle2D) -> None: ...
    
    def setPieCenterX(self, f: float) -> None: ...
    
    def setPieCenterY(self, f: float) -> None: ...
    
    def setPieHRadius(self, f: float) -> None: ...
    
    def setPieWRadius(self, f: float) -> None: ...
    
    def setTotal(self, f: float) -> None: ...
    
    
class PlotOrientation(java.io.Serializable):
    HORIZONTAL = 'PlotOrientation.HORIZONTAL'
    VERTICAL = 'PlotOrientation.VERTICAL'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class PlotRenderingInfo(java.lang.Cloneable, java.io.Serializable):
    def __init__(self, o: org.jfree.chart.ChartRenderingInfo) -> None: ...
    
    def addSubplotInfo(self, plotRenderingInfo: 'PlotRenderingInfo') -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDataArea(self) -> java.awt.geom.Rectangle2D: ...
    
    def getOwner(self) -> org.jfree.chart.ChartRenderingInfo: ...
    
    def getPlotArea(self) -> java.awt.geom.Rectangle2D: ...
    
    def getSubplotCount(self) -> int: ...
    
    def getSubplotIndex(self, j: java.awt.geom.Point2D) -> int: ...
    
    def getSubplotInfo(self, i: int) -> 'PlotRenderingInfo': ...
    
    def setDataArea(self, j: java.awt.geom.Rectangle2D) -> None: ...
    
    def setPlotArea(self, j: java.awt.geom.Rectangle2D) -> None: ...
    
    
class PlotState:
    def __init__(self) -> None: ...
    
    def getSharedAxisStates(self) -> dict: ...
    
    
class PlotUtilities:
    def __init__(self) -> None: ...
    
    @staticmethod
    def isEmptyOrNull(xYPlot: XYPlot) -> bool: ...
    
    
class PolarPlot(Plot, ValueAxisPlot, Zoomable, org.jfree.chart.event.RendererChangeListener):
    pass
    
class RainbowPalette(ColorPalette):
    def __init__(self) -> None: ...
    
    def initialize(self) -> None: ...
    
    
class RingPlot(PiePlot):
    pass
    
class SeriesRenderingOrder(java.io.Serializable):
    FORWARD = 'SeriesRenderingOrder.FORWARD'
    REVERSE = 'SeriesRenderingOrder.REVERSE'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class SpiderWebPlot(Plot):
    pass
    
class ThermometerPlot(Plot, ValueAxisPlot, Zoomable):
    pass
    
class ValueMarker(Marker):
    pass
    
class WaferMapPlot(Plot, org.jfree.chart.event.RendererChangeListener):
    pass
    
class XYCrosshairState(CrosshairState):
    def __init__(self) -> None: ...
    
    
