import typing
import java.awt
import java.awt.geom
import java.io
import java.lang
import java.text
import java.util
import org.jfree.chart.plot
import org.jfree.data.time


class Axis(java.lang.Cloneable, java.io.Serializable):
    pass
    
class AxisCollection:
    def __init__(self) -> None: ...
    
    def add(self, axis: Axis, o: 'org.jfree.chart.ui.RectangleEdge') -> None: ...
    
    def getAxesAtBottom(self) -> list: ...
    
    def getAxesAtLeft(self) -> list: ...
    
    def getAxesAtRight(self) -> list: ...
    
    def getAxesAtTop(self) -> list: ...
    
    
class AxisLabelLocation(java.io.Serializable):
    HIGH_END = 'HIGH_END'
    LOW_END = 'LOW_END'
    MIDDLE = 'MIDDLE'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class AxisLocation(java.io.Serializable):
    BOTTOM_OR_LEFT = 'AxisLocation.BOTTOM_OR_LEFT'
    BOTTOM_OR_RIGHT = 'AxisLocation.BOTTOM_OR_RIGHT'
    TOP_OR_LEFT = 'AxisLocation.TOP_OR_LEFT'
    TOP_OR_RIGHT = 'AxisLocation.TOP_OR_RIGHT'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getOpposite(self) -> 'AxisLocation': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class AxisSpace(java.lang.Cloneable, 'org.jfree.chart.util.PublicCloneable', java.io.Serializable):
    def __init__(self) -> None: ...
    
    def add(self, f: float, o: 'org.jfree.chart.ui.RectangleEdge') -> None: ...
    
    def clone(self) -> object: ...
    
    def ensureAtLeast(self, axisSpace: 'AxisSpace') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def expand(self, j: java.awt.geom.Rectangle2D, j2: java.awt.geom.Rectangle2D) -> java.awt.geom.Rectangle2D: ...
    
    def getBottom(self) -> float: ...
    
    def getLeft(self) -> float: ...
    
    def getRight(self) -> float: ...
    
    def getTop(self) -> float: ...
    
    def hashCode(self) -> int: ...
    
    def reserved(self, j: java.awt.geom.Rectangle2D, o: 'org.jfree.chart.ui.RectangleEdge') -> java.awt.geom.Rectangle2D: ...
    
    def setBottom(self, f: float) -> None: ...
    
    def setLeft(self, f: float) -> None: ...
    
    def setRight(self, f: float) -> None: ...
    
    def setTop(self, f: float) -> None: ...
    
    def shrink(self, j: java.awt.geom.Rectangle2D, j2: java.awt.geom.Rectangle2D) -> java.awt.geom.Rectangle2D: ...
    
    def toString(self) -> str: ...
    
    
class AxisState:
    def __init__(self) -> None: ...
    
    def cursorDown(self, f: float) -> None: ...
    
    def cursorLeft(self, f: float) -> None: ...
    
    def cursorRight(self, f: float) -> None: ...
    
    def cursorUp(self, f: float) -> None: ...
    
    def getCursor(self) -> float: ...
    
    def getMax(self) -> float: ...
    
    def getTicks(self) -> list: ...
    
    def moveCursor(self, f: float, o: 'org.jfree.chart.ui.RectangleEdge') -> None: ...
    
    def setCursor(self, f: float) -> None: ...
    
    def setMax(self, f: float) -> None: ...
    
    def setTicks(self, l: list) -> None: ...
    
    
class CategoryAnchor(java.io.Serializable):
    END = 'CategoryAnchor.END'
    MIDDLE = 'CategoryAnchor.MIDDLE'
    START = 'CategoryAnchor.START'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def toString(self) -> str: ...
    
    
class CategoryAxis(Axis):
    pass
    
class CategoryLabelPosition(java.io.Serializable):
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAngle(self) -> float: ...
    
    def getCategoryAnchor(self) -> 'org.jfree.chart.ui.RectangleAnchor': ...
    
    def getLabelAnchor(self) -> 'org.jfree.chart.text.TextBlockAnchor': ...
    
    def getRotationAnchor(self) -> 'org.jfree.chart.ui.TextAnchor': ...
    
    def getWidthRatio(self) -> float: ...
    
    def getWidthType(self) -> 'CategoryLabelWidthType': ...
    
    def hashCode(self) -> int: ...
    
    
class CategoryLabelPositions(java.io.Serializable):
    DOWN_45 = 'org.jfree.chart.axis.CategoryLabelPositions'
    DOWN_90 = 'org.jfree.chart.axis.CategoryLabelPositions'
    STANDARD = 'org.jfree.chart.axis.CategoryLabelPositions'
    UP_45 = 'org.jfree.chart.axis.CategoryLabelPositions'
    UP_90 = 'org.jfree.chart.axis.CategoryLabelPositions'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def createDownRotationLabelPositions(f: float) -> 'CategoryLabelPositions': ...
    
    @staticmethod
    def createUpRotationLabelPositions(f: float) -> 'CategoryLabelPositions': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLabelPosition(self, o: 'org.jfree.chart.ui.RectangleEdge') -> CategoryLabelPosition: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def replaceBottomPosition(categoryLabelPositions: 'CategoryLabelPositions', categoryLabelPosition: CategoryLabelPosition) -> 'CategoryLabelPositions': ...
    
    @staticmethod
    def replaceLeftPosition(categoryLabelPositions: 'CategoryLabelPositions', categoryLabelPosition: CategoryLabelPosition) -> 'CategoryLabelPositions': ...
    
    @staticmethod
    def replaceRightPosition(categoryLabelPositions: 'CategoryLabelPositions', categoryLabelPosition: CategoryLabelPosition) -> 'CategoryLabelPositions': ...
    
    @staticmethod
    def replaceTopPosition(categoryLabelPositions: 'CategoryLabelPositions', categoryLabelPosition: CategoryLabelPosition) -> 'CategoryLabelPositions': ...
    
    
class CategoryLabelWidthType(java.io.Serializable):
    CATEGORY = 'CategoryLabelWidthType.CATEGORY'
    RANGE = 'CategoryLabelWidthType.RANGE'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def toString(self) -> str: ...
    
    
class Tick(java.io.Serializable, java.lang.Cloneable):
    def __init__(self, s: str, o: 'org.jfree.chart.ui.TextAnchor', o2: 'org.jfree.chart.ui.TextAnchor', f: float) -> None: ...
    
    def canEqual(self, o: object) -> bool: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAngle(self) -> float: ...
    
    def getRotationAnchor(self) -> 'org.jfree.chart.ui.TextAnchor': ...
    
    def getText(self) -> str: ...
    
    def getTextAnchor(self) -> 'org.jfree.chart.ui.TextAnchor': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class CategoryTick(Tick):
    def __init__(self, j: java.lang.Comparable, o: 'org.jfree.chart.text.TextBlock', o2: 'org.jfree.chart.text.TextBlockAnchor', o3: 'org.jfree.chart.ui.TextAnchor', f: float) -> None: ...
    
    def canEqual(self, o: object) -> bool: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCategory(self) -> java.lang.Comparable: ...
    
    def getLabel(self) -> 'org.jfree.chart.text.TextBlock': ...
    
    def getLabelAnchor(self) -> 'org.jfree.chart.text.TextBlockAnchor': ...
    
    def hashCode(self) -> int: ...
    
    
class CompassFormat(java.text.NumberFormat):
    FRACTION_FIELD = 1
    INTEGER_FIELD = 0
    directions: typing.List[str]
    
    def __init__(self) -> None: ...
    
    def getDirectionCode(self, f: float) -> str: ...
    
    
class ValueAxis(Axis, 'org.jfree.chart.util.PublicCloneable'):
    pass
    
class NumberAxis(ValueAxis):
    pass
    
class CyclicNumberAxis(NumberAxis):
    pass
    
class DateAxis(ValueAxis):
    pass
    
class ValueTick(Tick):
    def __init__(self, f: float, s: str, o: 'org.jfree.chart.ui.TextAnchor', o2: 'org.jfree.chart.ui.TextAnchor', f2: float) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getTickType(self) -> 'TickType': ...
    
    def getValue(self) -> float: ...
    
    
class DateTick(ValueTick):
    def __init__(self, j: java.util.Date, s: str, o: 'org.jfree.chart.ui.TextAnchor', o2: 'org.jfree.chart.ui.TextAnchor', f: float) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDate(self) -> java.util.Date: ...
    
    def hashCode(self) -> int: ...
    
    
class DateTickMarkPosition(java.io.Serializable):
    END = 'DateTickMarkPosition.END'
    MIDDLE = 'DateTickMarkPosition.MIDDLE'
    START = 'DateTickMarkPosition.START'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def toString(self) -> str: ...
    
    
class TickUnit(java.lang.Comparable, java.io.Serializable):
    def __init__(self, f: float) -> None: ...
    
    def compareTo(self, o: object) -> int: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMinorTickCount(self) -> int: ...
    
    def getSize(self) -> float: ...
    
    def hashCode(self) -> int: ...
    
    def valueToString(self, f: float) -> str: ...
    
    
class DateTickUnit(TickUnit):
    def __init__(self, dateTickUnitType: 'DateTickUnitType', i: int) -> None: ...
    
    def addToDate(self, j: java.util.Date, j2: java.util.TimeZone) -> java.util.Date: ...
    
    def dateToString(self, j: java.util.Date) -> str: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCalendarField(self) -> int: ...
    
    def getMultiple(self) -> int: ...
    
    def getRollMultiple(self) -> int: ...
    
    def getRollUnitType(self) -> 'DateTickUnitType': ...
    
    def getUnitType(self) -> 'DateTickUnitType': ...
    
    def hashCode(self) -> int: ...
    
    def rollDate(self, j: java.util.Date) -> java.util.Date: ...
    
    def toString(self) -> str: ...
    
    def valueToString(self, f: float) -> str: ...
    
    
class DateTickUnitType(java.io.Serializable):
    DAY = 'DateTickUnitType.DAY'
    HOUR = 'DateTickUnitType.HOUR'
    MILLISECOND = 'DateTickUnitType.MILLISECOND'
    MINUTE = 'DateTickUnitType.MINUTE'
    MONTH = 'DateTickUnitType.MONTH'
    SECOND = 'DateTickUnitType.SECOND'
    YEAR = 'DateTickUnitType.YEAR'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCalendarField(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class ExtendedCategoryAxis(CategoryAxis):
    pass
    
class LogAxis(ValueAxis):
    pass
    
class LogTick(ValueTick):
    def __init__(self, tickType: 'TickType', f: float, j: java.text.AttributedString, o: 'org.jfree.chart.ui.TextAnchor') -> None: ...
    
    def getAttributedLabel(self) -> java.text.AttributedString: ...
    
    
class LogarithmicAxis(NumberAxis):
    pass
    
class MarkerAxisBand(java.io.Serializable):
    def __init__(self, numberAxis: NumberAxis, f: float, f2: float, f3: float, f4: float, j: java.awt.Font) -> None: ...
    
    def addMarker(self, o: org.jfree.chart.plot.IntervalMarker) -> None: ...
    
    def draw(self, j: java.awt.Graphics2D, j2: java.awt.geom.Rectangle2D, j3: java.awt.geom.Rectangle2D, f: float, f2: float) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getHeight(self, j: java.awt.Graphics2D) -> float: ...
    
    def hashCode(self) -> int: ...
    
    
class ModuloAxis(NumberAxis):
    pass
    
class MonthDateFormat(java.text.DateFormat):
    AM_PM_FIELD = 14
    DATE_FIELD = 3
    DAY_OF_WEEK_FIELD = 9
    DAY_OF_WEEK_IN_MONTH_FIELD = 11
    DAY_OF_YEAR_FIELD = 10
    DEFAULT = 2
    ERA_FIELD = 0
    FULL = 0
    HOUR0_FIELD = 16
    HOUR1_FIELD = 15
    HOUR_OF_DAY0_FIELD = 5
    HOUR_OF_DAY1_FIELD = 4
    LONG = 1
    MEDIUM = 2
    MILLISECOND_FIELD = 8
    MINUTE_FIELD = 6
    MONTH_FIELD = 2
    SECOND_FIELD = 7
    SHORT = 3
    TIMEZONE_FIELD = 17
    WEEK_OF_MONTH_FIELD = 13
    WEEK_OF_YEAR_FIELD = 12
    YEAR_FIELD = 1
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    
class NumberTick(ValueTick):
    def __init__(self, j: java.lang.Number, s: str, o: 'org.jfree.chart.ui.TextAnchor', o2: 'org.jfree.chart.ui.TextAnchor', f: float) -> None: ...
    
    def getNumber(self) -> java.lang.Number: ...
    
    
class NumberTickUnit(TickUnit):
    def __init__(self, f: float) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def valueToString(self, f: float) -> str: ...
    
    
class TickUnitSource:
    def __init__(self) -> None: ...
    
    def getCeilingTickUnit(self, f: float) -> TickUnit: ...
    
    def getLargerTickUnit(self, tickUnit: TickUnit) -> TickUnit: ...
    
    
class NumberTickUnitSource(TickUnitSource, java.io.Serializable):
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCeilingTickUnit(self, f: float) -> TickUnit: ...
    
    def getLargerTickUnit(self, tickUnit: TickUnit) -> TickUnit: ...
    
    
class PeriodAxis(ValueAxis):
    pass
    
class PeriodAxisLabelInfo(java.lang.Cloneable, java.io.Serializable):
    DEFAULT_DIVIDER_PAINT = 'java.awt.Color[r=128,g=128,b=128]'
    DEFAULT_DIVIDER_STROKE = 'java.awt.BasicStroke'
    DEFAULT_FONT = 'java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]'
    DEFAULT_INSETS = 'RectangleInsets[t=2.0,l=2.0,b=2.0,r=2.0]'
    DEFAULT_LABEL_PAINT = 'java.awt.Color[r=0,g=0,b=0]'
    
    def __init__(self, j: java.lang.Class, j2: java.text.DateFormat) -> None: ...
    
    def clone(self) -> object: ...
    
    def createInstance(self, j: java.util.Date, j2: java.util.TimeZone, j3: java.util.Locale) -> org.jfree.data.time.RegularTimePeriod: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDateFormat(self) -> java.text.DateFormat: ...
    
    def getDividerPaint(self) -> java.awt.Paint: ...
    
    def getDividerStroke(self) -> java.awt.Stroke: ...
    
    def getDrawDividers(self) -> bool: ...
    
    def getLabelFont(self) -> java.awt.Font: ...
    
    def getLabelPaint(self) -> java.awt.Paint: ...
    
    def getPadding(self) -> 'org.jfree.chart.ui.RectangleInsets': ...
    
    def getPeriodClass(self) -> java.lang.Class: ...
    
    def hashCode(self) -> int: ...
    
    
class QuarterDateFormat(java.text.DateFormat):
    AM_PM_FIELD = 14
    DATE_FIELD = 3
    DAY_OF_WEEK_FIELD = 9
    DAY_OF_WEEK_IN_MONTH_FIELD = 11
    DAY_OF_YEAR_FIELD = 10
    DEFAULT = 2
    ERA_FIELD = 0
    FULL = 0
    GREEK_QUARTERS = "array(java.lang.String, [u'\\u0391', u'\\u0392', u'\\u0393', u'\\u0394'])"
    HOUR0_FIELD = 16
    HOUR1_FIELD = 15
    HOUR_OF_DAY0_FIELD = 5
    HOUR_OF_DAY1_FIELD = 4
    LONG = 1
    MEDIUM = 2
    MILLISECOND_FIELD = 8
    MINUTE_FIELD = 6
    MONTH_FIELD = 2
    REGULAR_QUARTERS = "array(java.lang.String, [u'1', u'2', u'3', u'4'])"
    ROMAN_QUARTERS = "array(java.lang.String, [u'I', u'II', u'III', u'IV'])"
    SECOND_FIELD = 7
    SHORT = 3
    TIMEZONE_FIELD = 17
    WEEK_OF_MONTH_FIELD = 13
    WEEK_OF_YEAR_FIELD = 12
    YEAR_FIELD = 1
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    
class StandardTickUnitSource(TickUnitSource, java.io.Serializable):
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCeilingTickUnit(self, f: float) -> TickUnit: ...
    
    def getLargerTickUnit(self, tickUnit: TickUnit) -> TickUnit: ...
    
    def hashCode(self) -> int: ...
    
    
class SubCategoryAxis(CategoryAxis):
    pass
    
class SymbolAxis(NumberAxis):
    pass
    
class TickType(java.io.Serializable):
    MAJOR = 'MAJOR'
    MINOR = 'MINOR'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def toString(self) -> str: ...
    
    
class TickUnits(TickUnitSource, java.lang.Cloneable, java.io.Serializable):
    def __init__(self) -> None: ...
    
    def add(self, tickUnit: TickUnit) -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def get(self, i: int) -> TickUnit: ...
    
    def getCeilingTickUnit(self, f: float) -> TickUnit: ...
    
    def getLargerTickUnit(self, tickUnit: TickUnit) -> TickUnit: ...
    
    def size(self) -> int: ...
    
    
class Timeline:
    def __init__(self) -> None: ...
    
    def containsDomainRange(self, i: int, i2: int) -> bool: ...
    
    def containsDomainValue(self, i: int) -> bool: ...
    
    def toMillisecond(self, i: int) -> int: ...
    
    def toTimelineValue(self, i: int) -> int: ...
    
    
