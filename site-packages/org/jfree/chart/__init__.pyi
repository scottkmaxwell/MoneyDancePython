import typing
import axis
import entity
import event
import java.awt
import java.awt.datatransfer
import java.awt.geom
import java.awt.image
import java.awt.print
import java.io
import java.lang
import java.text
import java.util
import javax.swing
import org.jfree.data.category
import org.jfree.data.general
import org.jfree.data.statistics
import org.jfree.data.xy
import org.jfree.ui
import org.jfree.util
import plot


class ChartColor(java.awt.Color):
    BITMASK = 2
    BLACK = 'java.awt.Color[r=0,g=0,b=0]'
    BLUE = 'java.awt.Color[r=0,g=0,b=255]'
    CYAN = 'java.awt.Color[r=0,g=255,b=255]'
    DARK_BLUE = 'java.awt.Color[r=0,g=0,b=192]'
    DARK_CYAN = 'java.awt.Color[r=0,g=192,b=192]'
    DARK_GRAY = 'java.awt.Color[r=64,g=64,b=64]'
    DARK_GREEN = 'java.awt.Color[r=0,g=192,b=0]'
    DARK_MAGENTA = 'java.awt.Color[r=192,g=0,b=192]'
    DARK_RED = 'java.awt.Color[r=192,g=0,b=0]'
    DARK_YELLOW = 'java.awt.Color[r=192,g=192,b=0]'
    GRAY = 'java.awt.Color[r=128,g=128,b=128]'
    GREEN = 'java.awt.Color[r=0,g=255,b=0]'
    LIGHT_BLUE = 'java.awt.Color[r=64,g=64,b=255]'
    LIGHT_CYAN = 'java.awt.Color[r=64,g=255,b=255]'
    LIGHT_GRAY = 'java.awt.Color[r=192,g=192,b=192]'
    LIGHT_GREEN = 'java.awt.Color[r=64,g=255,b=64]'
    LIGHT_MAGENTA = 'java.awt.Color[r=255,g=64,b=255]'
    LIGHT_RED = 'java.awt.Color[r=255,g=64,b=64]'
    LIGHT_YELLOW = 'java.awt.Color[r=255,g=255,b=64]'
    MAGENTA = 'java.awt.Color[r=255,g=0,b=255]'
    OPAQUE = 1
    ORANGE = 'java.awt.Color[r=255,g=200,b=0]'
    PINK = 'java.awt.Color[r=255,g=175,b=175]'
    RED = 'java.awt.Color[r=255,g=0,b=0]'
    TRANSLUCENT = 3
    VERY_DARK_BLUE = 'java.awt.Color[r=0,g=0,b=128]'
    VERY_DARK_CYAN = 'java.awt.Color[r=0,g=128,b=128]'
    VERY_DARK_GREEN = 'java.awt.Color[r=0,g=128,b=0]'
    VERY_DARK_MAGENTA = 'java.awt.Color[r=128,g=0,b=128]'
    VERY_DARK_RED = 'java.awt.Color[r=128,g=0,b=0]'
    VERY_DARK_YELLOW = 'java.awt.Color[r=128,g=128,b=0]'
    VERY_LIGHT_BLUE = 'java.awt.Color[r=128,g=128,b=255]'
    VERY_LIGHT_CYAN = 'java.awt.Color[r=128,g=255,b=255]'
    VERY_LIGHT_GREEN = 'java.awt.Color[r=128,g=255,b=128]'
    VERY_LIGHT_MAGENTA = 'java.awt.Color[r=255,g=128,b=255]'
    VERY_LIGHT_RED = 'java.awt.Color[r=255,g=128,b=128]'
    VERY_LIGHT_YELLOW = 'java.awt.Color[r=255,g=255,b=128]'
    WHITE = 'java.awt.Color[r=255,g=255,b=255]'
    YELLOW = 'java.awt.Color[r=255,g=255,b=0]'
    black = 'java.awt.Color[r=0,g=0,b=0]'
    blue = 'java.awt.Color[r=0,g=0,b=255]'
    cyan = 'java.awt.Color[r=0,g=255,b=255]'
    darkGray = 'java.awt.Color[r=64,g=64,b=64]'
    gray = 'java.awt.Color[r=128,g=128,b=128]'
    green = 'java.awt.Color[r=0,g=255,b=0]'
    lightGray = 'java.awt.Color[r=192,g=192,b=192]'
    magenta = 'java.awt.Color[r=255,g=0,b=255]'
    orange = 'java.awt.Color[r=255,g=200,b=0]'
    pink = 'java.awt.Color[r=255,g=175,b=175]'
    red = 'java.awt.Color[r=255,g=0,b=0]'
    white = 'java.awt.Color[r=255,g=255,b=255]'
    yellow = 'java.awt.Color[r=255,g=255,b=0]'
    
    def __init__(self, i: int, i2: int, i3: int) -> None: ...
    
    @staticmethod
    def createDefaultPaintArray() -> typing.List[java.awt.Paint]: ...
    
    
class ChartFactory:
    def __init__(self) -> None: ...
    
    @staticmethod
    def createAreaChart(s: str, s2: str, s3: str, o: org.jfree.data.category.CategoryDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createBarChart(s: str, s2: str, s3: str, o: org.jfree.data.category.CategoryDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createBarChart3D(s: str, s2: str, s3: str, o: org.jfree.data.category.CategoryDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createBoxAndWhiskerChart(s: str, s2: str, s3: str, o: org.jfree.data.statistics.BoxAndWhiskerCategoryDataset, b: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createBubbleChart(s: str, s2: str, s3: str, o: org.jfree.data.xy.XYZDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createCandlestickChart(s: str, s2: str, s3: str, o: org.jfree.data.xy.OHLCDataset, b: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createGanttChart(s: str, s2: str, s3: str, o: org.jfree.data.category.IntervalCategoryDataset, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createHighLowChart(s: str, s2: str, s3: str, o: org.jfree.data.xy.OHLCDataset, b: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createHistogram(s: str, s2: str, s3: str, o: org.jfree.data.xy.IntervalXYDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createLineChart(s: str, s2: str, s3: str, o: org.jfree.data.category.CategoryDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createLineChart3D(s: str, s2: str, s3: str, o: org.jfree.data.category.CategoryDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createMultiplePieChart(s: str, o: org.jfree.data.category.CategoryDataset, o2: org.jfree.util.TableOrder, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createMultiplePieChart3D(s: str, o: org.jfree.data.category.CategoryDataset, o2: org.jfree.util.TableOrder, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createPieChart(s: str, o: org.jfree.data.general.PieDataset, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createPieChart3D(s: str, o: org.jfree.data.general.PieDataset, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createPolarChart(s: str, o: org.jfree.data.xy.XYDataset, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createRingChart(s: str, o: org.jfree.data.general.PieDataset, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createScatterPlot(s: str, s2: str, s3: str, o: org.jfree.data.xy.XYDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createStackedAreaChart(s: str, s2: str, s3: str, o: org.jfree.data.category.CategoryDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createStackedBarChart(s: str, s2: str, s3: str, o: org.jfree.data.category.CategoryDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createStackedBarChart3D(s: str, s2: str, s3: str, o: org.jfree.data.category.CategoryDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createStackedXYAreaChart(s: str, s2: str, s3: str, o: org.jfree.data.xy.TableXYDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createTimeSeriesChart(s: str, s2: str, s3: str, o: org.jfree.data.xy.XYDataset, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createWaferMapChart(s: str, o: org.jfree.data.general.WaferMapDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createWaterfallChart(s: str, s2: str, s3: str, o: org.jfree.data.category.CategoryDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createWindPlot(s: str, s2: str, s3: str, o: org.jfree.data.xy.WindDataset, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createXYAreaChart(s: str, s2: str, s3: str, o: org.jfree.data.xy.XYDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createXYBarChart(s: str, s2: str, b: bool, s3: str, o: org.jfree.data.xy.IntervalXYDataset, p: plot.PlotOrientation, b2: bool, b3: bool, b4: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createXYLineChart(s: str, s2: str, s3: str, o: org.jfree.data.xy.XYDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createXYStepAreaChart(s: str, s2: str, s3: str, o: org.jfree.data.xy.XYDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def createXYStepChart(s: str, s2: str, s3: str, o: org.jfree.data.xy.XYDataset, p: plot.PlotOrientation, b: bool, b2: bool, b3: bool) -> 'JFreeChart': ...
    
    @staticmethod
    def getChartTheme() -> 'ChartTheme': ...
    
    @staticmethod
    def setChartTheme(chartTheme: 'ChartTheme') -> None: ...
    
    
class ChartFrame(javax.swing.JFrame):
    pass
    
class ChartMouseEvent(java.util.EventObject):
    def __init__(self, jFreeChart: 'JFreeChart', j: 'java.awt.event.MouseEvent', e: entity.ChartEntity) -> None: ...
    
    def getChart(self) -> 'JFreeChart': ...
    
    def getEntity(self) -> entity.ChartEntity: ...
    
    def getTrigger(self) -> 'java.awt.event.MouseEvent': ...
    
    
class ChartMouseListener(java.util.EventListener):
    def __init__(self) -> None: ...
    
    def chartMouseClicked(self, chartMouseEvent: ChartMouseEvent) -> None: ...
    
    def chartMouseMoved(self, chartMouseEvent: ChartMouseEvent) -> None: ...
    
    
class ChartPanel(javax.swing.JPanel, event.ChartChangeListener, event.ChartProgressListener, 'java.awt.event.ActionListener', 'java.awt.event.MouseListener', 'java.awt.event.MouseMotionListener', event.OverlayChangeListener, java.awt.print.Printable):
    pass
    
class ChartRenderingInfo(java.lang.Cloneable, java.io.Serializable):
    def __init__(self) -> None: ...
    
    def clear(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getChartArea(self) -> java.awt.geom.Rectangle2D: ...
    
    def getEntityCollection(self) -> entity.EntityCollection: ...
    
    def getPlotInfo(self) -> plot.PlotRenderingInfo: ...
    
    def setChartArea(self, j: java.awt.geom.Rectangle2D) -> None: ...
    
    def setEntityCollection(self, e: entity.EntityCollection) -> None: ...
    
    
class ChartTheme:
    def __init__(self) -> None: ...
    
    def apply(self, jFreeChart: 'JFreeChart') -> None: ...
    
    
class ChartTransferable(java.awt.datatransfer.Transferable):
    def __init__(self, jFreeChart: 'JFreeChart', i: int, i2: int) -> None: ...
    
    def getTransferData(self, j: java.awt.datatransfer.DataFlavor) -> object: ...
    
    def getTransferDataFlavors(self) -> typing.List[java.awt.datatransfer.DataFlavor]: ...
    
    def isDataFlavorSupported(self, j: java.awt.datatransfer.DataFlavor) -> bool: ...
    
    
class ChartUtilities:
    def __init__(self) -> None: ...
    
    @staticmethod
    def applyCurrentTheme(jFreeChart: 'JFreeChart') -> None: ...
    
    @staticmethod
    def encodeAsPNG(j: java.awt.image.BufferedImage) -> typing.List[int]: ...
    
    @staticmethod
    def getImageMap(s: str, chartRenderingInfo: ChartRenderingInfo) -> str: ...
    
    @staticmethod
    def saveChartAsJPEG(j: java.io.File, jFreeChart: 'JFreeChart', i: int, i2: int) -> None: ...
    
    @staticmethod
    def saveChartAsPNG(j: java.io.File, jFreeChart: 'JFreeChart', i: int, i2: int) -> None: ...
    
    @staticmethod
    def writeBufferedImageAsJPEG(j: java.io.OutputStream, j2: java.awt.image.BufferedImage) -> None: ...
    
    @staticmethod
    def writeBufferedImageAsPNG(j: java.io.OutputStream, j2: java.awt.image.BufferedImage) -> None: ...
    
    @staticmethod
    def writeChartAsJPEG(j: java.io.OutputStream, jFreeChart: 'JFreeChart', i: int, i2: int) -> None: ...
    
    @staticmethod
    def writeChartAsPNG(j: java.io.OutputStream, jFreeChart: 'JFreeChart', i: int, i2: int) -> None: ...
    
    @staticmethod
    def writeImageMap(j: java.io.PrintWriter, s: str, chartRenderingInfo: ChartRenderingInfo, b: bool) -> None: ...
    
    @staticmethod
    def writeScaledChartAsPNG(j: java.io.OutputStream, jFreeChart: 'JFreeChart', i: int, i2: int, i3: int, i4: int) -> None: ...
    
    
class ClipPath(java.lang.Cloneable):
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def draw(self, j: java.awt.Graphics2D, j2: java.awt.geom.Rectangle2D, a: axis.ValueAxis, a2: axis.ValueAxis) -> java.awt.geom.GeneralPath: ...
    
    def generateClipPath(self, j: java.awt.geom.Rectangle2D, a: axis.ValueAxis, a2: axis.ValueAxis) -> java.awt.geom.GeneralPath: ...
    
    def getComposite(self) -> java.awt.Composite: ...
    
    def getDrawPaint(self) -> java.awt.Paint: ...
    
    def getDrawStroke(self) -> java.awt.Stroke: ...
    
    def getFillPaint(self) -> java.awt.Paint: ...
    
    def getXValue(self) -> typing.List[float]: ...
    
    def getYValue(self) -> typing.List[float]: ...
    
    def isClip(self) -> bool: ...
    
    def isDrawPath(self) -> bool: ...
    
    def isFillPath(self) -> bool: ...
    
    def setClip(self, b: bool) -> None: ...
    
    def setComposite(self, j: java.awt.Composite) -> None: ...
    
    def setDrawPaint(self, j: java.awt.Paint) -> None: ...
    
    def setDrawPath(self, b: bool) -> None: ...
    
    def setDrawStroke(self, j: java.awt.Stroke) -> None: ...
    
    def setFillPaint(self, j: java.awt.Paint) -> None: ...
    
    def setFillPath(self, b: bool) -> None: ...
    
    def setXValue(self, t: typing.List[float]) -> None: ...
    
    def setYValue(self, t: typing.List[float]) -> None: ...
    
    
class DrawableLegendItem:
    def __init__(self, legendItem: 'LegendItem') -> None: ...
    
    def getHeight(self) -> float: ...
    
    def getItem(self) -> 'LegendItem': ...
    
    def getLabelPosition(self) -> java.awt.geom.Point2D: ...
    
    def getLine(self) -> java.awt.geom.Line2D: ...
    
    def getMarker(self) -> java.awt.Shape: ...
    
    def getMaxX(self) -> float: ...
    
    def getMaxY(self) -> float: ...
    
    def getWidth(self) -> float: ...
    
    def getX(self) -> float: ...
    
    def getY(self) -> float: ...
    
    def setBounds(self, f: float, f2: float, f3: float, f4: float) -> None: ...
    
    def setLabelPosition(self, j: java.awt.geom.Point2D) -> None: ...
    
    def setLine(self, j: java.awt.geom.Line2D) -> None: ...
    
    def setMarker(self, j: java.awt.Shape) -> None: ...
    
    def setX(self, f: float) -> None: ...
    
    def setY(self, f: float) -> None: ...
    
    
class Effect3D:
    def __init__(self) -> None: ...
    
    def getXOffset(self) -> float: ...
    
    def getYOffset(self) -> float: ...
    
    
class HashUtilities:
    def __init__(self) -> None: ...
    
    @staticmethod
    def hashCodeForDoubleArray(t: typing.List[float]) -> int: ...
    
    @staticmethod
    def hashCodeForPaint(j: java.awt.Paint) -> int: ...
    
    
class JFreeChart(org.jfree.ui.Drawable, event.TitleChangeListener, event.PlotChangeListener, java.io.Serializable, java.lang.Cloneable):
    pass
    
class LegendItem(java.lang.Cloneable, java.io.Serializable):
    def __init__(self, s: str) -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAttributedLabel(self) -> java.text.AttributedString: ...
    
    def getDataset(self) -> org.jfree.data.general.Dataset: ...
    
    def getDatasetIndex(self) -> int: ...
    
    def getDescription(self) -> str: ...
    
    def getFillPaint(self) -> java.awt.Paint: ...
    
    def getFillPaintTransformer(self) -> org.jfree.ui.GradientPaintTransformer: ...
    
    def getLabel(self) -> str: ...
    
    def getLabelFont(self) -> java.awt.Font: ...
    
    def getLabelPaint(self) -> java.awt.Paint: ...
    
    def getLine(self) -> java.awt.Shape: ...
    
    def getLinePaint(self) -> java.awt.Paint: ...
    
    def getLineStroke(self) -> java.awt.Stroke: ...
    
    def getOutlinePaint(self) -> java.awt.Paint: ...
    
    def getOutlineStroke(self) -> java.awt.Stroke: ...
    
    def getSeriesIndex(self) -> int: ...
    
    def getSeriesKey(self) -> java.lang.Comparable: ...
    
    def getShape(self) -> java.awt.Shape: ...
    
    def getToolTipText(self) -> str: ...
    
    def getURLText(self) -> str: ...
    
    def isLineVisible(self) -> bool: ...
    
    def isShapeFilled(self) -> bool: ...
    
    def isShapeOutlineVisible(self) -> bool: ...
    
    def isShapeVisible(self) -> bool: ...
    
    def setDataset(self, o: org.jfree.data.general.Dataset) -> None: ...
    
    def setDatasetIndex(self, i: int) -> None: ...
    
    def setFillPaint(self, j: java.awt.Paint) -> None: ...
    
    def setFillPaintTransformer(self, o: org.jfree.ui.GradientPaintTransformer) -> None: ...
    
    def setLabelFont(self, j: java.awt.Font) -> None: ...
    
    def setLabelPaint(self, j: java.awt.Paint) -> None: ...
    
    def setLinePaint(self, j: java.awt.Paint) -> None: ...
    
    def setOutlinePaint(self, j: java.awt.Paint) -> None: ...
    
    def setSeriesIndex(self, i: int) -> None: ...
    
    def setSeriesKey(self, j: java.lang.Comparable) -> None: ...
    
    
class LegendItemCollection(java.lang.Cloneable, java.io.Serializable):
    def __init__(self) -> None: ...
    
    def add(self, legendItem: LegendItem) -> None: ...
    
    def addAll(self, legendItemCollection: 'LegendItemCollection') -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def get(self, i: int) -> LegendItem: ...
    
    def getItemCount(self) -> int: ...
    
    def iterator(self) -> typing.Iterator: ...
    
    
class LegendItemSource:
    def __init__(self) -> None: ...
    
    def getLegendItems(self) -> LegendItemCollection: ...
    
    
class LegendRenderingOrder(java.io.Serializable):
    REVERSE = 'LegendRenderingOrder.REVERSE'
    STANDARD = 'LegendRenderingOrder.STANDARD'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def toString(self) -> str: ...
    
    
class PaintMap(java.lang.Cloneable, java.io.Serializable):
    def __init__(self) -> None: ...
    
    def clear(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def containsKey(self, j: java.lang.Comparable) -> bool: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPaint(self, j: java.lang.Comparable) -> java.awt.Paint: ...
    
    def put(self, j: java.lang.Comparable, j2: java.awt.Paint) -> None: ...
    
    
class PolarChartPanel(ChartPanel):
    pass
    
class StandardChartTheme(ChartTheme, java.lang.Cloneable, org.jfree.util.PublicCloneable, java.io.Serializable):
    def __init__(self, s: str) -> None: ...
    
    def apply(self, jFreeChart: JFreeChart) -> None: ...
    
    def clone(self) -> object: ...
    
    @staticmethod
    def createDarknessTheme() -> ChartTheme: ...
    
    @staticmethod
    def createJFreeTheme() -> ChartTheme: ...
    
    @staticmethod
    def createLegacyTheme() -> ChartTheme: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAxisLabelPaint(self) -> java.awt.Paint: ...
    
    def getAxisOffset(self) -> org.jfree.ui.RectangleInsets: ...
    
    def getBarPainter(self) -> 'renderer.category.BarPainter': ...
    
    def getBaselinePaint(self) -> java.awt.Paint: ...
    
    def getChartBackgroundPaint(self) -> java.awt.Paint: ...
    
    def getCrosshairPaint(self) -> java.awt.Paint: ...
    
    def getDomainGridlinePaint(self) -> java.awt.Paint: ...
    
    def getDrawingSupplier(self) -> plot.DrawingSupplier: ...
    
    def getErrorIndicatorPaint(self) -> java.awt.Paint: ...
    
    def getExtraLargeFont(self) -> java.awt.Font: ...
    
    def getGridBandAlternatePaint(self) -> java.awt.Paint: ...
    
    def getGridBandPaint(self) -> java.awt.Paint: ...
    
    def getItemLabelPaint(self) -> java.awt.Paint: ...
    
    def getLabelLinkPaint(self) -> java.awt.Paint: ...
    
    def getLabelLinkStyle(self) -> plot.PieLabelLinkStyle: ...
    
    def getLargeFont(self) -> java.awt.Font: ...
    
    def getLegendBackgroundPaint(self) -> java.awt.Paint: ...
    
    def getLegendItemPaint(self) -> java.awt.Paint: ...
    
    def getName(self) -> str: ...
    
    def getPlotBackgroundPaint(self) -> java.awt.Paint: ...
    
    def getPlotOutlinePaint(self) -> java.awt.Paint: ...
    
    def getRangeGridlinePaint(self) -> java.awt.Paint: ...
    
    def getRegularFont(self) -> java.awt.Font: ...
    
    def getShadowPaint(self) -> java.awt.Paint: ...
    
    def getSmallFont(self) -> java.awt.Font: ...
    
    def getSubtitlePaint(self) -> java.awt.Paint: ...
    
    def getThermometerPaint(self) -> java.awt.Paint: ...
    
    def getTickLabelPaint(self) -> java.awt.Paint: ...
    
    def getTitlePaint(self) -> java.awt.Paint: ...
    
    def getWallPaint(self) -> java.awt.Paint: ...
    
    def getXYBarPainter(self) -> 'renderer.xy.XYBarPainter': ...
    
    def isShadowVisible(self) -> bool: ...
    
    def setAxisLabelPaint(self, j: java.awt.Paint) -> None: ...
    
    def setAxisOffset(self, o: org.jfree.ui.RectangleInsets) -> None: ...
    
    def setBarPainter(self, r: 'renderer.category.BarPainter') -> None: ...
    
    def setBaselinePaint(self, j: java.awt.Paint) -> None: ...
    
    def setChartBackgroundPaint(self, j: java.awt.Paint) -> None: ...
    
    def setCrosshairPaint(self, j: java.awt.Paint) -> None: ...
    
    def setDomainGridlinePaint(self, j: java.awt.Paint) -> None: ...
    
    def setDrawingSupplier(self, p: plot.DrawingSupplier) -> None: ...
    
    def setErrorIndicatorPaint(self, j: java.awt.Paint) -> None: ...
    
    def setExtraLargeFont(self, j: java.awt.Font) -> None: ...
    
    def setGridBandAlternatePaint(self, j: java.awt.Paint) -> None: ...
    
    def setGridBandPaint(self, j: java.awt.Paint) -> None: ...
    
    def setItemLabelPaint(self, j: java.awt.Paint) -> None: ...
    
    def setLabelLinkPaint(self, j: java.awt.Paint) -> None: ...
    
    def setLabelLinkStyle(self, p: plot.PieLabelLinkStyle) -> None: ...
    
    def setLargeFont(self, j: java.awt.Font) -> None: ...
    
    def setLegendBackgroundPaint(self, j: java.awt.Paint) -> None: ...
    
    def setLegendItemPaint(self, j: java.awt.Paint) -> None: ...
    
    def setPlotBackgroundPaint(self, j: java.awt.Paint) -> None: ...
    
    def setPlotOutlinePaint(self, j: java.awt.Paint) -> None: ...
    
    def setRangeGridlinePaint(self, j: java.awt.Paint) -> None: ...
    
    def setRegularFont(self, j: java.awt.Font) -> None: ...
    
    def setShadowPaint(self, j: java.awt.Paint) -> None: ...
    
    def setShadowVisible(self, b: bool) -> None: ...
    
    def setSmallFont(self, j: java.awt.Font) -> None: ...
    
    def setSubtitlePaint(self, j: java.awt.Paint) -> None: ...
    
    def setThermometerPaint(self, j: java.awt.Paint) -> None: ...
    
    def setTickLabelPaint(self, j: java.awt.Paint) -> None: ...
    
    def setTitlePaint(self, j: java.awt.Paint) -> None: ...
    
    def setWallPaint(self, j: java.awt.Paint) -> None: ...
    
    def setXYBarPainter(self, r: 'renderer.xy.XYBarPainter') -> None: ...
    
    
class StrokeMap(java.lang.Cloneable, java.io.Serializable):
    def __init__(self) -> None: ...
    
    def clear(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def containsKey(self, j: java.lang.Comparable) -> bool: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getStroke(self, j: java.lang.Comparable) -> java.awt.Stroke: ...
    
    def put(self, j: java.lang.Comparable, j2: java.awt.Stroke) -> None: ...
    
    
