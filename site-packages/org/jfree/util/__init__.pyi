import typing
import java.awt
import java.awt.geom
import java.awt.image
import java.io
import java.lang
import java.net
import java.text
import java.util
import javax.swing
import org.jfree.base.config


class AbstractObjectList(java.lang.Cloneable, java.io.Serializable):
    DEFAULT_INITIAL_CAPACITY = 8
    
    def __init__(self) -> None: ...
    
    def clear(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def size(self) -> int: ...
    
    
class ArrayUtilities:
    def __init__(self) -> None: ...
    
    @staticmethod
    def clone(t: typing.List[typing.List[float]]) -> typing.List[typing.List[float]]: ...
    
    @staticmethod
    def compareVersionArrays(t: typing.List[java.lang.Comparable], t2: typing.List[java.lang.Comparable]) -> int: ...
    
    @staticmethod
    def equal(t: typing.List[typing.List[float]], t2: typing.List[typing.List[float]]) -> bool: ...
    
    @staticmethod
    def equalReferencesInArrays(t: typing.List[object], t2: typing.List[object]) -> bool: ...
    
    @staticmethod
    def hasDuplicateItems(t: typing.List[object]) -> bool: ...
    
    
class AttributedStringUtilities:
    def __init__(self) -> None: ...
    
    @staticmethod
    def equal(j: java.text.AttributedString, j2: java.text.AttributedString) -> bool: ...
    
    
class BooleanList(AbstractObjectList):
    DEFAULT_INITIAL_CAPACITY = 8
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getBoolean(self, i: int) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def setBoolean(self, i: int, b: bool) -> None: ...
    
    
class BooleanUtilities:
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(b: bool) -> bool: ...
    
    
class ClassComparator(java.util.Comparator, java.io.Serializable):
    def __init__(self) -> None: ...
    
    def compare(self, o: object, o2: object) -> int: ...
    
    def isComparable(self, j: java.lang.Class, j2: java.lang.Class) -> bool: ...
    
    
class Configuration(java.io.Serializable, java.lang.Cloneable):
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def findPropertyKeys(self, s: str) -> typing.Iterator: ...
    
    def getConfigProperties(self) -> java.util.Enumeration: ...
    
    def getConfigProperty(self, s: str) -> str: ...
    
    
class DefaultConfiguration(java.util.Properties, org.jfree.base.config.ModifiableConfiguration):
    def __init__(self) -> None: ...
    
    def findPropertyKeys(self, s: str) -> typing.Iterator: ...
    
    def fromkeys(self) -> None: ...
    
    def getConfigProperties(self) -> java.util.Enumeration: ...
    
    def getConfigProperty(self, s: str) -> str: ...
    
    def setConfigProperty(self, s: str, s2: str) -> None: ...
    
    
class ExtendedConfiguration(Configuration):
    def __init__(self) -> None: ...
    
    def getBoolProperty(self, s: str) -> bool: ...
    
    def getIntProperty(self, s: str) -> int: ...
    
    def isPropertySet(self, s: str) -> bool: ...
    
    
class ExtendedConfigurationWrapper(ExtendedConfiguration):
    def __init__(self, configuration: Configuration) -> None: ...
    
    def clone(self) -> object: ...
    
    def findPropertyKeys(self, s: str) -> typing.Iterator: ...
    
    def getBoolProperty(self, s: str) -> bool: ...
    
    def getConfigProperties(self) -> java.util.Enumeration: ...
    
    def getConfigProperty(self, s: str) -> str: ...
    
    def getIntProperty(self, s: str) -> int: ...
    
    def isPropertySet(self, s: str) -> bool: ...
    
    
class FastStack(java.io.Serializable, java.lang.Cloneable):
    def __init__(self) -> None: ...
    
    def clear(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def get(self, i: int) -> object: ...
    
    def isEmpty(self) -> bool: ...
    
    def peek(self) -> object: ...
    
    def pop(self) -> object: ...
    
    def push(self, o: object) -> None: ...
    
    def size(self) -> int: ...
    
    
class HashNMap(java.io.Serializable, java.lang.Cloneable):
    def __init__(self) -> None: ...
    
    def add(self, o: object, o2: object) -> bool: ...
    
    def clear(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def contains(self, o: object) -> bool: ...
    
    def containsKey(self, o: object) -> bool: ...
    
    def containsValue(self, o: object) -> bool: ...
    
    def get(self, o: object, i: int) -> object: ...
    
    def getAll(self, o: object) -> typing.Iterator: ...
    
    def getFirst(self, o: object) -> object: ...
    
    def getValueCount(self, o: object) -> int: ...
    
    def keySet(self) -> set: ...
    
    def keys(self) -> typing.Iterator: ...
    
    def put(self, o: object, o2: object) -> bool: ...
    
    def remove(self, o: object, o2: object) -> bool: ...
    
    def removeAll(self, o: object) -> None: ...
    
    def toArray(self, o: object) -> typing.List[object]: ...
    
    
class LineBreakIterator(typing.Iterator):
    DONE = -1
    
    def __init__(self) -> None: ...
    
    def getText(self) -> str: ...
    
    def hasNext(self) -> bool: ...
    
    def next(self) -> object: ...
    
    def nextPosition(self) -> int: ...
    
    def nextWithEnd(self) -> int: ...
    
    def remove(self) -> None: ...
    
    def setText(self, s: str) -> None: ...
    
    
class Log:
    def __init__(self) -> None: ...
    
    def addTarget(self, logTarget: 'LogTarget') -> None: ...
    
    @staticmethod
    def createContext(s: str) -> 'LogContext': ...
    
    @staticmethod
    def debug(o: object) -> None: ...
    
    @staticmethod
    def error(o: object) -> None: ...
    
    def getDebuglevel(self) -> int: ...
    
    @staticmethod
    def getInstance() -> 'Log': ...
    
    def getTargets(self) -> typing.List['LogTarget']: ...
    
    @staticmethod
    def info(o: object) -> None: ...
    
    def init(self) -> None: ...
    
    @staticmethod
    def isDebugEnabled() -> bool: ...
    
    @staticmethod
    def isErrorEnabled() -> bool: ...
    
    @staticmethod
    def isInfoEnabled() -> bool: ...
    
    @staticmethod
    def isWarningEnabled() -> bool: ...
    
    @staticmethod
    def log(i: int, o: object) -> None: ...
    
    def removeTarget(self, logTarget: 'LogTarget') -> None: ...
    
    def replaceTargets(self, logTarget: 'LogTarget') -> None: ...
    
    @staticmethod
    def warn(o: object) -> None: ...
    
    
    class SimpleMessage:
        def __init__(self, s: str, t: typing.List[object]) -> None: ...
        
        def toString(self) -> str: ...
        
        
    
class LogContext:
    def __init__(self, s: str) -> None: ...
    
    def debug(self, o: object) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def error(self, o: object) -> None: ...
    
    def hashCode(self) -> int: ...
    
    def info(self, o: object) -> None: ...
    
    def isDebugEnabled(self) -> bool: ...
    
    def isErrorEnabled(self) -> bool: ...
    
    def isInfoEnabled(self) -> bool: ...
    
    def isWarningEnabled(self) -> bool: ...
    
    def log(self, i: int, o: object) -> None: ...
    
    def warn(self, o: object) -> None: ...
    
    
class LogTarget:
    DEBUG = 3
    ERROR = 0
    INFO = 2
    LEVELS = "array(java.lang.String, [u'ERROR: ', u'WARN:  ', u'INFO:  ', u'DEBUG: '])"
    WARN = 1
    
    def __init__(self) -> None: ...
    
    def log(self, i: int, o: object) -> None: ...
    
    
class ObjectList(AbstractObjectList):
    DEFAULT_INITIAL_CAPACITY = 8
    
    def __init__(self) -> None: ...
    
    def get(self, i: int) -> object: ...
    
    def indexOf(self, o: object) -> int: ...
    
    def set(self, i: int, o: object) -> None: ...
    
    
class ObjectTable(java.io.Serializable):
    def __init__(self) -> None: ...
    
    def clear(self) -> None: ...
    
    def ensureCapacity(self, i: int, i2: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getColumnCount(self) -> int: ...
    
    def getColumnIncrement(self) -> int: ...
    
    def getRowCount(self) -> int: ...
    
    def getRowIncrement(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    
class ObjectUtilities:
    CLASS_CONTEXT = u'ClassContext'
    THREAD_CONTEXT = u'ThreadContext'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def clone(o: object) -> object: ...
    
    @staticmethod
    def deepClone(j: java.util.Collection) -> java.util.Collection: ...
    
    @staticmethod
    def equal(o: object, o2: object) -> bool: ...
    
    @staticmethod
    def getClassLoader() -> java.lang.ClassLoader: ...
    
    @staticmethod
    def getClassLoaderSource() -> str: ...
    
    @staticmethod
    def getResource(s: str, j: java.lang.Class) -> java.net.URL: ...
    
    @staticmethod
    def getResourceAsStream(s: str, j: java.lang.Class) -> java.io.InputStream: ...
    
    @staticmethod
    def getResourceRelative(s: str, j: java.lang.Class) -> java.net.URL: ...
    
    @staticmethod
    def getResourceRelativeAsStream(s: str, j: java.lang.Class) -> java.io.InputStream: ...
    
    @staticmethod
    def isJDK14() -> bool: ...
    
    @staticmethod
    def loadAndInstantiate(s: str, j: java.lang.Class) -> object: ...
    
    @staticmethod
    def setClassLoader(j: java.lang.ClassLoader) -> None: ...
    
    @staticmethod
    def setClassLoaderSource(s: str) -> None: ...
    
    
class PaintList(AbstractObjectList):
    DEFAULT_INITIAL_CAPACITY = 8
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPaint(self, i: int) -> java.awt.Paint: ...
    
    def hashCode(self) -> int: ...
    
    def setPaint(self, i: int, j: java.awt.Paint) -> None: ...
    
    
class PaintUtilities:
    def __init__(self) -> None: ...
    
    @staticmethod
    def colorToString(j: java.awt.Color) -> str: ...
    
    @staticmethod
    def equal(j: java.awt.Paint, j2: java.awt.Paint) -> bool: ...
    
    @staticmethod
    def stringToColor(s: str) -> java.awt.Color: ...
    
    
class PrintStreamLogTarget(LogTarget, java.io.Serializable):
    DEBUG = 3
    ERROR = 0
    INFO = 2
    LEVELS = "array(java.lang.String, [u'ERROR: ', u'WARN:  ', u'INFO:  ', u'DEBUG: '])"
    WARN = 1
    
    def __init__(self) -> None: ...
    
    def log(self, i: int, o: object) -> None: ...
    
    
class PublicCloneable(java.lang.Cloneable):
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    
class ReadOnlyIterator(typing.Iterator):
    def __init__(self, t: typing.Iterator) -> None: ...
    
    def hasNext(self) -> bool: ...
    
    def next(self) -> object: ...
    
    def remove(self) -> None: ...
    
    
class ResourceBundleSupport:
    def __init__(self, s: str) -> None: ...
    
    def createMenu(self, s: str) -> javax.swing.JMenu: ...
    
    def createTransparentIcon(self, i: int, i2: int) -> javax.swing.Icon: ...
    
    def formatMessage(self, s: str, t: typing.List[object]) -> str: ...
    
    def getIcon(self, s: str) -> javax.swing.Icon: ...
    
    def getKeyStroke(self, s: str) -> javax.swing.KeyStroke: ...
    
    def getLocale(self) -> java.util.Locale: ...
    
    def getMnemonic(self, s: str) -> int: ...
    
    def getOptionalKeyStroke(self, s: str) -> javax.swing.KeyStroke: ...
    
    def getOptionalMnemonic(self, s: str) -> int: ...
    
    def getResourceURL(self, s: str) -> java.net.URL: ...
    
    def getString(self, s: str) -> str: ...
    
    
class ResourceBundleWrapper:
    def __init__(self) -> None: ...
    
    @staticmethod
    def getBundle(s: str) -> java.util.ResourceBundle: ...
    
    @staticmethod
    def removeCodeBase(j: java.net.URL, j2: java.net.URLClassLoader) -> None: ...
    
    
class Rotation(java.io.Serializable):
    ANTICLOCKWISE = 'Rotation.ANTICLOCKWISE'
    CLOCKWISE = 'Rotation.CLOCKWISE'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFactor(self) -> float: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class ShapeList(AbstractObjectList):
    DEFAULT_INITIAL_CAPACITY = 8
    
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getShape(self, i: int) -> java.awt.Shape: ...
    
    def hashCode(self) -> int: ...
    
    def setShape(self, i: int, j: java.awt.Shape) -> None: ...
    
    
class ShapeUtilities:
    def __init__(self) -> None: ...
    
    @staticmethod
    def clone(j: java.awt.Shape) -> java.awt.Shape: ...
    
    @staticmethod
    def contains(j: java.awt.geom.Rectangle2D, j2: java.awt.geom.Rectangle2D) -> bool: ...
    
    @staticmethod
    def createDiagonalCross(f: float, f2: float) -> java.awt.Shape: ...
    
    @staticmethod
    def createDiamond(f: float) -> java.awt.Shape: ...
    
    @staticmethod
    def createDownTriangle(f: float) -> java.awt.Shape: ...
    
    @staticmethod
    def createLineRegion(j: java.awt.geom.Line2D, f: float) -> java.awt.Shape: ...
    
    @staticmethod
    def createRegularCross(f: float, f2: float) -> java.awt.Shape: ...
    
    @staticmethod
    def createTranslatedShape(j: java.awt.Shape, f: float, f2: float) -> java.awt.Shape: ...
    
    @staticmethod
    def createUpTriangle(f: float) -> java.awt.Shape: ...
    
    @staticmethod
    def drawRotatedShape(j: java.awt.Graphics2D, j2: java.awt.Shape, f: float, f2: float, f3: float) -> None: ...
    
    @staticmethod
    def equal(j: java.awt.Polygon, j2: java.awt.Polygon) -> bool: ...
    
    @staticmethod
    def getPointInRectangle(f: float, f2: float, j: java.awt.geom.Rectangle2D) -> java.awt.geom.Point2D: ...
    
    @staticmethod
    def intersects(j: java.awt.geom.Rectangle2D, j2: java.awt.geom.Rectangle2D) -> bool: ...
    
    @staticmethod
    def rotateShape(j: java.awt.Shape, f: float, f2: float, f3: float) -> java.awt.Shape: ...
    
    
class SortOrder(java.io.Serializable):
    ASCENDING = 'SortOrder.ASCENDING'
    DESCENDING = 'SortOrder.DESCENDING'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class SortedConfigurationWriter:
    def __init__(self) -> None: ...
    
    def save(self, s: str, configuration: Configuration) -> None: ...
    
    
class StackableException(Exception):
    def __init__(self) -> None: ...
    
    def getParent(self) -> Exception: ...
    
    def printStackTrace(self) -> None: ...
    
    
class StackableRuntimeException(java.lang.RuntimeException):
    def __init__(self) -> None: ...
    
    def getParent(self) -> Exception: ...
    
    
class StringUtils:
    def __init__(self) -> None: ...
    
    @staticmethod
    def endsWithIgnoreCase(s: str, s2: str) -> bool: ...
    
    @staticmethod
    def getLineSeparator() -> str: ...
    
    @staticmethod
    def startsWithIgnoreCase(s: str, s2: str) -> bool: ...
    
    
class StrokeList(AbstractObjectList):
    DEFAULT_INITIAL_CAPACITY = 8
    
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getStroke(self, i: int) -> java.awt.Stroke: ...
    
    def hashCode(self) -> int: ...
    
    def setStroke(self, i: int, j: java.awt.Stroke) -> None: ...
    
    
class TableOrder(java.io.Serializable):
    BY_COLUMN = 'TableOrder.BY_COLUMN'
    BY_ROW = 'TableOrder.BY_ROW'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class UnitType(java.io.Serializable):
    ABSOLUTE = 'UnitType.ABSOLUTE'
    RELATIVE = 'UnitType.RELATIVE'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class WaitingImageObserver(java.awt.image.ImageObserver, java.io.Serializable, java.lang.Cloneable):
    ABORT = 128
    ALLBITS = 32
    ERROR = 64
    FRAMEBITS = 16
    HEIGHT = 2
    PROPERTIES = 4
    SOMEBITS = 8
    WIDTH = 1
    
    def __init__(self, j: java.awt.Image) -> None: ...
    
    def clone(self) -> object: ...
    
    def imageUpdate(self, j: java.awt.Image, i: int, i2: int, i3: int, i4: int, i5: int) -> bool: ...
    
    def isError(self) -> bool: ...
    
    def isLoadingComplete(self) -> bool: ...
    
    def waitImageLoaded(self) -> None: ...
    
    
