import java.io
import java.lang
import java.util


class AttributeRenderer:
    def __init__(self) -> None: ...
    
    def toString(self, o: object) -> str: ...
    
    
class StringTemplateWriter:
    NO_WRAP = -1
    
    def __init__(self) -> None: ...
    
    def popAnchorPoint(self) -> None: ...
    
    def popIndentation(self) -> str: ...
    
    def pushAnchorPoint(self) -> None: ...
    
    def pushIndentation(self, s: str) -> None: ...
    
    def setLineWidth(self, i: int) -> None: ...
    
    def write(self, s: str) -> int: ...
    
    def writeSeparator(self, s: str) -> int: ...
    
    def writeWrapSeparator(self, s: str) -> int: ...
    
    
class AutoIndentWriter(StringTemplateWriter):
    NO_WRAP = -1
    
    def __init__(self, j: java.io.Writer) -> None: ...
    
    def getIndentationWidth(self) -> int: ...
    
    def indent(self) -> int: ...
    
    def popAnchorPoint(self) -> None: ...
    
    def popIndentation(self) -> str: ...
    
    def pushAnchorPoint(self) -> None: ...
    
    def pushIndentation(self, s: str) -> None: ...
    
    def setLineWidth(self, i: int) -> None: ...
    
    def write(self, s: str) -> int: ...
    
    def writeSeparator(self, s: str) -> int: ...
    
    def writeWrapSeparator(self, s: str) -> int: ...
    
    
class StringTemplateGroupLoader:
    def __init__(self) -> None: ...
    
    def loadGroup(self, s: str) -> 'StringTemplateGroup': ...
    
    def loadInterface(self, s: str) -> 'StringTemplateGroupInterface': ...
    
    
class PathGroupLoader(StringTemplateGroupLoader):
    def __init__(self, stringTemplateErrorListener: 'StringTemplateErrorListener') -> None: ...
    
    def error(self, s: str) -> None: ...
    
    def getFileCharEncoding(self) -> str: ...
    
    def loadGroup(self, s: str) -> 'StringTemplateGroup': ...
    
    def loadInterface(self, s: str) -> 'StringTemplateGroupInterface': ...
    
    def setFileCharEncoding(self, s: str) -> None: ...
    
    
class CommonGroupLoader(PathGroupLoader):
    def __init__(self, stringTemplateErrorListener: 'StringTemplateErrorListener') -> None: ...
    
    
class NoIndentWriter(AutoIndentWriter):
    NO_WRAP = -1
    
    def __init__(self, j: java.io.Writer) -> None: ...
    
    def write(self, s: str) -> int: ...
    
    
class StringTemplate:
    ANONYMOUS_ST_NAME = u'anonymous'
    REGION_EMBEDDED = 2
    REGION_EXPLICIT = 3
    REGION_IMPLICIT = 1
    VERSION = u'3.2.1'
    defaultGroup = 'group defaultGroup;\n'
    
    def __init__(self) -> None: ...
    
    def addChunk(self, l: 'language.Expr') -> None: ...
    
    def addRegionName(self, s: str) -> None: ...
    
    def containsRegionName(self, s: str) -> bool: ...
    
    def defineEmptyFormalArgumentList(self) -> None: ...
    
    def defineFormalArgument(self, s: str) -> None: ...
    
    def defineFormalArguments(self, l: list) -> None: ...
    
    def error(self, s: str) -> None: ...
    
    def get(self, stringTemplate: 'StringTemplate', s: str) -> object: ...
    
    def getArgumentContext(self) -> dict: ...
    
    def getArgumentsAST(self) -> 'language.StringTemplateAST': ...
    
    def getAttribute(self, s: str) -> object: ...
    
    def getAttributeRenderer(self, j: java.lang.Class) -> AttributeRenderer: ...
    
    def getAttributes(self) -> dict: ...
    
    def getChunks(self) -> list: ...
    
    def getDOTForDependencyGraph(self, b: bool) -> 'StringTemplate': ...
    
    def getDependencyGraph(self, d: dict, b: bool) -> None: ...
    
    def getEnclosingInstance(self) -> 'StringTemplate': ...
    
    def getEnclosingInstanceStackString(self) -> str: ...
    
    def getEnclosingInstanceStackTrace(self) -> str: ...
    
    def getErrorListener(self) -> 'StringTemplateErrorListener': ...
    
    def getFormalArgument(self, s: str) -> 'language.FormalArgument': ...
    
    def getFormalArguments(self) -> dict: ...
    
    def getGroup(self) -> 'StringTemplateGroup': ...
    
    def getGroupFileLine(self) -> int: ...
    
    def getInstanceOf(self) -> 'StringTemplate': ...
    
    def getName(self) -> str: ...
    
    def getNativeGroup(self) -> 'StringTemplateGroup': ...
    
    def getOutermostEnclosingInstance(self) -> 'StringTemplate': ...
    
    def getOutermostName(self) -> str: ...
    
    def getRegionDefType(self) -> int: ...
    
    def getTemplate(self) -> str: ...
    
    def getTemplateDeclaratorString(self) -> str: ...
    
    def getTemplateID(self) -> int: ...
    
    @staticmethod
    def inLintMode() -> bool: ...
    
    @staticmethod
    def isRecursiveEnclosingInstance(stringTemplate: 'StringTemplate') -> bool: ...
    
    def isRegion(self) -> bool: ...
    
    def lookupFormalArgument(self, s: str) -> 'language.FormalArgument': ...
    
    def parseAction(self, s: str) -> 'language.ASTExpr': ...
    
    def printDebugString(self) -> None: ...
    
    def rawSetArgumentAttribute(self, stringTemplate: 'StringTemplate', d: dict, s: str, o: object) -> None: ...
    
    def registerRenderer(self, j: java.lang.Class, attributeRenderer: AttributeRenderer) -> None: ...
    
    def removeAttribute(self, s: str) -> None: ...
    
    def reset(self) -> None: ...
    
    @staticmethod
    def resetTemplateCounter() -> None: ...
    
    def setArgumentContext(self, d: dict) -> None: ...
    
    def setArgumentsAST(self, l: 'language.StringTemplateAST') -> None: ...
    
    def setAttribute(self, s: str, i: int) -> None: ...
    
    def setAttributeRenderers(self, d: dict) -> None: ...
    
    def setAttributes(self, d: dict) -> None: ...
    
    def setDefaultArgumentValues(self) -> None: ...
    
    def setEnclosingInstance(self, stringTemplate: 'StringTemplate') -> None: ...
    
    def setErrorListener(self, stringTemplateErrorListener: 'StringTemplateErrorListener') -> None: ...
    
    def setFormalArguments(self, j: java.util.LinkedHashMap) -> None: ...
    
    def setGroup(self, stringTemplateGroup: 'StringTemplateGroup') -> None: ...
    
    def setGroupFileLine(self, i: int) -> None: ...
    
    def setIsRegion(self, b: bool) -> None: ...
    
    @staticmethod
    def setLintMode(b: bool) -> None: ...
    
    def setName(self, s: str) -> None: ...
    
    def setNativeGroup(self, stringTemplateGroup: 'StringTemplateGroup') -> None: ...
    
    def setPassThroughAttributes(self, b: bool) -> None: ...
    
    def setPredefinedAttributes(self) -> None: ...
    
    def setRegionDefType(self, i: int) -> None: ...
    
    def setTemplate(self, s: str) -> None: ...
    
    def toDebugString(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStructureString(self) -> str: ...
    
    def warning(self, s: str) -> None: ...
    
    def write(self, stringTemplateWriter: StringTemplateWriter) -> int: ...
    
    
    class Aggregate:
        def __init__(self) -> None: ...
        
        def get(self, s: str) -> object: ...
        
        def toString(self) -> str: ...
        
        
    class STAttributeList:
        def __init__(self) -> None: ...
        
        
    
class StringTemplateErrorListener:
    def __init__(self) -> None: ...
    
    def error(self, s: str, j: java.lang.Throwable) -> None: ...
    
    def warning(self, s: str) -> None: ...
    
    
class StringTemplateGroup:
    DEFAULT_ERROR_LISTENER = 'org.antlr.stringtemplate.StringTemplateGroup$1'
    
    def __init__(self, s: str) -> None: ...
    
    def createStringTemplate(self) -> StringTemplate: ...
    
    def defineImplicitRegionTemplate(self, stringTemplate: StringTemplate, s: str) -> StringTemplate: ...
    
    def defineMap(self, s: str, d: dict) -> None: ...
    
    def defineRegionTemplate(self, s: str, s2: str, s3: str, i: int) -> StringTemplate: ...
    
    def defineTemplate(self, s: str, s2: str) -> StringTemplate: ...
    
    def defineTemplateAlias(self, s: str, s2: str) -> StringTemplate: ...
    
    def doNotEmitDebugStringsForTemplate(self, s: str) -> None: ...
    
    def emitDebugStartStopStrings(self, b: bool) -> None: ...
    
    def emitTemplateStartDebugString(self, stringTemplate: StringTemplate, stringTemplateWriter: StringTemplateWriter) -> None: ...
    
    def emitTemplateStopDebugString(self, stringTemplate: StringTemplate, stringTemplateWriter: StringTemplateWriter) -> None: ...
    
    def error(self, s: str) -> None: ...
    
    def getAttributeRenderer(self, j: java.lang.Class) -> AttributeRenderer: ...
    
    def getEmbeddedInstanceOf(self, stringTemplate: StringTemplate, s: str) -> StringTemplate: ...
    
    def getErrorListener(self) -> StringTemplateErrorListener: ...
    
    def getFileCharEncoding(self) -> str: ...
    
    def getFileNameFromTemplateName(self, s: str) -> str: ...
    
    def getGroupHierarchyStackString(self) -> str: ...
    
    def getInstanceOf(self, s: str) -> StringTemplate: ...
    
    def getMangledRegionName(self, s: str, s2: str) -> str: ...
    
    def getMap(self, s: str) -> dict: ...
    
    def getName(self) -> str: ...
    
    def getRefreshInterval(self) -> int: ...
    
    def getRootDir(self) -> str: ...
    
    def getStringTemplateWriter(self, j: java.io.Writer) -> StringTemplateWriter: ...
    
    def getSuperGroup(self) -> 'StringTemplateGroup': ...
    
    def getTemplateDefinition(self, s: str) -> StringTemplate: ...
    
    def getTemplateLexerClass(self) -> java.lang.Class: ...
    
    def getTemplateNameFromFileName(self, s: str) -> str: ...
    
    def getTemplateNames(self) -> set: ...
    
    def getUnMangledTemplateName(self, s: str) -> str: ...
    
    def implementInterface(self, s: str) -> None: ...
    
    def isDefined(self, s: str) -> bool: ...
    
    def isDefinedInThisGroup(self, s: str) -> bool: ...
    
    @staticmethod
    def loadGroup(s: str) -> 'StringTemplateGroup': ...
    
    @staticmethod
    def loadInterface(s: str) -> 'StringTemplateGroupInterface': ...
    
    def lookupTemplate(self, s: str) -> StringTemplate: ...
    
    @staticmethod
    def registerDefaultLexer(j: java.lang.Class) -> None: ...
    
    @staticmethod
    def registerGroupLoader(stringTemplateGroupLoader: StringTemplateGroupLoader) -> None: ...
    
    def registerRenderer(self, j: java.lang.Class, o: object) -> None: ...
    
    def setAttributeRenderers(self, d: dict) -> None: ...
    
    def setErrorListener(self, stringTemplateErrorListener: StringTemplateErrorListener) -> None: ...
    
    def setFileCharEncoding(self, s: str) -> None: ...
    
    def setName(self, s: str) -> None: ...
    
    def setRefreshInterval(self, i: int) -> None: ...
    
    def setRootDir(self, s: str) -> None: ...
    
    def setStringTemplateWriter(self, j: java.lang.Class) -> None: ...
    
    def setSuperGroup(self, s: str) -> None: ...
    
    def toString(self) -> str: ...
    
    
class StringTemplateGroupInterface:
    DEFAULT_ERROR_LISTENER = 'org.antlr.stringtemplate.StringTemplateGroupInterface$1'
    
    def __init__(self, j: java.io.Reader) -> None: ...
    
    def defineTemplate(self, s: str, j: java.util.LinkedHashMap, b: bool) -> None: ...
    
    def error(self, s: str) -> None: ...
    
    def getMismatchedTemplates(self, stringTemplateGroup: StringTemplateGroup) -> list: ...
    
    def getMissingTemplates(self, stringTemplateGroup: StringTemplateGroup) -> list: ...
    
    def getName(self) -> str: ...
    
    def getSuperInterface(self) -> 'StringTemplateGroupInterface': ...
    
    def setName(self, s: str) -> None: ...
    
    def setSuperInterface(self, stringTemplateGroupInterface: 'StringTemplateGroupInterface') -> None: ...
    
    def toString(self) -> str: ...
    
    
