import typing

T = typing.TypeVar("T")


class DoubleKeyMap:
    def __init__(self) -> None: ...
    
    def get(self, key1: 'Key1') -> typing.Dict['Key2','Value']: ...
    
    def keySet(self) -> typing.Set['Key1']: ...
    
    def put(self, key1: 'Key1', key2: 'Key2', value: 'Value') -> 'Value': ...
    
    def values(self) -> typing.Sequence['Value']: ...
    
    
class FastQueue:
    def __init__(self) -> None: ...
    
    def add(self, t: 'T') -> None: ...
    
    def clear(self) -> None: ...
    
    def elementAt(self, i: int) -> 'T': ...
    
    def head(self) -> 'T': ...
    
    def range(self) -> int: ...
    
    def remove(self) -> 'T': ...
    
    def reset(self) -> None: ...
    
    def size(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class IntArray:
    INITIAL_SIZE = 10
    data: typing.List[int]
    
    def __init__(self) -> None: ...
    
    def add(self, i: int) -> None: ...
    
    def clear(self) -> None: ...
    
    def ensureCapacity(self, i: int) -> None: ...
    
    def pop(self) -> int: ...
    
    def push(self, i: int) -> None: ...
    
    def size(self) -> int: ...
    
    
class LookaheadStream(FastQueue):
    UNINITIALIZED_EOF_ELEMENT_INDEX = 2147483647
    eof: object
    
    def LT(self, i: int) -> 'T': ...
    
    def __init__(self) -> None: ...
    
    def consume(self) -> None: ...
    
    def fill(self, i: int) -> None: ...
    
    def index(self) -> int: ...
    
    def isEOF(self, t: 'T') -> bool: ...
    
    def mark(self) -> int: ...
    
    def nextElement(self) -> 'T': ...
    
    def release(self, i: int) -> None: ...
    
    def remove(self) -> 'T': ...
    
    def reset(self) -> None: ...
    
    def rewind(self) -> None: ...
    
    def seek(self, i: int) -> None: ...
    
    def size(self) -> int: ...
    
    
class Stats:
    ANTLRWORKS_DIR = u'antlrworks'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def avg(t: typing.List[int]) -> float: ...
    
    @staticmethod
    def getAbsoluteFileName(s: str) -> str: ...
    
    @staticmethod
    def max(t: typing.List[int]) -> int: ...
    
    @staticmethod
    def min(t: typing.List[int]) -> int: ...
    
    @staticmethod
    def stddev(t: typing.List[int]) -> float: ...
    
    @staticmethod
    def sum(t: typing.List[int]) -> int: ...
    
    @staticmethod
    def writeReport(s: str, s2: str) -> None: ...
    
    
