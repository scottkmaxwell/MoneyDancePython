import typing


class FastQueue:
    def __init__(self) -> None: ...
    
    def add(self, o: object) -> None: ...
    
    def clear(self) -> None: ...
    
    def get(self, i: int) -> object: ...
    
    def head(self) -> object: ...
    
    def remove(self) -> object: ...
    
    def reset(self) -> None: ...
    
    def size(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class IntArray:
    INITIAL_SIZE = 10
    data: typing.List[int]
    
    def __init__(self) -> None: ...
    
    def add(self, i: int) -> None: ...
    
    def clear(self) -> None: ...
    
    def ensureCapacity(self, i: int) -> None: ...
    
    def pop(self) -> int: ...
    
    def push(self, i: int) -> None: ...
    
    def size(self) -> int: ...
    
    
class LookaheadStream(FastQueue):
    UNINITIALIZED_EOF_ELEMENT_INDEX = 2147483647
    eof: object
    
    def LT(self, i: int) -> object: ...
    
    def __init__(self, o: object) -> None: ...
    
    def consume(self) -> None: ...
    
    def fill(self, i: int) -> None: ...
    
    def getCurrentSymbol(self) -> object: ...
    
    def index(self) -> int: ...
    
    def mark(self) -> int: ...
    
    def nextElement(self) -> object: ...
    
    def release(self, i: int) -> None: ...
    
    def remove(self) -> object: ...
    
    def reset(self) -> None: ...
    
    def rewind(self) -> None: ...
    
    def seek(self, i: int) -> None: ...
    
    def size(self) -> int: ...
    
    def sync(self, i: int) -> None: ...
    
    
class Stats:
    ANTLRWORKS_DIR = u'antlrworks'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def avg(t: typing.List[int]) -> float: ...
    
    @staticmethod
    def getAbsoluteFileName(s: str) -> str: ...
    
    @staticmethod
    def max(t: typing.List[int]) -> int: ...
    
    @staticmethod
    def min(t: typing.List[int]) -> int: ...
    
    @staticmethod
    def stddev(t: typing.List[int]) -> float: ...
    
    @staticmethod
    def sum(t: typing.List[int]) -> int: ...
    
    @staticmethod
    def writeReport(s: str, s2: str) -> None: ...
    
    
