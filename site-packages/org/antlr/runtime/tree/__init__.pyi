import typing
import java.lang
import org.antlr.runtime
import org.antlr.runtime.misc
import org.antlr.stringtemplate


class Tree:
    INVALID_NODE = '<errornode>'
    
    def __init__(self) -> None: ...
    
    def addChild(self, tree: 'Tree') -> None: ...
    
    def deleteChild(self, i: int) -> object: ...
    
    def dupNode(self) -> 'Tree': ...
    
    def freshenParentAndChildIndexes(self) -> None: ...
    
    def getAncestor(self, i: int) -> 'Tree': ...
    
    def getAncestors(self) -> list: ...
    
    def getCharPositionInLine(self) -> int: ...
    
    def getChild(self, i: int) -> 'Tree': ...
    
    def getChildCount(self) -> int: ...
    
    def getChildIndex(self) -> int: ...
    
    def getLine(self) -> int: ...
    
    def getParent(self) -> 'Tree': ...
    
    def getText(self) -> str: ...
    
    def getTokenStartIndex(self) -> int: ...
    
    def getTokenStopIndex(self) -> int: ...
    
    def getType(self) -> int: ...
    
    def hasAncestor(self, i: int) -> bool: ...
    
    def isNil(self) -> bool: ...
    
    def replaceChildren(self, i: int, i2: int, o: object) -> None: ...
    
    def setChild(self, i: int, tree: 'Tree') -> None: ...
    
    def setChildIndex(self, i: int) -> None: ...
    
    def setParent(self, tree: 'Tree') -> None: ...
    
    def setTokenStartIndex(self, i: int) -> None: ...
    
    def setTokenStopIndex(self, i: int) -> None: ...
    
    def toString(self) -> str: ...
    
    def toStringTree(self) -> str: ...
    
    
class BaseTree(Tree):
    INVALID_NODE = '<errornode>'
    
    def __init__(self) -> None: ...
    
    def addChild(self, tree: Tree) -> None: ...
    
    def addChildren(self, l: list) -> None: ...
    
    def deleteChild(self, i: int) -> object: ...
    
    def freshenParentAndChildIndexes(self) -> None: ...
    
    def getAncestor(self, i: int) -> Tree: ...
    
    def getAncestors(self) -> list: ...
    
    def getCharPositionInLine(self) -> int: ...
    
    def getChild(self, i: int) -> Tree: ...
    
    def getChildCount(self) -> int: ...
    
    def getChildIndex(self) -> int: ...
    
    def getChildren(self) -> list: ...
    
    def getFirstChildWithType(self, i: int) -> Tree: ...
    
    def getLine(self) -> int: ...
    
    def getParent(self) -> Tree: ...
    
    def hasAncestor(self, i: int) -> bool: ...
    
    def isNil(self) -> bool: ...
    
    def replaceChildren(self, i: int, i2: int, o: object) -> None: ...
    
    def sanityCheckParentAndChildIndexes(self) -> None: ...
    
    def setChild(self, i: int, tree: Tree) -> None: ...
    
    def setChildIndex(self, i: int) -> None: ...
    
    def setParent(self, tree: Tree) -> None: ...
    
    def toString(self) -> str: ...
    
    def toStringTree(self) -> str: ...
    
    
class TreeAdaptor:
    def __init__(self) -> None: ...
    
    def addChild(self, o: object, o2: object) -> None: ...
    
    def becomeRoot(self, o: org.antlr.runtime.Token, o2: object) -> object: ...
    
    def create(self, o: org.antlr.runtime.Token) -> object: ...
    
    def deleteChild(self, o: object, i: int) -> object: ...
    
    def dupNode(self, o: object) -> object: ...
    
    def dupTree(self, o: object) -> object: ...
    
    def errorNode(self, o: org.antlr.runtime.TokenStream, o2: org.antlr.runtime.Token, o3: org.antlr.runtime.Token, o4: org.antlr.runtime.RecognitionException) -> object: ...
    
    def getChild(self, o: object, i: int) -> object: ...
    
    def getChildCount(self, o: object) -> int: ...
    
    def getChildIndex(self, o: object) -> int: ...
    
    def getParent(self, o: object) -> object: ...
    
    def getText(self, o: object) -> str: ...
    
    def getToken(self, o: object) -> org.antlr.runtime.Token: ...
    
    def getTokenStartIndex(self, o: object) -> int: ...
    
    def getTokenStopIndex(self, o: object) -> int: ...
    
    def getType(self, o: object) -> int: ...
    
    def getUniqueID(self, o: object) -> int: ...
    
    def isNil(self, o: object) -> bool: ...
    
    def nil(self) -> object: ...
    
    def replaceChildren(self, o: object, i: int, i2: int, o2: object) -> None: ...
    
    def rulePostProcessing(self, o: object) -> object: ...
    
    def setChild(self, o: object, i: int, o2: object) -> None: ...
    
    def setChildIndex(self, o: object, i: int) -> None: ...
    
    def setParent(self, o: object, o2: object) -> None: ...
    
    def setText(self, o: object, s: str) -> None: ...
    
    def setTokenBoundaries(self, o: object, o2: org.antlr.runtime.Token, o3: org.antlr.runtime.Token) -> None: ...
    
    def setType(self, o: object, i: int) -> None: ...
    
    
class BaseTreeAdaptor(TreeAdaptor):
    def __init__(self) -> None: ...
    
    def addChild(self, o: object, o2: object) -> None: ...
    
    def becomeRoot(self, o: org.antlr.runtime.Token, o2: object) -> object: ...
    
    def createToken(self, o: org.antlr.runtime.Token) -> org.antlr.runtime.Token: ...
    
    def deleteChild(self, o: object, i: int) -> object: ...
    
    def dupTree(self, o: object) -> object: ...
    
    def errorNode(self, o: org.antlr.runtime.TokenStream, o2: org.antlr.runtime.Token, o3: org.antlr.runtime.Token, o4: org.antlr.runtime.RecognitionException) -> object: ...
    
    def getChild(self, o: object, i: int) -> object: ...
    
    def getChildCount(self, o: object) -> int: ...
    
    def getText(self, o: object) -> str: ...
    
    def getType(self, o: object) -> int: ...
    
    def getUniqueID(self, o: object) -> int: ...
    
    def isNil(self, o: object) -> bool: ...
    
    def nil(self) -> object: ...
    
    def rulePostProcessing(self, o: object) -> object: ...
    
    def setChild(self, o: object, i: int, o2: object) -> None: ...
    
    def setText(self, o: object, s: str) -> None: ...
    
    def setType(self, o: object, i: int) -> None: ...
    
    
class TreeNodeStream(org.antlr.runtime.IntStream):
    def LT(self, i: int) -> object: ...
    
    def __init__(self) -> None: ...
    
    def get(self, i: int) -> object: ...
    
    def getTokenStream(self) -> org.antlr.runtime.TokenStream: ...
    
    def getTreeAdaptor(self) -> TreeAdaptor: ...
    
    def getTreeSource(self) -> object: ...
    
    def replaceChildren(self, o: object, i: int, i2: int, o2: object) -> None: ...
    
    def reset(self) -> None: ...
    
    def setUniqueNavigationNodes(self, b: bool) -> None: ...
    
    def toString(self, o: object, o2: object) -> str: ...
    
    
class BufferedTreeNodeStream(TreeNodeStream):
    DEFAULT_INITIAL_BUFFER_SIZE = 100
    INITIAL_CALL_STACK_SIZE = 10
    
    def LA(self, i: int) -> int: ...
    
    def LT(self, i: int) -> object: ...
    
    def __init__(self, o: object) -> None: ...
    
    def consume(self) -> None: ...
    
    def fillBuffer(self, o: object) -> None: ...
    
    def get(self, i: int) -> object: ...
    
    def getCurrentSymbol(self) -> object: ...
    
    def getSourceName(self) -> str: ...
    
    def getTokenStream(self) -> org.antlr.runtime.TokenStream: ...
    
    def getTreeAdaptor(self) -> TreeAdaptor: ...
    
    def getTreeSource(self) -> object: ...
    
    def hasUniqueNavigationNodes(self) -> bool: ...
    
    def index(self) -> int: ...
    
    def iterator(self) -> typing.Iterator: ...
    
    def mark(self) -> int: ...
    
    def pop(self) -> int: ...
    
    def push(self, i: int) -> None: ...
    
    def release(self, i: int) -> None: ...
    
    def replaceChildren(self, o: object, i: int, i2: int, o2: object) -> None: ...
    
    def reset(self) -> None: ...
    
    def rewind(self) -> None: ...
    
    def seek(self, i: int) -> None: ...
    
    def setTokenStream(self, o: org.antlr.runtime.TokenStream) -> None: ...
    
    def setTreeAdaptor(self, treeAdaptor: TreeAdaptor) -> None: ...
    
    def setUniqueNavigationNodes(self, b: bool) -> None: ...
    
    def size(self) -> int: ...
    
    def toTokenString(self, i: int, i2: int) -> str: ...
    
    def toTokenTypeString(self) -> str: ...
    
    
class CommonTree(BaseTree):
    INVALID_NODE = '<errornode>'
    childIndex: int
    parent: 'CommonTree'
    token: org.antlr.runtime.Token
    
    def __init__(self) -> None: ...
    
    def dupNode(self) -> Tree: ...
    
    def getCharPositionInLine(self) -> int: ...
    
    def getChildIndex(self) -> int: ...
    
    def getLine(self) -> int: ...
    
    def getParent(self) -> Tree: ...
    
    def getText(self) -> str: ...
    
    def getToken(self) -> org.antlr.runtime.Token: ...
    
    def getTokenStartIndex(self) -> int: ...
    
    def getTokenStopIndex(self) -> int: ...
    
    def getType(self) -> int: ...
    
    def isNil(self) -> bool: ...
    
    def setChildIndex(self, i: int) -> None: ...
    
    def setParent(self, tree: Tree) -> None: ...
    
    def setTokenStartIndex(self, i: int) -> None: ...
    
    def setTokenStopIndex(self, i: int) -> None: ...
    
    def setUnknownTokenBoundaries(self) -> None: ...
    
    def toString(self) -> str: ...
    
    
class CommonErrorNode(CommonTree):
    INVALID_NODE = '<errornode>'
    childIndex: int
    input: org.antlr.runtime.IntStream
    parent: CommonTree
    start: org.antlr.runtime.Token
    stop: org.antlr.runtime.Token
    token: org.antlr.runtime.Token
    trappedException: org.antlr.runtime.RecognitionException
    
    def __init__(self, o: org.antlr.runtime.TokenStream, o2: org.antlr.runtime.Token, o3: org.antlr.runtime.Token, o4: org.antlr.runtime.RecognitionException) -> None: ...
    
    def getText(self) -> str: ...
    
    def getType(self) -> int: ...
    
    def isNil(self) -> bool: ...
    
    def toString(self) -> str: ...
    
    
class CommonTreeAdaptor(BaseTreeAdaptor):
    def __init__(self) -> None: ...
    
    def create(self, o: org.antlr.runtime.Token) -> object: ...
    
    def createToken(self, o: org.antlr.runtime.Token) -> org.antlr.runtime.Token: ...
    
    def dupNode(self, o: object) -> object: ...
    
    def getChild(self, o: object, i: int) -> object: ...
    
    def getChildCount(self, o: object) -> int: ...
    
    def getChildIndex(self, o: object) -> int: ...
    
    def getParent(self, o: object) -> object: ...
    
    def getText(self, o: object) -> str: ...
    
    def getToken(self, o: object) -> org.antlr.runtime.Token: ...
    
    def getTokenStartIndex(self, o: object) -> int: ...
    
    def getTokenStopIndex(self, o: object) -> int: ...
    
    def getType(self, o: object) -> int: ...
    
    def replaceChildren(self, o: object, i: int, i2: int, o2: object) -> None: ...
    
    def setChildIndex(self, o: object, i: int) -> None: ...
    
    def setParent(self, o: object, o2: object) -> None: ...
    
    def setTokenBoundaries(self, o: object, o2: org.antlr.runtime.Token, o3: org.antlr.runtime.Token) -> None: ...
    
    
class CommonTreeNodeStream(TreeNodeStream, org.antlr.runtime.misc.LookaheadStream):
    DEFAULT_INITIAL_BUFFER_SIZE = 100
    INITIAL_CALL_STACK_SIZE = 10
    UNINITIALIZED_EOF_ELEMENT_INDEX = 2147483647
    eof: object
    
    def LA(self, i: int) -> int: ...
    
    def __init__(self, o: object) -> None: ...
    
    def getSourceName(self) -> str: ...
    
    def getTokenStream(self) -> org.antlr.runtime.TokenStream: ...
    
    def getTreeAdaptor(self) -> TreeAdaptor: ...
    
    def getTreeSource(self) -> object: ...
    
    def nextElement(self) -> object: ...
    
    def pop(self) -> int: ...
    
    def push(self, i: int) -> None: ...
    
    def replaceChildren(self, o: object, i: int, i2: int, o2: object) -> None: ...
    
    def reset(self) -> None: ...
    
    def setTokenStream(self, o: org.antlr.runtime.TokenStream) -> None: ...
    
    def setTreeAdaptor(self, treeAdaptor: TreeAdaptor) -> None: ...
    
    def setUniqueNavigationNodes(self, b: bool) -> None: ...
    
    def toTokenTypeString(self) -> str: ...
    
    
class DOTTreeGenerator:
    _edgeST = ' ->  // "" -> ""\n'
    _nodeST = ' [label=""];\n'
    _treeST = 'digraph {\n\n\tordering=out;\n\tranksep=.4;\n\tbgcolor="lightgrey"; node [shape=box, fixedsize=false, fontsize=12, fontname="Helvetica-bold", fontcolor="blue"\n\t\twidth=.25, height=.25, color="black", fillcolor="white", style="filled, solid, bold"];\n\tedge [arrowsize=.5, color="black", style="bold"]\n\n}\n'
    
    def __init__(self) -> None: ...
    
    def toDOT(self, tree: Tree) -> org.antlr.stringtemplate.StringTemplate: ...
    
    
class ParseTree(BaseTree):
    INVALID_NODE = '<errornode>'
    hiddenTokens: list
    payload: object
    
    def __init__(self, o: object) -> None: ...
    
    def _toStringLeaves(self, j: java.lang.StringBuffer) -> None: ...
    
    def dupNode(self) -> Tree: ...
    
    def getText(self) -> str: ...
    
    def getTokenStartIndex(self) -> int: ...
    
    def getTokenStopIndex(self) -> int: ...
    
    def getType(self) -> int: ...
    
    def setTokenStartIndex(self, i: int) -> None: ...
    
    def setTokenStopIndex(self, i: int) -> None: ...
    
    def toInputString(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringWithHiddenTokens(self) -> str: ...
    
    
class RewriteCardinalityException(java.lang.RuntimeException):
    elementDescription: str
    
    def __init__(self, s: str) -> None: ...
    
    def getMessage(self) -> str: ...
    
    
class RewriteEarlyExitException(RewriteCardinalityException):
    elementDescription: str
    
    def __init__(self) -> None: ...
    
    
class RewriteEmptyStreamException(RewriteCardinalityException):
    elementDescription: str
    
    def __init__(self, s: str) -> None: ...
    
    
class RewriteRuleElementStream:
    def __init__(self, treeAdaptor: TreeAdaptor, s: str) -> None: ...
    
    def add(self, o: object) -> None: ...
    
    def getDescription(self) -> str: ...
    
    def hasNext(self) -> bool: ...
    
    def nextTree(self) -> object: ...
    
    def reset(self) -> None: ...
    
    def size(self) -> int: ...
    
    
class RewriteRuleNodeStream(RewriteRuleElementStream):
    def __init__(self, treeAdaptor: TreeAdaptor, s: str) -> None: ...
    
    def nextNode(self) -> object: ...
    
    
class RewriteRuleSubtreeStream(RewriteRuleElementStream):
    def __init__(self, treeAdaptor: TreeAdaptor, s: str) -> None: ...
    
    def nextNode(self) -> object: ...
    
    
class RewriteRuleTokenStream(RewriteRuleElementStream):
    def __init__(self, treeAdaptor: TreeAdaptor, s: str) -> None: ...
    
    def nextNode(self) -> object: ...
    
    def nextToken(self) -> org.antlr.runtime.Token: ...
    
    
class TreeParser(org.antlr.runtime.BaseRecognizer):
    DEFAULT_TOKEN_CHANNEL = 0
    DOWN = 2
    HIDDEN = 99
    INITIAL_FOLLOW_STACK_SIZE = 100
    MEMO_RULE_FAILED = -2
    MEMO_RULE_UNKNOWN = -1
    NEXT_TOKEN_RULE_NAME = u'nextToken'
    UP = 3
    
    def __init__(self, treeNodeStream: TreeNodeStream) -> None: ...
    
    def getErrorHeader(self, o: org.antlr.runtime.RecognitionException) -> str: ...
    
    def getErrorMessage(self, o: org.antlr.runtime.RecognitionException, t: typing.List[str]) -> str: ...
    
    def getSourceName(self) -> str: ...
    
    def getTreeNodeStream(self) -> TreeNodeStream: ...
    
    def matchAny(self, o: org.antlr.runtime.IntStream) -> None: ...
    
    def reset(self) -> None: ...
    
    def setTreeNodeStream(self, treeNodeStream: TreeNodeStream) -> None: ...
    
    def traceIn(self, s: str, i: int) -> None: ...
    
    def traceOut(self, s: str, i: int) -> None: ...
    
    
class TreeFilter(TreeParser):
    DEFAULT_TOKEN_CHANNEL = 0
    DOWN = 2
    HIDDEN = 99
    INITIAL_FOLLOW_STACK_SIZE = 100
    MEMO_RULE_FAILED = -2
    MEMO_RULE_UNKNOWN = -1
    NEXT_TOKEN_RULE_NAME = u'nextToken'
    UP = 3
    
    def __init__(self, treeNodeStream: TreeNodeStream) -> None: ...
    
    def applyOnce(self, o: object, s: str) -> None: ...
    
    def bottomup(self) -> None: ...
    
    def downup(self, o: object) -> None: ...
    
    def topdown(self) -> None: ...
    
    
    class fptr:
        def __init__(self) -> None: ...
        
        def rule(self) -> None: ...
        
        
    
class TreeIterator(typing.Iterator):
    down: object
    eof: object
    up: object
    
    def __init__(self, o: object) -> None: ...
    
    def hasNext(self) -> bool: ...
    
    def next(self) -> object: ...
    
    def remove(self) -> None: ...
    
    def reset(self) -> None: ...
    
    
class TreePatternLexer:
    ARG = 4
    BEGIN = 1
    COLON = 6
    DOT = 7
    END = 2
    EOF = -1
    ID = 3
    PERCENT = 5
    error: bool
    sval: java.lang.StringBuffer
    
    def __init__(self, s: str) -> None: ...
    
    def nextToken(self) -> int: ...
    
    
class TreePatternParser:
    def __init__(self, treePatternLexer: TreePatternLexer, treeWizard: 'TreeWizard', treeAdaptor: TreeAdaptor) -> None: ...
    
    def parseNode(self) -> object: ...
    
    def parseTree(self) -> object: ...
    
    def pattern(self) -> object: ...
    
    
class TreeRewriter(TreeParser):
    DEFAULT_TOKEN_CHANNEL = 0
    DOWN = 2
    HIDDEN = 99
    INITIAL_FOLLOW_STACK_SIZE = 100
    MEMO_RULE_FAILED = -2
    MEMO_RULE_UNKNOWN = -1
    NEXT_TOKEN_RULE_NAME = u'nextToken'
    UP = 3
    
    def __init__(self, treeNodeStream: TreeNodeStream) -> None: ...
    
    def applyOnce(self, o: object, s: str) -> object: ...
    
    def applyRepeatedly(self, o: object, s: str) -> object: ...
    
    def bottomup(self) -> object: ...
    
    def downup(self, o: object) -> object: ...
    
    def reportTransformation(self, o: object, o2: object) -> None: ...
    
    def topdown(self) -> object: ...
    
    
    class fptr:
        def __init__(self) -> None: ...
        
        def rule(self) -> object: ...
        
        
    
class TreeRuleReturnScope(org.antlr.runtime.RuleReturnScope):
    start: object
    
    def __init__(self) -> None: ...
    
    def getStart(self) -> object: ...
    
    
class TreeVisitor:
    def __init__(self) -> None: ...
    
    def visit(self, o: object, treeVisitorAction: 'TreeVisitorAction') -> object: ...
    
    
class TreeVisitorAction:
    def __init__(self) -> None: ...
    
    def post(self, o: object) -> object: ...
    
    def pre(self, o: object) -> object: ...
    
    
class TreeWizard:
    def __init__(self, t: typing.List[str]) -> None: ...
    
    def computeTokenTypes(self, t: typing.List[str]) -> dict: ...
    
    def create(self, s: str) -> object: ...
    
    def find(self, o: object, i: int) -> list: ...
    
    def findFirst(self, o: object, i: int) -> object: ...
    
    def getTokenType(self, s: str) -> int: ...
    
    def index(self, o: object) -> dict: ...
    
    def parse(self, o: object, s: str) -> bool: ...
    
    def visit(self, o: object, i: int, s: str) -> None: ...
    
    
    class ContextVisitor:
        def __init__(self) -> None: ...
        
        def visit(self, o: object, o2: object, i: int, d: dict) -> None: ...
        
        
    class TreePattern:
        INVALID_NODE = '<errornode>'
        childIndex: int
        hasTextArg: bool
        label: str
        parent: CommonTree
        token: org.antlr.runtime.Token
        
        def __init__(self, o: org.antlr.runtime.Token) -> None: ...
        
        def toString(self) -> str: ...
        
        
    class TreePatternTreeAdaptor:
        def __init__(self) -> None: ...
        
        def create(self, o: org.antlr.runtime.Token) -> object: ...
        
        
    class Visitor:
        def __init__(self) -> None: ...
        
        def visit(self, o: object) -> None: ...
        
        
    class WildcardTreePattern:
        INVALID_NODE = '<errornode>'
        childIndex: int
        hasTextArg: bool
        label: str
        parent: CommonTree
        token: org.antlr.runtime.Token
        
        def __init__(self, o: org.antlr.runtime.Token) -> None: ...
        
        
    
