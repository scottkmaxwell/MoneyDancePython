import typing
import java.lang
import java.time
import java.util
import java.util.concurrent

T = typing.TypeVar("T")


class Wrapper:
    def __init__(self) -> None: ...
    
    def isWrapperFor(self, t: typing.Any) -> bool: ...
    
    def unwrap(self, t: typing.Any) -> 'T': ...
    
    
class Connection(Wrapper, java.lang.AutoCloseable):
    TRANSACTION_NONE = 0
    TRANSACTION_READ_COMMITTED = 2
    TRANSACTION_READ_UNCOMMITTED = 1
    TRANSACTION_REPEATABLE_READ = 4
    TRANSACTION_SERIALIZABLE = 8
    
    def __init__(self) -> None: ...
    
    def abort(self, j: java.util.concurrent.Executor) -> None: ...
    
    def beginRequest(self) -> None: ...
    
    def clearWarnings(self) -> None: ...
    
    def close(self) -> None: ...
    
    def commit(self) -> None: ...
    
    def createArrayOf(self, s: str, t: typing.List[object]) -> 'Array': ...
    
    def createBlob(self) -> 'Blob': ...
    
    def createClob(self) -> 'Clob': ...
    
    def createNClob(self) -> 'NClob': ...
    
    def createSQLXML(self) -> 'SQLXML': ...
    
    def createStatement(self) -> 'Statement': ...
    
    def createStruct(self, s: str, t: typing.List[object]) -> 'Struct': ...
    
    def endRequest(self) -> None: ...
    
    def getAutoCommit(self) -> bool: ...
    
    def getCatalog(self) -> str: ...
    
    def getClientInfo(self) -> java.util.Properties: ...
    
    def getHoldability(self) -> int: ...
    
    def getMetaData(self) -> 'DatabaseMetaData': ...
    
    def getNetworkTimeout(self) -> int: ...
    
    def getSchema(self) -> str: ...
    
    def getTransactionIsolation(self) -> int: ...
    
    def getTypeMap(self) -> typing.Dict[str,typing.Any]: ...
    
    def getWarnings(self) -> 'SQLWarning': ...
    
    def isClosed(self) -> bool: ...
    
    def isReadOnly(self) -> bool: ...
    
    def isValid(self, i: int) -> bool: ...
    
    def nativeSQL(self, s: str) -> str: ...
    
    def prepareCall(self, s: str) -> 'CallableStatement': ...
    
    def prepareStatement(self, s: str) -> 'PreparedStatement': ...
    
    def releaseSavepoint(self, savepoint: 'Savepoint') -> None: ...
    
    def rollback(self) -> None: ...
    
    def setAutoCommit(self, b: bool) -> None: ...
    
    def setCatalog(self, s: str) -> None: ...
    
    def setClientInfo(self, j: java.util.Properties) -> None: ...
    
    def setHoldability(self, i: int) -> None: ...
    
    def setNetworkTimeout(self, j: java.util.concurrent.Executor, i: int) -> None: ...
    
    def setReadOnly(self, b: bool) -> None: ...
    
    def setSavepoint(self) -> 'Savepoint': ...
    
    def setSchema(self, s: str) -> None: ...
    
    def setShardingKey(self, shardingKey: 'ShardingKey') -> None: ...
    
    def setShardingKeyIfValid(self, shardingKey: 'ShardingKey', i: int) -> bool: ...
    
    def setTransactionIsolation(self, i: int) -> None: ...
    
    def setTypeMap(self, t: typing.Dict[str,typing.Any]) -> None: ...
    
    
class Date(java.util.Date):
    def __init__(self, i: int) -> None: ...
    
    def getHours(self) -> int: ...
    
    def getMinutes(self) -> int: ...
    
    def getSeconds(self) -> int: ...
    
    def setHours(self, i: int) -> None: ...
    
    def setMinutes(self, i: int) -> None: ...
    
    def setSeconds(self, i: int) -> None: ...
    
    def setTime(self, i: int) -> None: ...
    
    def toInstant(self) -> java.time.Instant: ...
    
    def toLocalDate(self) -> java.time.LocalDate: ...
    
    def toString(self) -> str: ...
    
    @staticmethod
    def valueOf(s: str) -> 'Date': ...
    
    
class Time(java.util.Date):
    def __init__(self, i: int) -> None: ...
    
    def getDate(self) -> int: ...
    
    def getDay(self) -> int: ...
    
    def getMonth(self) -> int: ...
    
    def getYear(self) -> int: ...
    
    def setDate(self, i: int) -> None: ...
    
    def setMonth(self, i: int) -> None: ...
    
    def setTime(self, i: int) -> None: ...
    
    def setYear(self, i: int) -> None: ...
    
    def toInstant(self) -> java.time.Instant: ...
    
    def toLocalTime(self) -> java.time.LocalTime: ...
    
    def toString(self) -> str: ...
    
    @staticmethod
    def valueOf(s: str) -> 'Time': ...
    
    
class Timestamp(java.util.Date):
    def __init__(self, i: int) -> None: ...
    
    def after(self, timestamp: 'Timestamp') -> bool: ...
    
    def before(self, timestamp: 'Timestamp') -> bool: ...
    
    def compareTo(self, timestamp: 'Timestamp') -> int: ...
    
    def equals(self, timestamp: 'Timestamp') -> bool: ...
    
    @staticmethod
    def from(j: java.time.Instant) -> 'Timestamp': ...
    
    def getNanos(self) -> int: ...
    
    def getTime(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def setNanos(self, i: int) -> None: ...
    
    def setTime(self, i: int) -> None: ...
    
    def toInstant(self) -> java.time.Instant: ...
    
    def toLocalDateTime(self) -> java.time.LocalDateTime: ...
    
    def toString(self) -> str: ...
    
    @staticmethod
    def valueOf(s: str) -> 'Timestamp': ...
    
    
