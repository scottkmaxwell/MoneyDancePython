import typing
import java.io
import java.lang

R = typing.TypeVar("R")


class Instant('temporal.Temporal', 'temporal.TemporalAdjuster', java.lang.Comparable, java.io.Serializable):
    EPOCH = '1970-01-01T00:00:00Z'
    MAX = '+1000000000-12-31T23:59:59.999999999Z'
    MIN = '-1000000000-01-01T00:00:00Z'
    
    def __init__(self) -> None: ...
    
    def adjustInto(self, t: 'temporal.Temporal') -> 'temporal.Temporal': ...
    
    def atOffset(self, zoneOffset: 'ZoneOffset') -> 'OffsetDateTime': ...
    
    def atZone(self, zoneId: 'ZoneId') -> 'ZonedDateTime': ...
    
    def compareTo(self, instant: 'Instant') -> int: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def from(t: 'temporal.TemporalAccessor') -> 'Instant': ...
    
    def get(self, t: 'temporal.TemporalField') -> int: ...
    
    def getEpochSecond(self) -> int: ...
    
    def getLong(self, t: 'temporal.TemporalField') -> int: ...
    
    def getNano(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def isAfter(self, instant: 'Instant') -> bool: ...
    
    def isBefore(self, instant: 'Instant') -> bool: ...
    
    def isSupported(self, t: 'temporal.TemporalField') -> bool: ...
    
    def minus(self, t: 'temporal.TemporalAmount') -> 'Instant': ...
    
    def minusMillis(self, i: int) -> 'Instant': ...
    
    def minusNanos(self, i: int) -> 'Instant': ...
    
    def minusSeconds(self, i: int) -> 'Instant': ...
    
    @staticmethod
    def now() -> 'Instant': ...
    
    @staticmethod
    def ofEpochMilli(i: int) -> 'Instant': ...
    
    @staticmethod
    def ofEpochSecond(i: int) -> 'Instant': ...
    
    @staticmethod
    def parse(j: java.lang.CharSequence) -> 'Instant': ...
    
    def plus(self, t: 'temporal.TemporalAmount') -> 'Instant': ...
    
    def plusMillis(self, i: int) -> 'Instant': ...
    
    def plusNanos(self, i: int) -> 'Instant': ...
    
    def plusSeconds(self, i: int) -> 'Instant': ...
    
    def query(self, t: typing.Any) -> 'R': ...
    
    def range(self, t: 'temporal.TemporalField') -> 'temporal.ValueRange': ...
    
    def toEpochMilli(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def truncatedTo(self, t: 'temporal.TemporalUnit') -> 'Instant': ...
    
    def until(self, t: 'temporal.Temporal', t2: 'temporal.TemporalUnit') -> int: ...
    
    def with(self, t: 'temporal.TemporalAdjuster') -> 'Instant': ...
    
    
class LocalDate('temporal.Temporal', 'temporal.TemporalAdjuster', 'chrono.ChronoLocalDate', java.io.Serializable):
    EPOCH = '1970-01-01'
    MAX = '+999999999-12-31'
    MIN = '-999999999-01-01'
    
    def __init__(self) -> None: ...
    
    def adjustInto(self, t: 'temporal.Temporal') -> 'temporal.Temporal': ...
    
    def atStartOfDay(self) -> 'LocalDateTime': ...
    
    def atTime(self, localTime: 'LocalTime') -> 'chrono.ChronoLocalDateTime': ...
    
    def compareTo(self, c: 'chrono.ChronoLocalDate') -> int: ...
    
    def datesUntil(self, localDate: 'LocalDate') -> typing.Any: ...
    
    def equals(self, o: object) -> bool: ...
    
    def format(self, f: 'format.DateTimeFormatter') -> str: ...
    
    @staticmethod
    def from(t: 'temporal.TemporalAccessor') -> 'LocalDate': ...
    
    def get(self, t: 'temporal.TemporalField') -> int: ...
    
    def getChronology(self) -> 'chrono.Chronology': ...
    
    def getDayOfMonth(self) -> int: ...
    
    def getDayOfWeek(self) -> 'DayOfWeek': ...
    
    def getDayOfYear(self) -> int: ...
    
    def getEra(self) -> 'chrono.Era': ...
    
    def getLong(self, t: 'temporal.TemporalField') -> int: ...
    
    def getMonth(self) -> 'Month': ...
    
    def getMonthValue(self) -> int: ...
    
    def getYear(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def isAfter(self, c: 'chrono.ChronoLocalDate') -> bool: ...
    
    def isBefore(self, c: 'chrono.ChronoLocalDate') -> bool: ...
    
    def isEqual(self, c: 'chrono.ChronoLocalDate') -> bool: ...
    
    def isLeapYear(self) -> bool: ...
    
    def isSupported(self, t: 'temporal.TemporalField') -> bool: ...
    
    def lengthOfMonth(self) -> int: ...
    
    def lengthOfYear(self) -> int: ...
    
    def minus(self, t: 'temporal.TemporalAmount') -> 'chrono.ChronoLocalDate': ...
    
    def minusDays(self, i: int) -> 'LocalDate': ...
    
    def minusMonths(self, i: int) -> 'LocalDate': ...
    
    def minusWeeks(self, i: int) -> 'LocalDate': ...
    
    def minusYears(self, i: int) -> 'LocalDate': ...
    
    @staticmethod
    def now() -> 'LocalDate': ...
    
    @staticmethod
    def of(i: int, i2: int, i3: int) -> 'LocalDate': ...
    
    @staticmethod
    def ofEpochDay(i: int) -> 'LocalDate': ...
    
    @staticmethod
    def ofInstant(instant: Instant, zoneId: 'ZoneId') -> 'LocalDate': ...
    
    @staticmethod
    def ofYearDay(i: int, i2: int) -> 'LocalDate': ...
    
    @staticmethod
    def parse(j: java.lang.CharSequence) -> 'LocalDate': ...
    
    def plus(self, t: 'temporal.TemporalAmount') -> 'LocalDate': ...
    
    def plusDays(self, i: int) -> 'LocalDate': ...
    
    def plusMonths(self, i: int) -> 'LocalDate': ...
    
    def plusWeeks(self, i: int) -> 'LocalDate': ...
    
    def plusYears(self, i: int) -> 'LocalDate': ...
    
    def query(self, t: typing.Any) -> 'R': ...
    
    def range(self, t: 'temporal.TemporalField') -> 'temporal.ValueRange': ...
    
    def toEpochDay(self) -> int: ...
    
    def toEpochSecond(self, localTime: 'LocalTime', zoneOffset: 'ZoneOffset') -> int: ...
    
    def toString(self) -> str: ...
    
    def until(self, c: 'chrono.ChronoLocalDate') -> 'Period': ...
    
    def with(self, t: 'temporal.TemporalAdjuster') -> 'temporal.Temporal': ...
    
    def withDayOfMonth(self, i: int) -> 'LocalDate': ...
    
    def withDayOfYear(self, i: int) -> 'LocalDate': ...
    
    def withMonth(self, i: int) -> 'LocalDate': ...
    
    def withYear(self, i: int) -> 'LocalDate': ...
    
    
class Period('chrono.ChronoPeriod', java.io.Serializable):
    ZERO = 'P0D'
    
    def __init__(self) -> None: ...
    
    def addTo(self, t: 'temporal.Temporal') -> 'temporal.Temporal': ...
    
    @staticmethod
    def between(localDate: LocalDate, localDate2: LocalDate) -> 'Period': ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def from(t: 'temporal.TemporalAmount') -> 'Period': ...
    
    def get(self, t: 'temporal.TemporalUnit') -> int: ...
    
    def getChronology(self) -> 'chrono.Chronology': ...
    
    def getDays(self) -> int: ...
    
    def getMonths(self) -> int: ...
    
    def getUnits(self) -> typing.List['temporal.TemporalUnit']: ...
    
    def getYears(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def isNegative(self) -> bool: ...
    
    def isZero(self) -> bool: ...
    
    def minus(self, t: 'temporal.TemporalAmount') -> 'Period': ...
    
    def minusDays(self, i: int) -> 'Period': ...
    
    def minusMonths(self, i: int) -> 'Period': ...
    
    def minusYears(self, i: int) -> 'Period': ...
    
    def multipliedBy(self, i: int) -> 'chrono.ChronoPeriod': ...
    
    def negated(self) -> 'chrono.ChronoPeriod': ...
    
    def normalized(self) -> 'chrono.ChronoPeriod': ...
    
    @staticmethod
    def of(i: int, i2: int, i3: int) -> 'Period': ...
    
    @staticmethod
    def ofDays(i: int) -> 'Period': ...
    
    @staticmethod
    def ofMonths(i: int) -> 'Period': ...
    
    @staticmethod
    def ofWeeks(i: int) -> 'Period': ...
    
    @staticmethod
    def ofYears(i: int) -> 'Period': ...
    
    @staticmethod
    def parse(j: java.lang.CharSequence) -> 'Period': ...
    
    def plus(self, t: 'temporal.TemporalAmount') -> 'Period': ...
    
    def plusDays(self, i: int) -> 'Period': ...
    
    def plusMonths(self, i: int) -> 'Period': ...
    
    def plusYears(self, i: int) -> 'Period': ...
    
    def subtractFrom(self, t: 'temporal.Temporal') -> 'temporal.Temporal': ...
    
    def toString(self) -> str: ...
    
    def toTotalMonths(self) -> int: ...
    
    def withDays(self, i: int) -> 'Period': ...
    
    def withMonths(self, i: int) -> 'Period': ...
    
    def withYears(self, i: int) -> 'Period': ...
    
    
