import typing
import java.lang
import java.net
import java.nio.file


class Serializable:
    def __init__(self) -> None: ...
    
    
class File(Serializable, java.lang.Comparable):
    pathSeparator = u':'
    pathSeparatorChar = ':'
    separator = u'/'
    separatorChar = '/'
    
    def __init__(self, s: str) -> None: ...
    
    def canExecute(self) -> bool: ...
    
    def canRead(self) -> bool: ...
    
    def canWrite(self) -> bool: ...
    
    def compareTo(self, file: 'File') -> int: ...
    
    def createNewFile(self) -> bool: ...
    
    @staticmethod
    def createTempFile(s: str, s2: str) -> 'File': ...
    
    def delete(self) -> bool: ...
    
    def deleteOnExit(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def exists(self) -> bool: ...
    
    def getAbsoluteFile(self) -> 'File': ...
    
    def getAbsolutePath(self) -> str: ...
    
    def getCanonicalFile(self) -> 'File': ...
    
    def getCanonicalPath(self) -> str: ...
    
    def getFreeSpace(self) -> int: ...
    
    def getName(self) -> str: ...
    
    def getParent(self) -> str: ...
    
    def getParentFile(self) -> 'File': ...
    
    def getPath(self) -> str: ...
    
    def getTotalSpace(self) -> int: ...
    
    def getUsableSpace(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def isAbsolute(self) -> bool: ...
    
    def isDirectory(self) -> bool: ...
    
    def isFile(self) -> bool: ...
    
    def isHidden(self) -> bool: ...
    
    def lastModified(self) -> int: ...
    
    def length(self) -> int: ...
    
    def list(self) -> typing.List[str]: ...
    
    def listFiles(self) -> typing.List['File']: ...
    
    @staticmethod
    def listRoots() -> typing.List['File']: ...
    
    def mkdir(self) -> bool: ...
    
    def mkdirs(self) -> bool: ...
    
    def renameTo(self, file: 'File') -> bool: ...
    
    def setExecutable(self, b: bool) -> bool: ...
    
    def setLastModified(self, i: int) -> bool: ...
    
    def setReadOnly(self) -> bool: ...
    
    def setReadable(self, b: bool) -> bool: ...
    
    def setWritable(self, b: bool) -> bool: ...
    
    def toPath(self) -> java.nio.file.Path: ...
    
    def toString(self) -> str: ...
    
    def toURI(self) -> java.net.URI: ...
    
    def toURL(self) -> java.net.URL: ...
    
    
class IOException(Exception):
    def __init__(self) -> None: ...
    
    
class FileNotFoundException(IOException):
    def __init__(self) -> None: ...
    
    
class FilenameFilter:
    def __init__(self) -> None: ...
    
    def accept(self, file: File, s: str) -> bool: ...
    
    
