import typing
import java.lang.annotation

T = typing.TypeVar("T")


class AnnotatedElement:
    def __init__(self) -> None: ...
    
    def getAnnotation(self, t: typing.Any) -> 'T': ...
    
    def getAnnotations(self) -> typing.List[java.lang.annotation.Annotation]: ...
    
    def getAnnotationsByType(self, t: typing.Any) -> typing.List['T']: ...
    
    def getDeclaredAnnotation(self, t: typing.Any) -> 'T': ...
    
    def getDeclaredAnnotations(self) -> typing.List[java.lang.annotation.Annotation]: ...
    
    def getDeclaredAnnotationsByType(self, t: typing.Any) -> typing.List['T']: ...
    
    def isAnnotationPresent(self, t: typing.Any) -> bool: ...
    
    
class AccessibleObject(AnnotatedElement):
    def __init__(self) -> None: ...
    
    def canAccess(self, o: object) -> bool: ...
    
    def getAnnotation(self, t: typing.Any) -> 'T': ...
    
    def getAnnotations(self) -> typing.List[java.lang.annotation.Annotation]: ...
    
    def getAnnotationsByType(self, t: typing.Any) -> typing.List['T']: ...
    
    def getDeclaredAnnotation(self, t: typing.Any) -> 'T': ...
    
    def getDeclaredAnnotations(self) -> typing.List[java.lang.annotation.Annotation]: ...
    
    def getDeclaredAnnotationsByType(self, t: typing.Any) -> typing.List['T']: ...
    
    def isAccessible(self) -> bool: ...
    
    def isAnnotationPresent(self, t: typing.Any) -> bool: ...
    
    def setAccessible(self, b: bool) -> None: ...
    
    def trySetAccessible(self) -> bool: ...
    
    
class Member:
    DECLARED = 1
    PUBLIC = 0
    
    def __init__(self) -> None: ...
    
    def getDeclaringClass(self) -> typing.Any: ...
    
    def getModifiers(self) -> int: ...
    
    def getName(self) -> str: ...
    
    def isSynthetic(self) -> bool: ...
    
    
class Field(AccessibleObject, Member):
    DECLARED = 1
    PUBLIC = 0
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def get(self, o: object) -> object: ...
    
    def getAnnotatedType(self) -> 'AnnotatedType': ...
    
    def getAnnotation(self, t: typing.Any) -> 'T': ...
    
    def getAnnotationsByType(self, t: typing.Any) -> typing.List['T']: ...
    
    def getBoolean(self, o: object) -> bool: ...
    
    def getByte(self, o: object) -> int: ...
    
    def getChar(self, o: object) -> str: ...
    
    def getDeclaredAnnotations(self) -> typing.List[java.lang.annotation.Annotation]: ...
    
    def getDeclaringClass(self) -> typing.Any: ...
    
    def getDouble(self, o: object) -> float: ...
    
    def getFloat(self, o: object) -> float: ...
    
    def getGenericType(self) -> 'Type': ...
    
    def getInt(self, o: object) -> int: ...
    
    def getLong(self, o: object) -> int: ...
    
    def getModifiers(self) -> int: ...
    
    def getName(self) -> str: ...
    
    def getShort(self, o: object) -> int: ...
    
    def getType(self) -> typing.Any: ...
    
    def hashCode(self) -> int: ...
    
    def isEnumConstant(self) -> bool: ...
    
    def isSynthetic(self) -> bool: ...
    
    def set(self, o: object, o2: object) -> None: ...
    
    def setAccessible(self, b: bool) -> None: ...
    
    def setBoolean(self, o: object, b: bool) -> None: ...
    
    def setByte(self, o: object, i: int) -> None: ...
    
    def setChar(self, o: object, s: str) -> None: ...
    
    def setDouble(self, o: object, f: float) -> None: ...
    
    def setFloat(self, o: object, f: float) -> None: ...
    
    def setInt(self, o: object, i: int) -> None: ...
    
    def setLong(self, o: object, i: int) -> None: ...
    
    def setShort(self, o: object, i: int) -> None: ...
    
    def toGenericString(self) -> str: ...
    
    def toString(self) -> str: ...
    
    
class Type:
    def __init__(self) -> None: ...
    
    def getTypeName(self) -> str: ...
    
    
