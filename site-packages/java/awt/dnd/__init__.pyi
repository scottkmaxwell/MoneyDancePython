import typing
import java.awt
import java.awt.datatransfer
import java.io
import java.util


class DropTargetListener(java.util.EventListener):
    def __init__(self) -> None: ...
    
    def dragEnter(self, dropTargetDragEvent: 'DropTargetDragEvent') -> None: ...
    
    def dragExit(self, dropTargetEvent: 'DropTargetEvent') -> None: ...
    
    def dragOver(self, dropTargetDragEvent: 'DropTargetDragEvent') -> None: ...
    
    def drop(self, dropTargetDropEvent: 'DropTargetDropEvent') -> None: ...
    
    def dropActionChanged(self, dropTargetDragEvent: 'DropTargetDragEvent') -> None: ...
    
    
class DropTarget(DropTargetListener, java.io.Serializable):
    pass
    
class DropTargetEvent(java.util.EventObject):
    def __init__(self, dropTargetContext: 'DropTargetContext') -> None: ...
    
    def getDropTargetContext(self) -> 'DropTargetContext': ...
    
    
class DropTargetDragEvent(DropTargetEvent):
    def __init__(self, dropTargetContext: 'DropTargetContext', j: java.awt.Point, i: int, i2: int) -> None: ...
    
    def acceptDrag(self, i: int) -> None: ...
    
    def getCurrentDataFlavors(self) -> typing.List[java.awt.datatransfer.DataFlavor]: ...
    
    def getCurrentDataFlavorsAsList(self) -> typing.List[java.awt.datatransfer.DataFlavor]: ...
    
    def getDropAction(self) -> int: ...
    
    def getLocation(self) -> java.awt.Point: ...
    
    def getSourceActions(self) -> int: ...
    
    def getTransferable(self) -> java.awt.datatransfer.Transferable: ...
    
    def isDataFlavorSupported(self, j: java.awt.datatransfer.DataFlavor) -> bool: ...
    
    def rejectDrag(self) -> None: ...
    
    
class DropTargetDropEvent(DropTargetEvent):
    def __init__(self, dropTargetContext: 'DropTargetContext', j: java.awt.Point, i: int, i2: int) -> None: ...
    
    def acceptDrop(self, i: int) -> None: ...
    
    def dropComplete(self, b: bool) -> None: ...
    
    def getCurrentDataFlavors(self) -> typing.List[java.awt.datatransfer.DataFlavor]: ...
    
    def getCurrentDataFlavorsAsList(self) -> typing.List[java.awt.datatransfer.DataFlavor]: ...
    
    def getDropAction(self) -> int: ...
    
    def getLocation(self) -> java.awt.Point: ...
    
    def getSourceActions(self) -> int: ...
    
    def getTransferable(self) -> java.awt.datatransfer.Transferable: ...
    
    def isDataFlavorSupported(self, j: java.awt.datatransfer.DataFlavor) -> bool: ...
    
    def isLocalTransfer(self) -> bool: ...
    
    def rejectDrop(self) -> None: ...
    
    
