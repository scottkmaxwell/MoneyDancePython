import typing
import java.awt
import java.awt.geom
import java.lang


class FontRenderContext:
    def __init__(self, j: java.awt.geom.AffineTransform, b: bool, b2: bool) -> None: ...
    
    def equals(self, fontRenderContext: 'FontRenderContext') -> bool: ...
    
    def getAntiAliasingHint(self) -> object: ...
    
    def getFractionalMetricsHint(self) -> object: ...
    
    def getTransform(self) -> java.awt.geom.AffineTransform: ...
    
    def getTransformType(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def isAntiAliased(self) -> bool: ...
    
    def isTransformed(self) -> bool: ...
    
    def usesFractionalMetrics(self) -> bool: ...
    
    
class GlyphVector(java.lang.Cloneable):
    FLAG_COMPLEX_GLYPHS = 8
    FLAG_HAS_POSITION_ADJUSTMENTS = 2
    FLAG_HAS_TRANSFORMS = 1
    FLAG_MASK = 15
    FLAG_RUN_RTL = 4
    
    def __init__(self) -> None: ...
    
    def equals(self, glyphVector: 'GlyphVector') -> bool: ...
    
    def getFont(self) -> java.awt.Font: ...
    
    def getFontRenderContext(self) -> FontRenderContext: ...
    
    def getGlyphCharIndex(self, i: int) -> int: ...
    
    def getGlyphCharIndices(self, i: int, i2: int, t: typing.List[int]) -> typing.List[int]: ...
    
    def getGlyphCode(self, i: int) -> int: ...
    
    def getGlyphCodes(self, i: int, i2: int, t: typing.List[int]) -> typing.List[int]: ...
    
    def getGlyphJustificationInfo(self, i: int) -> 'GlyphJustificationInfo': ...
    
    def getGlyphLogicalBounds(self, i: int) -> java.awt.Shape: ...
    
    def getGlyphMetrics(self, i: int) -> 'GlyphMetrics': ...
    
    def getGlyphOutline(self, i: int) -> java.awt.Shape: ...
    
    def getGlyphPixelBounds(self, i: int, fontRenderContext: FontRenderContext, f: float, f2: float) -> java.awt.Rectangle: ...
    
    def getGlyphPosition(self, i: int) -> java.awt.geom.Point2D: ...
    
    def getGlyphPositions(self, i: int, i2: int, t: typing.List[float]) -> typing.List[float]: ...
    
    def getGlyphTransform(self, i: int) -> java.awt.geom.AffineTransform: ...
    
    def getGlyphVisualBounds(self, i: int) -> java.awt.Shape: ...
    
    def getLayoutFlags(self) -> int: ...
    
    def getLogicalBounds(self) -> java.awt.geom.Rectangle2D: ...
    
    def getNumGlyphs(self) -> int: ...
    
    def getOutline(self) -> java.awt.Shape: ...
    
    def getPixelBounds(self, fontRenderContext: FontRenderContext, f: float, f2: float) -> java.awt.Rectangle: ...
    
    def getVisualBounds(self) -> java.awt.geom.Rectangle2D: ...
    
    def performDefaultLayout(self) -> None: ...
    
    def setGlyphPosition(self, i: int, j: java.awt.geom.Point2D) -> None: ...
    
    def setGlyphTransform(self, i: int, j: java.awt.geom.AffineTransform) -> None: ...
    
    
class LineMetrics:
    def __init__(self) -> None: ...
    
    def getAscent(self) -> float: ...
    
    def getBaselineIndex(self) -> int: ...
    
    def getBaselineOffsets(self) -> typing.List[float]: ...
    
    def getDescent(self) -> float: ...
    
    def getHeight(self) -> float: ...
    
    def getLeading(self) -> float: ...
    
    def getNumChars(self) -> int: ...
    
    def getStrikethroughOffset(self) -> float: ...
    
    def getStrikethroughThickness(self) -> float: ...
    
    def getUnderlineOffset(self) -> float: ...
    
    def getUnderlineThickness(self) -> float: ...
    
    
class TextAttribute(str):
    BACKGROUND = 'java.awt.font.TextAttribute(background)'
    BIDI_EMBEDDING = 'java.awt.font.TextAttribute(bidi_embedding)'
    CHAR_REPLACEMENT = 'java.awt.font.TextAttribute(char_replacement)'
    FAMILY = 'java.awt.font.TextAttribute(family)'
    FONT = 'java.awt.font.TextAttribute(font)'
    FOREGROUND = 'java.awt.font.TextAttribute(foreground)'
    INPUT_METHOD_HIGHLIGHT = 'java.awt.font.TextAttribute(input method highlight)'
    INPUT_METHOD_SEGMENT = 'java.text.AttributedCharacterIterator$Attribute(input_method_segment)'
    INPUT_METHOD_UNDERLINE = 'java.awt.font.TextAttribute(input method underline)'
    JUSTIFICATION = 'java.awt.font.TextAttribute(justification)'
    JUSTIFICATION_FULL = 1.0
    JUSTIFICATION_NONE = 0.0
    KERNING = 'java.awt.font.TextAttribute(kerning)'
    KERNING_ON = 1
    LANGUAGE = 'java.text.AttributedCharacterIterator$Attribute(language)'
    LIGATURES = 'java.awt.font.TextAttribute(ligatures)'
    LIGATURES_ON = 1
    NUMERIC_SHAPING = 'java.awt.font.TextAttribute(numeric_shaping)'
    POSTURE = 'java.awt.font.TextAttribute(posture)'
    POSTURE_OBLIQUE = 0.20000000298023224
    POSTURE_REGULAR = 0.0
    READING = 'java.text.AttributedCharacterIterator$Attribute(reading)'
    RUN_DIRECTION = 'java.awt.font.TextAttribute(run_direction)'
    RUN_DIRECTION_LTR = False
    RUN_DIRECTION_RTL = True
    SIZE = 'java.awt.font.TextAttribute(size)'
    STRIKETHROUGH = 'java.awt.font.TextAttribute(strikethrough)'
    STRIKETHROUGH_ON = True
    SUPERSCRIPT = 'java.awt.font.TextAttribute(superscript)'
    SUPERSCRIPT_SUB = -1
    SUPERSCRIPT_SUPER = 1
    SWAP_COLORS = 'java.awt.font.TextAttribute(swap_colors)'
    SWAP_COLORS_ON = True
    TRACKING = 'java.awt.font.TextAttribute(tracking)'
    TRACKING_LOOSE = 0.03999999910593033
    TRACKING_TIGHT = -0.03999999910593033
    TRANSFORM = 'java.awt.font.TextAttribute(transform)'
    UNDERLINE = 'java.awt.font.TextAttribute(underline)'
    UNDERLINE_LOW_DASHED = 5
    UNDERLINE_LOW_DOTTED = 3
    UNDERLINE_LOW_GRAY = 4
    UNDERLINE_LOW_ONE_PIXEL = 1
    UNDERLINE_LOW_TWO_PIXEL = 2
    UNDERLINE_ON = 0
    WEIGHT = 'java.awt.font.TextAttribute(weight)'
    WEIGHT_BOLD = 2.0
    WEIGHT_DEMIBOLD = 1.75
    WEIGHT_DEMILIGHT = 0.875
    WEIGHT_EXTRABOLD = 2.5
    WEIGHT_EXTRA_LIGHT = 0.5
    WEIGHT_HEAVY = 2.25
    WEIGHT_LIGHT = 0.75
    WEIGHT_MEDIUM = 1.5
    WEIGHT_REGULAR = 1.0
    WEIGHT_SEMIBOLD = 1.25
    WEIGHT_ULTRABOLD = 2.75
    WIDTH = 'java.awt.font.TextAttribute(width)'
    WIDTH_CONDENSED = 0.75
    WIDTH_EXTENDED = 1.5
    WIDTH_REGULAR = 1.0
    WIDTH_SEMI_CONDENSED = 0.875
    WIDTH_SEMI_EXTENDED = 1.25
    
    def __init__(self) -> None: ...
    
    
