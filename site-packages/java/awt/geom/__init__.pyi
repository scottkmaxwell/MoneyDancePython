import typing
import java.awt
import java.io
import java.lang


class AffineTransform(java.lang.Cloneable, java.io.Serializable):
    TYPE_FLIP = 64
    TYPE_GENERAL_ROTATION = 16
    TYPE_GENERAL_SCALE = 4
    TYPE_GENERAL_TRANSFORM = 32
    TYPE_IDENTITY = 0
    TYPE_MASK_ROTATION = 24
    TYPE_MASK_SCALE = 6
    TYPE_QUADRANT_ROTATION = 8
    TYPE_TRANSLATION = 1
    TYPE_UNIFORM_SCALE = 2
    
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def concatenate(self, affineTransform: 'AffineTransform') -> None: ...
    
    def createInverse(self) -> 'AffineTransform': ...
    
    def createTransformedShape(self, j: java.awt.Shape) -> java.awt.Shape: ...
    
    def deltaTransform(self, point2D: 'Point2D', point2D2: 'Point2D') -> 'Point2D': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDeterminant(self) -> float: ...
    
    def getMatrix(self, t: typing.List[float]) -> None: ...
    
    @staticmethod
    def getQuadrantRotateInstance(i: int) -> 'AffineTransform': ...
    
    @staticmethod
    def getRotateInstance(f: float) -> 'AffineTransform': ...
    
    @staticmethod
    def getScaleInstance(f: float, f2: float) -> 'AffineTransform': ...
    
    def getScaleX(self) -> float: ...
    
    def getScaleY(self) -> float: ...
    
    @staticmethod
    def getShearInstance(f: float, f2: float) -> 'AffineTransform': ...
    
    def getShearX(self) -> float: ...
    
    def getShearY(self) -> float: ...
    
    @staticmethod
    def getTranslateInstance(f: float, f2: float) -> 'AffineTransform': ...
    
    def getTranslateX(self) -> float: ...
    
    def getTranslateY(self) -> float: ...
    
    def getType(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def inverseTransform(self, point2D: 'Point2D', point2D2: 'Point2D') -> 'Point2D': ...
    
    def invert(self) -> None: ...
    
    def isIdentity(self) -> bool: ...
    
    def preConcatenate(self, affineTransform: 'AffineTransform') -> None: ...
    
    def quadrantRotate(self, i: int) -> None: ...
    
    def rotate(self, f: float) -> None: ...
    
    def scale(self, f: float, f2: float) -> None: ...
    
    def setToIdentity(self) -> None: ...
    
    def setToQuadrantRotation(self, i: int) -> None: ...
    
    def setToRotation(self, f: float) -> None: ...
    
    def setToScale(self, f: float, f2: float) -> None: ...
    
    def setToShear(self, f: float, f2: float) -> None: ...
    
    def setToTranslation(self, f: float, f2: float) -> None: ...
    
    def setTransform(self, affineTransform: 'AffineTransform') -> None: ...
    
    def shear(self, f: float, f2: float) -> None: ...
    
    def toString(self) -> str: ...
    
    def transform(self, point2D: 'Point2D', point2D2: 'Point2D') -> 'Point2D': ...
    
    def translate(self, f: float, f2: float) -> None: ...
    
    
class Dimension2D(java.lang.Cloneable):
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def getHeight(self) -> float: ...
    
    def getWidth(self) -> float: ...
    
    def setSize(self, dimension2D: 'Dimension2D') -> None: ...
    
    
class Point2D(java.lang.Cloneable):
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def distance(self, point2D: 'Point2D') -> float: ...
    
    def distanceSq(self, point2D: 'Point2D') -> float: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getX(self) -> float: ...
    
    def getY(self) -> float: ...
    
    def hashCode(self) -> int: ...
    
    def setLocation(self, point2D: 'Point2D') -> None: ...
    
    
    class Double:
        x: float
        y: float
        
        def __init__(self) -> None: ...
        
        def getX(self) -> float: ...
        
        def getY(self) -> float: ...
        
        def toString(self) -> str: ...
        
        
    class Float:
        x: float
        y: float
        
        def __init__(self) -> None: ...
        
        def getX(self) -> float: ...
        
        def getY(self) -> float: ...
        
        def toString(self) -> str: ...
        
        
    
class RectangularShape(java.awt.Shape, java.lang.Cloneable):
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def contains(self, point2D: Point2D) -> bool: ...
    
    def getBounds(self) -> java.awt.Rectangle: ...
    
    def getCenterX(self) -> float: ...
    
    def getCenterY(self) -> float: ...
    
    def getFrame(self) -> 'Rectangle2D': ...
    
    def getHeight(self) -> float: ...
    
    def getMaxX(self) -> float: ...
    
    def getMaxY(self) -> float: ...
    
    def getMinX(self) -> float: ...
    
    def getMinY(self) -> float: ...
    
    def getWidth(self) -> float: ...
    
    def getX(self) -> float: ...
    
    def getY(self) -> float: ...
    
    def intersects(self, rectangle2D: 'Rectangle2D') -> bool: ...
    
    def isEmpty(self) -> bool: ...
    
    def setFrame(self, rectangle2D: 'Rectangle2D') -> None: ...
    
    def setFrameFromCenter(self, point2D: Point2D, point2D2: Point2D) -> None: ...
    
    def setFrameFromDiagonal(self, point2D: Point2D, point2D2: Point2D) -> None: ...
    
    
class Rectangle2D(RectangularShape):
    OUT_BOTTOM = 8
    OUT_LEFT = 1
    OUT_RIGHT = 4
    OUT_TOP = 2
    
    def __init__(self) -> None: ...
    
    def add(self, point2D: Point2D) -> None: ...
    
    def createIntersection(self, rectangle2D: 'Rectangle2D') -> 'Rectangle2D': ...
    
    def createUnion(self, rectangle2D: 'Rectangle2D') -> 'Rectangle2D': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getBounds2D(self) -> 'Rectangle2D': ...
    
    def getPathIterator(self, affineTransform: AffineTransform) -> 'PathIterator': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def intersect(rectangle2D: 'Rectangle2D', rectangle2D2: 'Rectangle2D', rectangle2D3: 'Rectangle2D') -> None: ...
    
    def intersectsLine(self, line2D: 'Line2D') -> bool: ...
    
    def outcode(self, point2D: Point2D) -> int: ...
    
    def setRect(self, rectangle2D: 'Rectangle2D') -> None: ...
    
    @staticmethod
    def union(rectangle2D: 'Rectangle2D', rectangle2D2: 'Rectangle2D', rectangle2D3: 'Rectangle2D') -> None: ...
    
    
    class Double:
        OUT_BOTTOM = 8
        OUT_LEFT = 1
        OUT_RIGHT = 4
        OUT_TOP = 2
        height: float
        width: float
        x: float
        y: float
        
        def __init__(self) -> None: ...
        
        def createIntersection(self, rectangle2D: 'Rectangle2D') -> 'Rectangle2D': ...
        
        def createUnion(self, rectangle2D: 'Rectangle2D') -> 'Rectangle2D': ...
        
        def getBounds2D(self) -> 'Rectangle2D': ...
        
        def getHeight(self) -> float: ...
        
        def getWidth(self) -> float: ...
        
        def getX(self) -> float: ...
        
        def getY(self) -> float: ...
        
        def isEmpty(self) -> bool: ...
        
        def setRect(self, rectangle2D: 'Rectangle2D') -> None: ...
        
        def toString(self) -> str: ...
        
        
    class Float:
        OUT_BOTTOM = 8
        OUT_LEFT = 1
        OUT_RIGHT = 4
        OUT_TOP = 2
        height: float
        width: float
        x: float
        y: float
        
        def __init__(self) -> None: ...
        
        def createIntersection(self, rectangle2D: 'Rectangle2D') -> 'Rectangle2D': ...
        
        def createUnion(self, rectangle2D: 'Rectangle2D') -> 'Rectangle2D': ...
        
        def getBounds2D(self) -> 'Rectangle2D': ...
        
        def getHeight(self) -> float: ...
        
        def getWidth(self) -> float: ...
        
        def getX(self) -> float: ...
        
        def getY(self) -> float: ...
        
        def isEmpty(self) -> bool: ...
        
        def setRect(self, rectangle2D: 'Rectangle2D') -> None: ...
        
        def toString(self) -> str: ...
        
        
    
