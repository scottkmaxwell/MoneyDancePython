import typing
import java.awt
import java.awt.color


class RenderedImage:
    def __init__(self) -> None: ...
    
    def copyData(self, writableRaster: 'WritableRaster') -> 'WritableRaster': ...
    
    def getColorModel(self) -> 'ColorModel': ...
    
    def getData(self) -> 'Raster': ...
    
    def getHeight(self) -> int: ...
    
    def getMinTileX(self) -> int: ...
    
    def getMinTileY(self) -> int: ...
    
    def getMinX(self) -> int: ...
    
    def getMinY(self) -> int: ...
    
    def getNumXTiles(self) -> int: ...
    
    def getNumYTiles(self) -> int: ...
    
    def getProperty(self, s: str) -> object: ...
    
    def getPropertyNames(self) -> typing.List[str]: ...
    
    def getSampleModel(self) -> 'SampleModel': ...
    
    def getSources(self) -> typing.Any: ...
    
    def getTile(self, i: int, i2: int) -> 'Raster': ...
    
    def getTileGridXOffset(self) -> int: ...
    
    def getTileGridYOffset(self) -> int: ...
    
    def getTileHeight(self) -> int: ...
    
    def getTileWidth(self) -> int: ...
    
    def getWidth(self) -> int: ...
    
    
class WritableRenderedImage(RenderedImage):
    def __init__(self) -> None: ...
    
    def addTileObserver(self, tileObserver: 'TileObserver') -> None: ...
    
    def getWritableTile(self, i: int, i2: int) -> 'WritableRaster': ...
    
    def getWritableTileIndices(self) -> typing.List[java.awt.Point]: ...
    
    def hasTileWriters(self) -> bool: ...
    
    def isTileWritable(self, i: int, i2: int) -> bool: ...
    
    def releaseWritableTile(self, i: int, i2: int) -> None: ...
    
    def removeTileObserver(self, tileObserver: 'TileObserver') -> None: ...
    
    def setData(self, raster: 'Raster') -> None: ...
    
    
class BufferedImage(WritableRenderedImage, java.awt.Image, java.awt.Transparency):
    BITMASK = 2
    OPAQUE = 1
    SCALE_AREA_AVERAGING = 16
    SCALE_DEFAULT = 1
    SCALE_FAST = 2
    SCALE_REPLICATE = 8
    SCALE_SMOOTH = 4
    TRANSLUCENT = 3
    TYPE_3BYTE_BGR = 5
    TYPE_4BYTE_ABGR = 6
    TYPE_4BYTE_ABGR_PRE = 7
    TYPE_BYTE_BINARY = 12
    TYPE_BYTE_GRAY = 10
    TYPE_BYTE_INDEXED = 13
    TYPE_CUSTOM = 0
    TYPE_INT_ARGB = 2
    TYPE_INT_ARGB_PRE = 3
    TYPE_INT_BGR = 4
    TYPE_INT_RGB = 1
    TYPE_USHORT_555_RGB = 9
    TYPE_USHORT_565_RGB = 8
    TYPE_USHORT_GRAY = 11
    UndefinedProperty = 'java.lang.Object'
    
    def __init__(self, i: int, i2: int, i3: int) -> None: ...
    
    def addTileObserver(self, tileObserver: 'TileObserver') -> None: ...
    
    def coerceData(self, b: bool) -> None: ...
    
    def copyData(self, writableRaster: 'WritableRaster') -> 'WritableRaster': ...
    
    def createGraphics(self) -> java.awt.Graphics2D: ...
    
    def getAlphaRaster(self) -> 'WritableRaster': ...
    
    def getColorModel(self) -> 'ColorModel': ...
    
    def getData(self) -> 'Raster': ...
    
    def getGraphics(self) -> java.awt.Graphics: ...
    
    def getHeight(self) -> int: ...
    
    def getMinTileX(self) -> int: ...
    
    def getMinTileY(self) -> int: ...
    
    def getMinX(self) -> int: ...
    
    def getMinY(self) -> int: ...
    
    def getNumXTiles(self) -> int: ...
    
    def getNumYTiles(self) -> int: ...
    
    def getProperty(self, s: str) -> object: ...
    
    def getPropertyNames(self) -> typing.List[str]: ...
    
    def getRGB(self, i: int, i2: int) -> int: ...
    
    def getRaster(self) -> 'WritableRaster': ...
    
    def getSampleModel(self) -> 'SampleModel': ...
    
    def getSource(self) -> 'ImageProducer': ...
    
    def getSources(self) -> typing.Any: ...
    
    def getSubimage(self, i: int, i2: int, i3: int, i4: int) -> 'BufferedImage': ...
    
    def getTile(self, i: int, i2: int) -> 'Raster': ...
    
    def getTileGridXOffset(self) -> int: ...
    
    def getTileGridYOffset(self) -> int: ...
    
    def getTileHeight(self) -> int: ...
    
    def getTileWidth(self) -> int: ...
    
    def getTransparency(self) -> int: ...
    
    def getType(self) -> int: ...
    
    def getWidth(self) -> int: ...
    
    def getWritableTile(self, i: int, i2: int) -> 'WritableRaster': ...
    
    def getWritableTileIndices(self) -> typing.List[java.awt.Point]: ...
    
    def hasTileWriters(self) -> bool: ...
    
    def isAlphaPremultiplied(self) -> bool: ...
    
    def isTileWritable(self, i: int, i2: int) -> bool: ...
    
    def releaseWritableTile(self, i: int, i2: int) -> None: ...
    
    def removeTileObserver(self, tileObserver: 'TileObserver') -> None: ...
    
    def setData(self, raster: 'Raster') -> None: ...
    
    def setRGB(self, i: int, i2: int, i3: int) -> None: ...
    
    def toString(self) -> str: ...
    
    
class ColorModel(java.awt.Transparency):
    BITMASK = 2
    OPAQUE = 1
    TRANSLUCENT = 3
    
    def __init__(self, i: int) -> None: ...
    
    def coerceData(self, writableRaster: 'WritableRaster', b: bool) -> 'ColorModel': ...
    
    def createCompatibleSampleModel(self, i: int, i2: int) -> 'SampleModel': ...
    
    def createCompatibleWritableRaster(self, i: int, i2: int) -> 'WritableRaster': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAlpha(self, i: int) -> int: ...
    
    def getAlphaRaster(self, writableRaster: 'WritableRaster') -> 'WritableRaster': ...
    
    def getBlue(self, i: int) -> int: ...
    
    def getColorSpace(self) -> java.awt.color.ColorSpace: ...
    
    def getComponentSize(self) -> typing.List[int]: ...
    
    def getComponents(self, i: int, t: typing.List[int], i2: int) -> typing.List[int]: ...
    
    def getDataElement(self, t: typing.List[int], i: int) -> int: ...
    
    def getDataElements(self, i: int, o: object) -> object: ...
    
    def getGreen(self, i: int) -> int: ...
    
    def getNormalizedComponents(self, o: object, t: typing.List[float], i: int) -> typing.List[float]: ...
    
    def getNumColorComponents(self) -> int: ...
    
    def getNumComponents(self) -> int: ...
    
    def getPixelSize(self) -> int: ...
    
    def getRGB(self, i: int) -> int: ...
    
    @staticmethod
    def getRGBdefault() -> 'ColorModel': ...
    
    def getRed(self, i: int) -> int: ...
    
    def getTransferType(self) -> int: ...
    
    def getTransparency(self) -> int: ...
    
    def getUnnormalizedComponents(self, t: typing.List[float], i: int, t2: typing.List[int], i2: int) -> typing.List[int]: ...
    
    def hasAlpha(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def isAlphaPremultiplied(self) -> bool: ...
    
    def isCompatibleRaster(self, raster: 'Raster') -> bool: ...
    
    def isCompatibleSampleModel(self, sampleModel: 'SampleModel') -> bool: ...
    
    def toString(self) -> str: ...
    
    
