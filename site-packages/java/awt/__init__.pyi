import typing
import color
import datatransfer
import dnd
import font
import geom
import image
import java.beans
import java.io
import java.util
import javax.accessibility

T = typing.TypeVar("T")


class LayoutManager:
    def __init__(self) -> None: ...
    
    def addLayoutComponent(self, s: str, component: 'Component') -> None: ...
    
    def layoutContainer(self, container: 'Container') -> None: ...
    
    def minimumLayoutSize(self, container: 'Container') -> 'Dimension': ...
    
    def preferredLayoutSize(self, container: 'Container') -> 'Dimension': ...
    
    def removeLayoutComponent(self, component: 'Component') -> None: ...
    
    
class LayoutManager2(LayoutManager):
    def __init__(self) -> None: ...
    
    def getLayoutAlignmentX(self, container: 'Container') -> float: ...
    
    def getLayoutAlignmentY(self, container: 'Container') -> float: ...
    
    def invalidateLayout(self, container: 'Container') -> None: ...
    
    def maximumLayoutSize(self, container: 'Container') -> 'Dimension': ...
    
    
class BorderLayout(LayoutManager2, java.io.Serializable):
    AFTER_LAST_LINE = u'Last'
    AFTER_LINE_ENDS = u'After'
    BEFORE_FIRST_LINE = u'First'
    BEFORE_LINE_BEGINS = u'Before'
    CENTER = u'Center'
    EAST = u'East'
    LINE_END = u'After'
    LINE_START = u'Before'
    NORTH = u'North'
    PAGE_END = u'Last'
    PAGE_START = u'First'
    SOUTH = u'South'
    WEST = u'West'
    
    def __init__(self) -> None: ...
    
    def addLayoutComponent(self, s: str, component: 'Component') -> None: ...
    
    def getConstraints(self, component: 'Component') -> object: ...
    
    def getHgap(self) -> int: ...
    
    def getLayoutAlignmentX(self, container: 'Container') -> float: ...
    
    def getLayoutAlignmentY(self, container: 'Container') -> float: ...
    
    def getLayoutComponent(self, o: object) -> 'Component': ...
    
    def getVgap(self) -> int: ...
    
    def invalidateLayout(self, container: 'Container') -> None: ...
    
    def layoutContainer(self, container: 'Container') -> None: ...
    
    def maximumLayoutSize(self, container: 'Container') -> 'Dimension': ...
    
    def minimumLayoutSize(self, container: 'Container') -> 'Dimension': ...
    
    def preferredLayoutSize(self, container: 'Container') -> 'Dimension': ...
    
    def removeLayoutComponent(self, component: 'Component') -> None: ...
    
    def setHgap(self, i: int) -> None: ...
    
    def setVgap(self, i: int) -> None: ...
    
    def toString(self) -> str: ...
    
    
class Transparency:
    BITMASK = 2
    OPAQUE = 1
    TRANSLUCENT = 3
    
    def __init__(self) -> None: ...
    
    def getTransparency(self) -> int: ...
    
    
class Paint(Transparency):
    BITMASK = 2
    OPAQUE = 1
    TRANSLUCENT = 3
    
    def __init__(self) -> None: ...
    
    def createContext(self, i: image.ColorModel, rectangle: 'Rectangle', g: geom.Rectangle2D, g2: geom.AffineTransform, renderingHints: 'RenderingHints') -> 'PaintContext': ...
    
    
class Color(Paint, java.io.Serializable):
    BITMASK = 2
    BLACK = 'java.awt.Color[r=0,g=0,b=0]'
    BLUE = 'java.awt.Color[r=0,g=0,b=255]'
    CYAN = 'java.awt.Color[r=0,g=255,b=255]'
    DARK_GRAY = 'java.awt.Color[r=64,g=64,b=64]'
    GRAY = 'java.awt.Color[r=128,g=128,b=128]'
    GREEN = 'java.awt.Color[r=0,g=255,b=0]'
    LIGHT_GRAY = 'java.awt.Color[r=192,g=192,b=192]'
    MAGENTA = 'java.awt.Color[r=255,g=0,b=255]'
    OPAQUE = 1
    ORANGE = 'java.awt.Color[r=255,g=200,b=0]'
    PINK = 'java.awt.Color[r=255,g=175,b=175]'
    RED = 'java.awt.Color[r=255,g=0,b=0]'
    TRANSLUCENT = 3
    WHITE = 'java.awt.Color[r=255,g=255,b=255]'
    YELLOW = 'java.awt.Color[r=255,g=255,b=0]'
    black = 'java.awt.Color[r=0,g=0,b=0]'
    blue = 'java.awt.Color[r=0,g=0,b=255]'
    cyan = 'java.awt.Color[r=0,g=255,b=255]'
    darkGray = 'java.awt.Color[r=64,g=64,b=64]'
    gray = 'java.awt.Color[r=128,g=128,b=128]'
    green = 'java.awt.Color[r=0,g=255,b=0]'
    lightGray = 'java.awt.Color[r=192,g=192,b=192]'
    magenta = 'java.awt.Color[r=255,g=0,b=255]'
    orange = 'java.awt.Color[r=255,g=200,b=0]'
    pink = 'java.awt.Color[r=255,g=175,b=175]'
    red = 'java.awt.Color[r=255,g=0,b=0]'
    white = 'java.awt.Color[r=255,g=255,b=255]'
    yellow = 'java.awt.Color[r=255,g=255,b=0]'
    
    @typing.overload
    def __init__(self, r: int, g: int, b: int, a: int = 0) -> None: ...
    
    @staticmethod
    def HSBtoRGB(f: float, f2: float, f3: float) -> int: ...
    
    @staticmethod
    def RGBtoHSB(i: int, i2: int, i3: int, t: typing.List[float]) -> typing.List[float]: ...
    
    def __init__(self, i: int) -> None: ...
    
    def brighter(self) -> 'Color': ...
    
    def createContext(self, i: image.ColorModel, rectangle: 'Rectangle', g: geom.Rectangle2D, g2: geom.AffineTransform, renderingHints: 'RenderingHints') -> 'PaintContext': ...
    
    def darker(self) -> 'Color': ...
    
    @staticmethod
    def decode(s: str) -> 'Color': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAlpha(self) -> int: ...
    
    def getBlue(self) -> int: ...
    
    @staticmethod
    def getColor(s: str) -> 'Color': ...
    
    def getColorComponents(self, t: typing.List[float]) -> typing.List[float]: ...
    
    def getColorSpace(self) -> color.ColorSpace: ...
    
    def getComponents(self, t: typing.List[float]) -> typing.List[float]: ...
    
    def getGreen(self) -> int: ...
    
    @staticmethod
    def getHSBColor(f: float, f2: float, f3: float) -> 'Color': ...
    
    def getRGB(self) -> int: ...
    
    def getRGBColorComponents(self, t: typing.List[float]) -> typing.List[float]: ...
    
    def getRGBComponents(self, t: typing.List[float]) -> typing.List[float]: ...
    
    def getRed(self) -> int: ...
    
    def getTransparency(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class MenuContainer:
    def __init__(self) -> None: ...
    
    def getFont(self) -> 'Font': ...
    
    def postEvent(self, event: 'Event') -> bool: ...
    
    def remove(self, menuComponent: 'MenuComponent') -> None: ...
    
    
class Component(MenuContainer, image.ImageObserver, java.io.Serializable):
    def getFont(self) -> 'java.awt.Font': ...
    
    
class Container(Component):
    def removeAll(self) -> None: ...
    def add(self, comp: 'Component', index: int = 0) -> 'Component': ...
    @typing.overload
    def add(self, name: str, comp: 'Component') -> 'Component': ...
    
    
class Window(Container, javax.accessibility.Accessible):
    def dispose(self) -> None: ...
    
    
class Dialog(Window):
    def setVisible(self, b: bool) -> None: ...
    
    
class Dimension(geom.Dimension2D, java.io.Serializable):
    height: int
    width: int
    
    @typing.overload
    def __init__(self, width: int, height: int) -> None: ...
    @typing.overload
    def __init__(self, d: 'Dimension') -> None: ...
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getHeight(self) -> float: ...
    
    def getSize(self) -> 'Dimension': ...
    
    def getWidth(self) -> float: ...
    
    def hashCode(self) -> int: ...
    
    def setSize(self, dimension: 'Dimension') -> None: ...
    
    def toString(self) -> str: ...
    
    
class FileDialog(Dialog):
    LOAD: int
    SAVE: int
    def __init__(self, parent: Dialog, title: str = , mode: int = 0) -> None: ...
    @typing.overload
    def __init__(self, parent: Frame, title: str = , mode: int = 0) -> None: ...
    def getDirectory(self) -> str: ...
    def getFile(self) -> str: ...
    def setDirectory(self, dir: str) -> None: ...
    def setFile(self, file: str) -> None: ...
    def setFilenameFilter(self, filename_filter: java.io.FilenameFilter) -> None: ...
    def setMode(self, mode: int) -> None: ...
    def setMultipleMode(self, enabled: bool) -> None: ...
    def setTitle(self, title: str) -> None: ...
    
    
class FlowLayout(LayoutManager, java.io.Serializable):
    CENTER = 1
    LEADING = 3
    LEFT = 0
    RIGHT = 2
    TRAILING = 4
    
    @typing.overload
    def __init__(self, align: int) -> None: ...
    @typing.overload
    def __init__(self, align: int, hgap: int, vgap: int) -> None: ...
    
    def __init__(self) -> None: ...
    
    def addLayoutComponent(self, s: str, component: Component) -> None: ...
    
    def getAlignOnBaseline(self) -> bool: ...
    
    def getAlignment(self) -> int: ...
    
    def getHgap(self) -> int: ...
    
    def getVgap(self) -> int: ...
    
    def layoutContainer(self, container: Container) -> None: ...
    
    def minimumLayoutSize(self, container: Container) -> Dimension: ...
    
    def preferredLayoutSize(self, container: Container) -> Dimension: ...
    
    def removeLayoutComponent(self, component: Component) -> None: ...
    
    def setAlignOnBaseline(self, b: bool) -> None: ...
    
    def setAlignment(self, i: int) -> None: ...
    
    def setHgap(self, i: int) -> None: ...
    
    def setVgap(self, i: int) -> None: ...
    
    def toString(self) -> str: ...
    
    
class Font(java.io.Serializable):
    BOLD = 1
    CENTER_BASELINE = 1
    DIALOG = u'Dialog'
    DIALOG_INPUT = u'DialogInput'
    HANGING_BASELINE = 2
    ITALIC = 2
    LAYOUT_LEFT_TO_RIGHT = 0
    LAYOUT_NO_LIMIT_CONTEXT = 4
    LAYOUT_NO_START_CONTEXT = 2
    LAYOUT_RIGHT_TO_LEFT = 1
    MONOSPACED = u'Monospaced'
    PLAIN = 0
    ROMAN_BASELINE = 0
    SANS_SERIF = u'SansSerif'
    SERIF = u'Serif'
    TRUETYPE_FONT = 0
    TYPE1_FONT = 1
    
    @typing.overload
    def deriveFont(self, size: float) -> 'Font': ...
    @typing.overload
    def __init__(self, font: 'Font') -> None: ...
    @typing.overload
    def __init__(self, name: str, style: int, size: int) -> None: ...
    
    def __init__(self, t: typing.Dict[str,'T']) -> None: ...
    
    def canDisplay(self, i: int) -> bool: ...
    
    def canDisplayUpTo(self, s: str) -> int: ...
    
    @staticmethod
    def createFont(i: int, j: java.io.File) -> 'Font': ...
    
    @staticmethod
    def createFonts(j: java.io.File) -> typing.List['Font']: ...
    
    def createGlyphVector(self, f: font.FontRenderContext, s: str) -> font.GlyphVector: ...
    
    @staticmethod
    def decode(s: str) -> 'Font': ...
    
    def deriveFont(self, i: int) -> 'Font': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAttributes(self) -> typing.Dict[font.TextAttribute,'T']: ...
    
    def getAvailableAttributes(self) -> typing.List[str]: ...
    
    def getBaselineFor(self, s: str) -> int: ...
    
    def getFamily(self) -> str: ...
    
    @staticmethod
    def getFont(s: str) -> 'Font': ...
    
    def getFontName(self) -> str: ...
    
    def getItalicAngle(self) -> float: ...
    
    def getLineMetrics(self, s: str, f: font.FontRenderContext) -> font.LineMetrics: ...
    
    def getMaxCharBounds(self, f: font.FontRenderContext) -> geom.Rectangle2D: ...
    
    def getMissingGlyphCode(self) -> int: ...
    
    def getName(self) -> str: ...
    
    def getNumGlyphs(self) -> int: ...
    
    def getPSName(self) -> str: ...
    
    def getSize(self) -> int: ...
    
    def getSize2D(self) -> float: ...
    
    def getStringBounds(self, s: str, f: font.FontRenderContext) -> geom.Rectangle2D: ...
    
    def getStyle(self) -> int: ...
    
    def getTransform(self) -> geom.AffineTransform: ...
    
    def hasLayoutAttributes(self) -> bool: ...
    
    def hasUniformLineMetrics(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def isBold(self) -> bool: ...
    
    def isItalic(self) -> bool: ...
    
    def isPlain(self) -> bool: ...
    
    def isTransformed(self) -> bool: ...
    
    def layoutGlyphVector(self, f: font.FontRenderContext, t: typing.List[str], i: int, i2: int, i3: int) -> font.GlyphVector: ...
    
    @staticmethod
    def textRequiresLayout(t: typing.List[str], i: int, i2: int) -> bool: ...
    
    def toString(self) -> str: ...
    
    
class Frame(Window):
    pass
    
class Point(geom.Point2D, java.io.Serializable):
    x: int
    y: int
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLocation(self) -> 'Point': ...
    
    def getX(self) -> float: ...
    
    def getY(self) -> float: ...
    
    def move(self, i: int, i2: int) -> None: ...
    
    def setLocation(self, point: 'Point') -> None: ...
    
    def toString(self) -> str: ...
    
    def translate(self, i: int, i2: int) -> None: ...
    
    
class Toolkit:
    def __init__(self) -> None: ...
    
    def addAWTEventListener(self, e: 'event.AWTEventListener', i: int) -> None: ...
    
    def addPropertyChangeListener(self, s: str, j: java.beans.PropertyChangeListener) -> None: ...
    
    def areExtraMouseButtonsEnabled(self) -> bool: ...
    
    def beep(self) -> None: ...
    
    def checkImage(self, image: 'Image', i: int, i2: int, i3: image.ImageObserver) -> int: ...
    
    def createCustomCursor(self, image: 'Image', point: Point, s: str) -> 'Cursor': ...
    
    def createDragGestureRecognizer(self, t: typing.Any, d: dnd.DragSource, component: Component, i: int, d2: dnd.DragGestureListener) -> 'T': ...
    
    def createImage(self, s: str) -> 'Image': ...
    
    def getAWTEventListeners(self) -> typing.List['event.AWTEventListener']: ...
    
    def getBestCursorSize(self, i: int, i2: int) -> Dimension: ...
    
    def getColorModel(self) -> image.ColorModel: ...
    
    @staticmethod
    def getDefaultToolkit() -> 'Toolkit': ...
    
    def getDesktopProperty(self, s: str) -> object: ...
    
    def getFontList(self) -> typing.List[str]: ...
    
    def getFontMetrics(self, font: Font) -> 'FontMetrics': ...
    
    def getImage(self, s: str) -> 'Image': ...
    
    def getLockingKeyState(self, i: int) -> bool: ...
    
    def getMaximumCursorColors(self) -> int: ...
    
    def getMenuShortcutKeyMask(self) -> int: ...
    
    def getMenuShortcutKeyMaskEx(self) -> int: ...
    
    def getPrintJob(self, frame: Frame, s: str, j: java.util.Properties) -> 'PrintJob': ...
    
    @staticmethod
    def getProperty(s: str, s2: str) -> str: ...
    
    def getPropertyChangeListeners(self) -> typing.List[java.beans.PropertyChangeListener]: ...
    
    def getScreenInsets(self, graphicsConfiguration: 'GraphicsConfiguration') -> 'Insets': ...
    
    def getScreenResolution(self) -> int: ...
    
    def getScreenSize(self) -> Dimension: ...
    
    def getSystemClipboard(self) -> datatransfer.Clipboard: ...
    
    def getSystemEventQueue(self) -> 'EventQueue': ...
    
    def getSystemSelection(self) -> datatransfer.Clipboard: ...
    
    def isAlwaysOnTopSupported(self) -> bool: ...
    
    def isDynamicLayoutActive(self) -> bool: ...
    
    def isFrameStateSupported(self, i: int) -> bool: ...
    
    def isModalExclusionTypeSupported(self, s: str) -> bool: ...
    
    def isModalityTypeSupported(self, s: str) -> bool: ...
    
    def mapInputMethodHighlight(self, i: 'im.InputMethodHighlight') -> typing.Dict[font.TextAttribute,'T']: ...
    
    def prepareImage(self, image: 'Image', i: int, i2: int, i3: image.ImageObserver) -> bool: ...
    
    def removeAWTEventListener(self, e: 'event.AWTEventListener') -> None: ...
    
    def removePropertyChangeListener(self, s: str, j: java.beans.PropertyChangeListener) -> None: ...
    
    def setDynamicLayout(self, b: bool) -> None: ...
    
    def setLockingKeyState(self, i: int, b: bool) -> None: ...
    
    def sync(self) -> None: ...
    
    
