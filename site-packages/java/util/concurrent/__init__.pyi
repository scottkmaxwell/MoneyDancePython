import typing
import java.io
import java.lang

V = typing.TypeVar("V")


class CyclicBarrier:
    def __init__(self, i: int) -> None: ...
    
    def await(self) -> int: ...
    
    def getNumberWaiting(self) -> int: ...
    
    def getParties(self) -> int: ...
    
    def isBroken(self) -> bool: ...
    
    def reset(self) -> None: ...
    
    
class Future:
    def __init__(self) -> None: ...
    
    def cancel(self, b: bool) -> bool: ...
    
    def get(self) -> 'V': ...
    
    def isCancelled(self) -> bool: ...
    
    def isDone(self) -> bool: ...
    
    
class RunnableFuture(Future, java.lang.Runnable):
    def __init__(self) -> None: ...
    
    def run(self) -> None: ...
    
    
class FutureTask(RunnableFuture):
    def __init__(self, t: typing.Any) -> None: ...
    
    def cancel(self, b: bool) -> bool: ...
    
    def get(self) -> 'V': ...
    
    def isCancelled(self) -> bool: ...
    
    def isDone(self) -> bool: ...
    
    def run(self) -> None: ...
    
    def toString(self) -> str: ...
    
    
class Semaphore(java.io.Serializable):
    def __init__(self, i: int) -> None: ...
    
    def acquire(self) -> None: ...
    
    def acquireUninterruptibly(self) -> None: ...
    
    def availablePermits(self) -> int: ...
    
    def drainPermits(self) -> int: ...
    
    def getQueueLength(self) -> int: ...
    
    def hasQueuedThreads(self) -> bool: ...
    
    def isFair(self) -> bool: ...
    
    def release(self) -> None: ...
    
    def toString(self) -> str: ...
    
    def tryAcquire(self) -> bool: ...
    
    
