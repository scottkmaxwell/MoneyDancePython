

class IntBinaryOperator:
    def __init__(self) -> None: ...
    
    def applyAsInt(self, i: int, i2: int) -> int: ...
    
    
class IntConsumer:
    def __init__(self) -> None: ...
    
    def accept(self, i: int) -> None: ...
    
    def andThen(self, intConsumer: 'IntConsumer') -> 'IntConsumer': ...
    
    
class IntPredicate:
    def __init__(self) -> None: ...
    
    def and(self, intPredicate: 'IntPredicate') -> 'IntPredicate': ...
    
    def negate(self) -> 'IntPredicate': ...
    
    def or(self, intPredicate: 'IntPredicate') -> 'IntPredicate': ...
    
    def test(self, i: int) -> bool: ...
    
    
class IntSupplier:
    def __init__(self) -> None: ...
    
    def getAsInt(self) -> int: ...
    
    
class IntToDoubleFunction:
    def __init__(self) -> None: ...
    
    def applyAsDouble(self, i: int) -> float: ...
    
    
class IntToLongFunction:
    def __init__(self) -> None: ...
    
    def applyAsLong(self, i: int) -> int: ...
    
    
class IntUnaryOperator:
    def __init__(self) -> None: ...
    
    def andThen(self, intUnaryOperator: 'IntUnaryOperator') -> 'IntUnaryOperator': ...
    
    def applyAsInt(self, i: int) -> int: ...
    
    def compose(self, intUnaryOperator: 'IntUnaryOperator') -> 'IntUnaryOperator': ...
    
    @staticmethod
    def identity() -> 'IntUnaryOperator': ...
    
    
