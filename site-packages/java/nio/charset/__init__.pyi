import typing
import java.lang
import java.nio


class Charset(java.lang.Comparable):
    def __init__(self) -> None: ...
    
    def aliases(self) -> typing.Set[str]: ...
    
    @staticmethod
    def availableCharsets() -> typing.Any: ...
    
    def canEncode(self) -> bool: ...
    
    def compareTo(self, charset: 'Charset') -> int: ...
    
    def contains(self, charset: 'Charset') -> bool: ...
    
    def decode(self, j: java.nio.ByteBuffer) -> java.nio.CharBuffer: ...
    
    @staticmethod
    def defaultCharset() -> 'Charset': ...
    
    def displayName(self) -> str: ...
    
    def encode(self, s: str) -> java.nio.ByteBuffer: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def forName(s: str) -> 'Charset': ...
    
    def hashCode(self) -> int: ...
    
    def isRegistered(self) -> bool: ...
    
    @staticmethod
    def isSupported(s: str) -> bool: ...
    
    def name(self) -> str: ...
    
    def newDecoder(self) -> 'CharsetDecoder': ...
    
    def newEncoder(self) -> 'CharsetEncoder': ...
    
    def toString(self) -> str: ...
    
    
class IllegalCharsetNameException(java.lang.IllegalArgumentException):
    def __init__(self, s: str) -> None: ...
    
    def getCharsetName(self) -> str: ...
    
    
