import typing
import java.lang
import java.util.stream


class Buffer:
    def __init__(self) -> None: ...
    
    def array(self) -> object: ...
    
    def arrayOffset(self) -> int: ...
    
    def capacity(self) -> int: ...
    
    def clear(self) -> 'Buffer': ...
    
    def duplicate(self) -> 'Buffer': ...
    
    def flip(self) -> 'Buffer': ...
    
    def hasArray(self) -> bool: ...
    
    def hasRemaining(self) -> bool: ...
    
    def isDirect(self) -> bool: ...
    
    def isReadOnly(self) -> bool: ...
    
    def limit(self) -> int: ...
    
    def mark(self) -> 'Buffer': ...
    
    def position(self) -> int: ...
    
    def remaining(self) -> int: ...
    
    def reset(self) -> 'Buffer': ...
    
    def rewind(self) -> 'Buffer': ...
    
    def slice(self) -> 'Buffer': ...
    
    
class ByteBuffer(Buffer, java.lang.Comparable):
    def __init__(self) -> None: ...
    
    def alignedSlice(self, i: int) -> 'ByteBuffer': ...
    
    def alignmentOffset(self, i: int, i2: int) -> int: ...
    
    @staticmethod
    def allocate(i: int) -> 'ByteBuffer': ...
    
    @staticmethod
    def allocateDirect(i: int) -> 'ByteBuffer': ...
    
    def array(self) -> object: ...
    
    def arrayOffset(self) -> int: ...
    
    def asCharBuffer(self) -> 'CharBuffer': ...
    
    def asDoubleBuffer(self) -> 'DoubleBuffer': ...
    
    def asFloatBuffer(self) -> 'FloatBuffer': ...
    
    def asIntBuffer(self) -> 'IntBuffer': ...
    
    def asLongBuffer(self) -> 'LongBuffer': ...
    
    def asReadOnlyBuffer(self) -> 'ByteBuffer': ...
    
    def asShortBuffer(self) -> 'ShortBuffer': ...
    
    def clear(self) -> Buffer: ...
    
    def compact(self) -> 'ByteBuffer': ...
    
    def compareTo(self, byteBuffer: 'ByteBuffer') -> int: ...
    
    def duplicate(self) -> Buffer: ...
    
    def equals(self, o: object) -> bool: ...
    
    def flip(self) -> Buffer: ...
    
    def get(self) -> int: ...
    
    def getChar(self) -> str: ...
    
    def getDouble(self) -> float: ...
    
    def getFloat(self) -> float: ...
    
    def getInt(self) -> int: ...
    
    def getLong(self) -> int: ...
    
    def getShort(self) -> int: ...
    
    def hasArray(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def isDirect(self) -> bool: ...
    
    def mark(self) -> Buffer: ...
    
    def mismatch(self, byteBuffer: 'ByteBuffer') -> int: ...
    
    def order(self) -> 'ByteOrder': ...
    
    def put(self, i: int) -> 'ByteBuffer': ...
    
    def putChar(self, s: str) -> 'ByteBuffer': ...
    
    def putDouble(self, f: float) -> 'ByteBuffer': ...
    
    def putFloat(self, f: float) -> 'ByteBuffer': ...
    
    def putInt(self, i: int) -> 'ByteBuffer': ...
    
    def putLong(self, i: int) -> 'ByteBuffer': ...
    
    def putShort(self, i: int) -> 'ByteBuffer': ...
    
    def reset(self) -> Buffer: ...
    
    def rewind(self) -> Buffer: ...
    
    def slice(self) -> Buffer: ...
    
    def toString(self) -> str: ...
    
    @staticmethod
    def wrap(t: typing.List[int]) -> 'ByteBuffer': ...
    
    
class CharBuffer(Buffer, java.lang.Comparable, java.lang.Appendable, java.lang.CharSequence, java.lang.Readable):
    def __init__(self) -> None: ...
    
    @staticmethod
    def allocate(i: int) -> 'CharBuffer': ...
    
    def append(self, s: str) -> 'CharBuffer': ...
    
    def array(self) -> object: ...
    
    def arrayOffset(self) -> int: ...
    
    def asReadOnlyBuffer(self) -> 'CharBuffer': ...
    
    def charAt(self, i: int) -> str: ...
    
    def chars(self) -> java.util.stream.IntStream: ...
    
    def clear(self) -> Buffer: ...
    
    def compact(self) -> 'CharBuffer': ...
    
    def compareTo(self, charBuffer: 'CharBuffer') -> int: ...
    
    def duplicate(self) -> Buffer: ...
    
    def equals(self, o: object) -> bool: ...
    
    def flip(self) -> Buffer: ...
    
    def get(self) -> str: ...
    
    def hasArray(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def isDirect(self) -> bool: ...
    
    def isEmpty(self) -> bool: ...
    
    def length(self) -> int: ...
    
    def mark(self) -> Buffer: ...
    
    def mismatch(self, charBuffer: 'CharBuffer') -> int: ...
    
    def order(self) -> 'ByteOrder': ...
    
    def put(self, s: str) -> 'CharBuffer': ...
    
    def read(self, charBuffer: 'CharBuffer') -> int: ...
    
    def reset(self) -> Buffer: ...
    
    def rewind(self) -> Buffer: ...
    
    def slice(self) -> Buffer: ...
    
    def subSequence(self, i: int, i2: int) -> 'CharBuffer': ...
    
    def toString(self) -> str: ...
    
    @staticmethod
    def wrap(t: typing.List[str]) -> 'CharBuffer': ...
    
    
