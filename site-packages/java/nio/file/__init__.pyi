import typing
import java.io
import java.lang
import java.net


class Watchable:
    def __init__(self) -> None: ...
    
    def register(self, watchService: 'WatchService', t: typing.Any) -> 'WatchKey': ...
    
    
class Path(Watchable, java.lang.Comparable, typing.Iterable):
    def __init__(self) -> None: ...
    
    def compareTo(self, path: 'Path') -> int: ...
    
    def endsWith(self, s: str) -> bool: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFileName(self) -> 'Path': ...
    
    def getFileSystem(self) -> 'FileSystem': ...
    
    def getName(self, i: int) -> 'Path': ...
    
    def getNameCount(self) -> int: ...
    
    def getParent(self) -> 'Path': ...
    
    def getRoot(self) -> 'Path': ...
    
    def hashCode(self) -> int: ...
    
    def isAbsolute(self) -> bool: ...
    
    def iterator(self) -> typing.Iterator['Path']: ...
    
    def normalize(self) -> 'Path': ...
    
    @staticmethod
    def of(j: java.net.URI) -> 'Path': ...
    
    def register(self, watchService: 'WatchService', t: typing.Any) -> 'WatchKey': ...
    
    def relativize(self, path: 'Path') -> 'Path': ...
    
    def resolve(self, s: str) -> 'Path': ...
    
    def resolveSibling(self, s: str) -> 'Path': ...
    
    def startsWith(self, s: str) -> bool: ...
    
    def subpath(self, i: int, i2: int) -> 'Path': ...
    
    def toAbsolutePath(self) -> 'Path': ...
    
    def toFile(self) -> java.io.File: ...
    
    def toRealPath(self, t: typing.List['LinkOption']) -> 'Path': ...
    
    def toString(self) -> str: ...
    
    def toUri(self) -> java.net.URI: ...
    
    
