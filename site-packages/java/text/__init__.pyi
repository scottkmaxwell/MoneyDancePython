import typing
import java.io
import java.lang
import java.util


class Format(java.io.Serializable, java.lang.Cloneable):
    def __init__(self) -> None: ...
    
    def clone(self) -> object: ...
    
    def format(self, o: object) -> str: ...
    
    def formatToCharacterIterator(self, o: object) -> 'AttributedCharacterIterator': ...
    
    def parseObject(self, s: str) -> object: ...
    
    
    class Field:
        INPUT_METHOD_SEGMENT = 'java.text.AttributedCharacterIterator$Attribute(input_method_segment)'
        LANGUAGE = 'java.text.AttributedCharacterIterator$Attribute(language)'
        READING = 'java.text.AttributedCharacterIterator$Attribute(reading)'
        
        def __init__(self) -> None: ...
        
        
    
class MessageFormat(Format):
    def __init__(self, s: str) -> None: ...
    
    def applyPattern(self, s: str) -> None: ...
    
    def clone(self) -> object: ...
    
    def equals(self, o: object) -> bool: ...
    
    def formatToCharacterIterator(self, o: object) -> 'AttributedCharacterIterator': ...
    
    def getFormats(self) -> typing.List[Format]: ...
    
    def getFormatsByArgumentIndex(self) -> typing.List[Format]: ...
    
    def getLocale(self) -> java.util.Locale: ...
    
    def hashCode(self) -> int: ...
    
    def parse(self, s: str) -> typing.List[object]: ...
    
    def setFormat(self, i: int, format: Format) -> None: ...
    
    def setFormatByArgumentIndex(self, i: int, format: Format) -> None: ...
    
    def setFormats(self, t: typing.List[Format]) -> None: ...
    
    def setFormatsByArgumentIndex(self, t: typing.List[Format]) -> None: ...
    
    def setLocale(self, j: java.util.Locale) -> None: ...
    
    def toPattern(self) -> str: ...
    
    
    class Field:
        ARGUMENT = 'java.text.MessageFormat.Field(message argument field)'
        INPUT_METHOD_SEGMENT = 'java.text.AttributedCharacterIterator$Attribute(input_method_segment)'
        LANGUAGE = 'java.text.AttributedCharacterIterator$Attribute(language)'
        READING = 'java.text.AttributedCharacterIterator$Attribute(reading)'
        
        def __init__(self) -> None: ...
        
        
    
