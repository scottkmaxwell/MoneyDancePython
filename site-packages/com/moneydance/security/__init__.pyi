import typing
import com.infinitekind.util
import java.io
import java.security
import java.security.interfaces


class DSAParamsImpl(java.security.interfaces.DSAParams):
    def __init__(self, i: int, i2: int, i3: int) -> None: ...
    
    def getG(self) -> int: ...
    
    def getP(self) -> int: ...
    
    def getQ(self) -> int: ...
    
    
class DSAPrivateKeyImpl(java.security.interfaces.DSAPrivateKey):
    serialVersionUID = '7776497482533790279'
    
    def __init__(self, i: int, j: java.security.interfaces.DSAParams) -> None: ...
    
    def getAlgorithm(self) -> str: ...
    
    def getEncoded(self) -> typing.List[int]: ...
    
    def getFormat(self) -> str: ...
    
    def getParams(self) -> java.security.interfaces.DSAParams: ...
    
    def getX(self) -> int: ...
    
    
class DSAPublicKeyImpl(java.security.interfaces.DSAPublicKey):
    serialVersionUID = '1234526332779022332'
    
    def __init__(self, i: int, j: java.security.interfaces.DSAParams) -> None: ...
    
    def getAlgorithm(self) -> str: ...
    
    def getEncoded(self) -> typing.List[int]: ...
    
    def getFormat(self) -> str: ...
    
    def getParams(self) -> java.security.interfaces.DSAParams: ...
    
    def getY(self) -> int: ...
    
    
class KeyUtil:
    ALG_ID_DES = u'des'
    ALG_ID_DSA = u'dsa'
    ALG_ID_MD5 = u'md5'
    ALG_ID_RSA = u'rsa'
    ALG_ID_SHA = u'sha'
    KEYTYPE_PRIVATE = u'private'
    KEYTYPE_PUBLIC = u'public'
    KEY_ALG_ID = u'alg'
    KEY_CIPHERTEXT = u'ciphertext'
    KEY_KEY_TYPE = u'keytype'
    KEY_PASSPHRASE_HASH = u'passwdhashalg'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def decodePrivateKey(c: com.infinitekind.util.StreamTable, secretKeyCallback: 'SecretKeyCallback') -> java.security.PrivateKey: ...
    
    @staticmethod
    def decodePublicKey(c: com.infinitekind.util.StreamTable) -> java.security.PublicKey: ...
    
    @staticmethod
    def decryptBytes(c: com.infinitekind.util.StreamTable, t: typing.List[int]) -> typing.List[int]: ...
    
    @staticmethod
    def decryptString(c: com.infinitekind.util.StreamTable, s: str) -> str: ...
    
    @staticmethod
    def encodeKey(j: java.security.PublicKey) -> com.infinitekind.util.StreamTable: ...
    
    @staticmethod
    def encryptBytes(t: typing.List[int], s: str) -> com.infinitekind.util.StreamTable: ...
    
    @staticmethod
    def encryptString(s: str, s2: str) -> com.infinitekind.util.StreamTable: ...
    
    @staticmethod
    def getAES128EncryptionStream(t: typing.List[int], j: java.io.DataOutputStream) -> java.io.OutputStream: ...
    
    @staticmethod
    def getDecryptionStream(s: str, j: java.io.DataInputStream) -> java.io.InputStream: ...
    
    @staticmethod
    def getEncryptionStream(t: typing.List[int], j: java.io.DataOutputStream) -> java.io.OutputStream: ...
    
    @staticmethod
    def getHarderEncryptionStream(t: typing.List[int], j: java.io.DataOutputStream) -> java.io.OutputStream: ...
    
    @staticmethod
    def getPassphrase(s: str) -> typing.List[str]: ...
    
    @staticmethod
    def getPassphraseFromString(s: str) -> typing.List[int]: ...
    
    @staticmethod
    def getPublicKey(s: str) -> java.security.PublicKey: ...
    
    @staticmethod
    def getSignatureForKey(j: java.security.Key) -> java.security.Signature: ...
    
    @staticmethod
    def getStringFromPassphrase(t: typing.List[str]) -> str: ...
    
    @staticmethod
    def main(t: typing.List[str]) -> None: ...
    
    
class RSAPrivateKeyImpl(java.security.interfaces.RSAPrivateKey):
    serialVersionUID = '5187144804936595022'
    
    def __init__(self, i: int, i2: int, s: str, s2: str) -> None: ...
    
    def getAlgorithm(self) -> str: ...
    
    def getEncoded(self) -> typing.List[int]: ...
    
    def getFormat(self) -> str: ...
    
    def getModulus(self) -> int: ...
    
    def getPrivateExponent(self) -> int: ...
    
    
class RSAPublicKeyImpl(java.security.interfaces.RSAPublicKey):
    serialVersionUID = '-8727434096241101194'
    
    def __init__(self, s: str, s2: str, i: int, i2: int) -> None: ...
    
    def getAlgorithm(self) -> str: ...
    
    def getEncoded(self) -> typing.List[int]: ...
    
    def getFormat(self) -> str: ...
    
    def getModulus(self) -> int: ...
    
    def getPublicExponent(self) -> int: ...
    
    
class SecretKeyCallback:
    def __init__(self) -> None: ...
    
    def getPassphrase(self, s: str) -> str: ...
    
    def setVerifier(self, secretKeyVerifier: 'SecretKeyVerifier') -> None: ...
    
    
class SecretKeyVerifier:
    def __init__(self) -> None: ...
    
    def verifySecretKey(self, s: str) -> bool: ...
    
    
