import typing
import com.moneydance.apps.md.view.gui
import java.awt
import java.awt.color
import java.awt.datatransfer
import java.awt.geom
import java.io
import java.lang
import java.util
import javax.swing
import javax.swing.border
import javax.swing.plaf
import javax.swing.plaf.basic
import javax.swing.tree


class ArrowHead:
    def __init__(self, j: java.awt.geom.Point2D, j2: java.awt.geom.Point2D, f: float, f2: float, b: bool) -> None: ...
    
    def draw(self, j: java.awt.Graphics2D) -> None: ...
    
    
class ArrowIcon(javax.swing.Icon):
    EAST = 3
    NORTH = 1
    SOUTH = 5
    WEST = 7
    
    def __init__(self, i: int, b: bool) -> None: ...
    
    def getDirection(self) -> int: ...
    
    def getIconHeight(self) -> int: ...
    
    def getIconWidth(self) -> int: ...
    
    def paintIcon(self, j: java.awt.Component, j2: java.awt.Graphics, i: int, i2: int) -> None: ...
    
    def setEnabled(self, b: bool) -> None: ...
    
    
class AwtUtil:
    DEFAULT_INSET = 0
    DEFAULT_X_INSET = 2
    WINDOW_BOTTOM_LEFT = 1
    WINDOW_BOTTOM_RIGHT = 0
    WINDOW_CENTER = 4
    WINDOW_TOP_LEFT = 2
    WINDOW_TOP_RIGHT = 3
    noInsets = 'java.awt.Insets[top=0,left=0,bottom=0,right=0]'
    tallInsets = 'java.awt.Insets[top=2,left=0,bottom=2,right=0]'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def centerWindow(j: java.awt.Window) -> None: ...
    
    @staticmethod
    def colorFromHexString(s: str) -> java.awt.Color: ...
    
    @staticmethod
    def drawHashOverArea(j: java.awt.Graphics2D, i: int, i2: int, i3: int, i4: int) -> None: ...
    
    @staticmethod
    def dumpSizingInformation(j: java.io.PrintStream, s: str, j2: java.awt.Component, i: int) -> None: ...
    
    @staticmethod
    def enableAntiAliasing(j: java.awt.Graphics) -> None: ...
    
    @staticmethod
    def getC(i: int, i2: int, f: float, f2: float, i3: int, i4: int, b: bool, b2: bool, i5: int, j: java.awt.Insets) -> java.awt.GridBagConstraints: ...
    
    @staticmethod
    def getClosestFrameOrDialogAncestor(j: java.awt.Component) -> java.awt.Component: ...
    
    @staticmethod
    def getConstraints(i: int, i2: int, f: float, f2: float, i3: int, i4: int, b: bool, b2: bool) -> java.awt.GridBagConstraints: ...
    
    @staticmethod
    def getFrame(j: java.awt.Component) -> java.awt.Frame: ...
    
    @staticmethod
    def getJFrame(j: java.awt.Component) -> javax.swing.JFrame: ...
    
    @staticmethod
    def getTopmostParent(j: java.awt.Component) -> java.awt.Component: ...
    
    @staticmethod
    def getWindow(j: java.awt.Component) -> java.awt.Window: ...
    
    @staticmethod
    def hexStringForColor(j: java.awt.Color) -> str: ...
    
    @staticmethod
    def loadImage(s: str) -> java.awt.Image: ...
    
    @staticmethod
    def setWindowPosition(j: java.awt.Window, i: int) -> None: ...
    
    @staticmethod
    def setupWindow(j: java.awt.Window) -> None: ...
    
    
class CollapsibleRefresher:
    def __init__(self, j: java.lang.Runnable) -> None: ...
    
    def enqueueRefresh(self) -> None: ...
    
    
class DateField(java.awt.TextField, 'java.awt.event.KeyListener'):
    pass
    
class DatePicker(javax.swing.JPanel):
    pass
    
class EditingCellEditor(javax.swing.DefaultCellEditor):
    pass
    
class EditingTable(javax.swing.JTable):
    pass
    
class FlexLineBorder(javax.swing.border.AbstractBorder):
    def __init__(self) -> None: ...
    
    def getBorderInsets(self, j: java.awt.Component) -> java.awt.Insets: ...
    
    def isBorderOpaque(self) -> bool: ...
    
    def paintBorder(self, j: java.awt.Component, j2: java.awt.Graphics, i: int, i2: int, i3: int, i4: int) -> None: ...
    
    
class GenericTreeCellRenderer(javax.swing.tree.TreeCellRenderer):
    def __init__(self) -> None: ...
    
    def getTreeCellRendererComponent(self, j: javax.swing.JTree, o: object, b: bool, b2: bool, b3: bool, i: int, b4: bool) -> java.awt.Component: ...
    
    
class GridC(java.awt.GridBagConstraints):
    ABOVE_BASELINE = 1024
    ABOVE_BASELINE_LEADING = 1280
    ABOVE_BASELINE_TRAILING = 1536
    BASELINE = 256
    BASELINE_LEADING = 512
    BASELINE_TRAILING = 768
    BELOW_BASELINE = 1792
    BELOW_BASELINE_LEADING = 2048
    BELOW_BASELINE_TRAILING = 2304
    BOTH = 1
    BOTTOM_FIELD_INSET = 2
    BOTTOM_LABEL_INSET = 2
    CENTER = 10
    EAST = 13
    FIRST_LINE_END = 24
    FIRST_LINE_START = 23
    HORIZONTAL = 2
    LAST_LINE_END = 26
    LAST_LINE_START = 25
    LEFT_FIELD_INSET = 0
    LEFT_LABEL_INSET = 0
    LINE_END = 22
    LINE_START = 21
    NONE = 0
    NORTH = 11
    NORTHEAST = 12
    NORTHWEST = 18
    PAGE_END = 20
    PAGE_START = 19
    RELATIVE = -1
    REMAINDER = 0
    RIGHT_FIELD_INSET = 2
    RIGHT_LABEL_INSET = 2
    SOUTH = 15
    SOUTHEAST = 14
    SOUTHWEST = 16
    TOP_FIELD_INSET = 1
    TOP_LABEL_INSET = 1
    VERTICAL = 3
    WEST = 17
    anchor: int
    fill: int
    gridheight: int
    gridwidth: int
    gridx: int
    gridy: int
    ipadx: int
    ipady: int
    weightx: float
    weighty: float
    
    def __init__(self) -> None: ...
    
    def bottomInset(self, i: int) -> 'GridC': ...
    
    def center(self) -> 'GridC': ...
    
    def colspan(self, i: int) -> 'GridC': ...
    
    def copy(self) -> 'GridC': ...
    
    def east(self) -> 'GridC': ...
    
    def field(self) -> 'GridC': ...
    
    def fillboth(self) -> 'GridC': ...
    
    def fillnone(self) -> 'GridC': ...
    
    def fillx(self) -> 'GridC': ...
    
    def filly(self) -> 'GridC': ...
    
    @staticmethod
    def getc() -> 'GridC': ...
    
    def insets(self, i: int, i2: int, i3: int, i4: int) -> 'GridC': ...
    
    def label(self) -> 'GridC': ...
    
    def leftInset(self, i: int) -> 'GridC': ...
    
    def north(self) -> 'GridC': ...
    
    def northEast(self) -> 'GridC': ...
    
    def northWest(self) -> 'GridC': ...
    
    def padx(self, i: int) -> 'GridC': ...
    
    def pady(self, i: int) -> 'GridC': ...
    
    def reset(self) -> 'GridC': ...
    
    def rightInset(self, i: int) -> 'GridC': ...
    
    def rowspan(self, i: int) -> 'GridC': ...
    
    def sideInsets(self, i: int) -> 'GridC': ...
    
    def south(self) -> 'GridC': ...
    
    def southEast(self) -> 'GridC': ...
    
    def southWest(self) -> 'GridC': ...
    
    def topInset(self, i: int) -> 'GridC': ...
    
    def west(self) -> 'GridC': ...
    
    def wx(self, f: float) -> 'GridC': ...
    
    def wxy(self, f: float, f2: float) -> 'GridC': ...
    
    def wy(self, f: float) -> 'GridC': ...
    
    def x(self, i: int) -> 'GridC': ...
    
    def xy(self, i: int, i2: int) -> 'GridC': ...
    
    def y(self, i: int) -> 'GridC': ...
    
    
class HSLColorSpace(java.awt.color.ColorSpace):
    CS_CIEXYZ = 1001
    CS_GRAY = 1003
    CS_LINEAR_RGB = 1004
    CS_PYCC = 1002
    CS_sRGB = 1000
    HUE_INDEX = 0
    LUMINANCE_INDEX = 2
    SATURATION_INDEX = 1
    TYPE_2CLR = 12
    TYPE_3CLR = 13
    TYPE_4CLR = 14
    TYPE_5CLR = 15
    TYPE_6CLR = 16
    TYPE_7CLR = 17
    TYPE_8CLR = 18
    TYPE_9CLR = 19
    TYPE_ACLR = 20
    TYPE_BCLR = 21
    TYPE_CCLR = 22
    TYPE_CMY = 11
    TYPE_CMYK = 9
    TYPE_DCLR = 23
    TYPE_ECLR = 24
    TYPE_FCLR = 25
    TYPE_GRAY = 6
    TYPE_HLS = 8
    TYPE_HSV = 7
    TYPE_Lab = 1
    TYPE_Luv = 2
    TYPE_RGB = 5
    TYPE_XYZ = 0
    TYPE_YCbCr = 3
    TYPE_Yxy = 4
    
    def __init__(self) -> None: ...
    
    def fromCIEXYZ(self, t: typing.List[float]) -> typing.List[float]: ...
    
    def fromRGB(self, t: typing.List[float]) -> typing.List[float]: ...
    
    def getMaxValue(self, i: int) -> float: ...
    
    def getMinValue(self, i: int) -> float: ...
    
    def toCIEXYZ(self, t: typing.List[float]) -> typing.List[float]: ...
    
    def toRGB(self, t: typing.List[float]) -> typing.List[float]: ...
    
    
class HSLColorUtil:
    HUE_INDEX = 0
    LUMINANCE_INDEX = 2
    SATURATION_INDEX = 1
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def convertHSLtoRGB(f: float, f2: float, f3: float) -> java.awt.Color: ...
    
    @staticmethod
    def convertRGBtoHSL(j: java.awt.Color) -> typing.List[float]: ...
    
    @staticmethod
    def getLighterColor(t: typing.List[float], f: float) -> java.awt.Color: ...
    
    
class HashTreeModel(javax.swing.tree.TreeModel):
    pass
    
class ImageBorder(javax.swing.border.AbstractBorder):
    def __init__(self) -> None: ...
    
    def getBorderInsets(self, j: java.awt.Component) -> java.awt.Insets: ...
    
    def isBorderOpaque(self) -> bool: ...
    
    def paintBorder(self, j: java.awt.Component, j2: java.awt.Graphics, i: int, i2: int, i3: int, i4: int) -> None: ...
    
    def setImages(self, j: java.awt.Image, j2: java.awt.Image, j3: java.awt.Image, j4: java.awt.Image, j5: java.awt.Image, j6: java.awt.Image, j7: java.awt.Image, j8: java.awt.Image) -> None: ...
    
    
class ImagePanel(javax.swing.JPanel):
    pass
    
class JCurrencyField(javax.swing.JTextField):
    pass
    
class JDateField(javax.swing.JTextField, 'java.awt.event.KeyListener'):
    pass
    
class JUnderlineLabel(javax.swing.JLabel):
    pass
    
class JLinkLabel(JUnderlineLabel, 'java.awt.event.MouseListener'):
    pass
    
class JLinkListener:
    def __init__(self) -> None: ...
    
    def linkActivated(self, o: object, j: 'java.awt.event.InputEvent') -> None: ...
    
    
class JRateField(javax.swing.JTextField):
    pass
    
class JTextPanel(javax.swing.JPanel):
    def __init__(self, title: str) -> None: ...
    
    
class JToolbarButton(javax.swing.AbstractButton):
    pass
    
class ListReorderingHandler(javax.swing.TransferHandler):
    COPY = 1
    COPY_OR_MOVE = 3
    LINK = 1073741824
    MOVE = 2
    NONE = 0
    
    def __init__(self) -> None: ...
    
    def canImport(self, s: str) -> bool: ...
    
    @staticmethod
    def enableDragToReorder(j: javax.swing.JList) -> None: ...
    
    def getSourceActions(self, j: javax.swing.JComponent) -> int: ...
    
    def importData(self, s: str) -> bool: ...
    
    
class NeedToUpgradeWindow(javax.swing.JDialog, 'java.awt.event.ActionListener'):
    pass
    
class PaperBorder(ImageBorder):
    def __init__(self, b: bool, j: java.awt.Component) -> None: ...
    
    @staticmethod
    def getBorderImage(b: bool, s: str, j: java.awt.Component) -> java.awt.Image: ...
    
    
class QuickSearchField(javax.swing.JTextField):
    pass
    
class ReorderableTable:
    def __init__(self) -> None: ...
    
    def reorder(self, i: int, i2: int) -> None: ...
    
    
class ResizingTextArea(javax.swing.JTextArea):
    pass
    
class ShadowBorder(javax.swing.border.AbstractBorder):
    def __init__(self) -> None: ...
    
    def getBorderInsets(self, j: java.awt.Component) -> java.awt.Insets: ...
    
    def isBorderOpaque(self) -> bool: ...
    
    @staticmethod
    def main(t: typing.List[str]) -> None: ...
    
    def paintBorder(self, j: java.awt.Component, j2: java.awt.Graphics, i: int, i2: int, i3: int, i4: int) -> None: ...
    
    
class SlidePanel(javax.swing.JPanel):
    pass
    
class SplashWindow(java.awt.Window):
    pass
    
class SwingUtil:
    hudBorderColor = 'java.awt.Color[r=255,g=255,b=255]'
    hudBorderStroke = 'java.awt.BasicStroke'
    hudFGColor = 'java.awt.Color[r=255,g=255,b=255]'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def addField(i: int, i2: int, j: java.util.ResourceBundle, j2: java.awt.Container, s: str, j3: java.awt.Component) -> None: ...
    
    @staticmethod
    def fadeIn(c: com.moneydance.apps.md.view.gui.SecondaryDialog, i: int) -> None: ...
    
    @staticmethod
    def fadeOut(j: java.awt.Window, i: int) -> None: ...
    
    @staticmethod
    def getOpacity(j: java.awt.Window) -> float: ...
    
    @staticmethod
    def getRootPane(j: java.awt.Container) -> javax.swing.JRootPane: ...
    
    @staticmethod
    def setOpacity(j: java.awt.Window, f: float) -> None: ...
    
    
class TIKScrollBarUI(javax.swing.plaf.basic.BasicScrollBarUI):
    BOTTOM = 3
    CENTER = 0
    EAST = 3
    HORIZONTAL = 0
    LEADING = 10
    LEFT = 2
    NEXT = 12
    NORTH = 1
    NORTH_EAST = 2
    NORTH_WEST = 8
    PREVIOUS = 13
    RIGHT = 4
    SOUTH = 5
    SOUTH_EAST = 4
    SOUTH_WEST = 6
    THUMB_SIZE = 8
    TOP = 1
    TRAILING = 11
    VERTICAL = 1
    WEST = 7
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def addMouseListenerToSubviews(j: java.awt.Container, j2: 'java.awt.event.MouseAdapter') -> None: ...
    
    @staticmethod
    def createUI(j: javax.swing.JComponent) -> javax.swing.plaf.ComponentUI: ...
    
    def getPreferredSize(self, j: javax.swing.JComponent) -> java.awt.Dimension: ...
    
    def getTrackColor(self) -> java.awt.Color: ...
    
    @staticmethod
    def registerViewForDisappearingThumbs(j: javax.swing.JScrollPane, j2: javax.swing.JComponent, j3: java.awt.Color) -> None: ...
    
    def setTrackColor(self, j: java.awt.Color) -> None: ...
    
    def setVisible(self, b: bool) -> None: ...
    
    def setupMouseListenerToAutoHideScrollBar(self, j: javax.swing.JComponent, j2: javax.swing.JScrollPane) -> None: ...
    
    
class TableRowTransferHandler(javax.swing.TransferHandler):
    COPY = 1
    COPY_OR_MOVE = 3
    LINK = 1073741824
    MOVE = 2
    NONE = 0
    
    def __init__(self, j: javax.swing.JTable) -> None: ...
    
    def canImport(self, s: str) -> bool: ...
    
    def createTransferable(self, j: javax.swing.JComponent) -> java.awt.datatransfer.Transferable: ...
    
    def getSourceActions(self, j: javax.swing.JComponent) -> int: ...
    
    def importData(self, s: str) -> bool: ...
    
    
class ThermometerGraph(javax.swing.JComponent, java.awt.ItemSelectable):
    pass
    
