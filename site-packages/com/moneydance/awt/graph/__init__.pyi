import typing
import com.infinitekind.moneydance.model
import java.awt
import java.lang
import java.text
import java.util
import javax.swing


class BalloonHelp:
    ROUNDED = 1
    SQUARED = 0
    
    def __init__(self, graphDataSet: 'GraphDataSet', j: java.awt.Polygon, j2: java.awt.Dimension) -> None: ...
    
    def drawBalloon(self, j: java.awt.Graphics, i: int, i2: int) -> None: ...
    
    def getBallonSize(self, j: java.awt.Graphics) -> java.awt.Dimension: ...
    
    def handleMouseInside(self, j: java.awt.Graphics, i: int, i2: int) -> None: ...
    
    def isMouseInside(self, j: java.awt.Point) -> bool: ...
    
    
class BarGraphData:
    def __init__(self) -> None: ...
    
    def getDataSetCount(self) -> int: ...
    
    def getDataSetDetails(self, i: int) -> typing.List[str]: ...
    
    def getDataSetLabel(self, i: int) -> str: ...
    
    def getDataSetReference(self, i: int) -> object: ...
    
    def getDataSetValue(self, i: int, i2: int) -> float: ...
    
    def getIntervalCount(self) -> int: ...
    
    def getIntervalLabel(self, i: int) -> str: ...
    
    def getLabelForValue(self, f: float) -> str: ...
    
    def getMaxValue(self) -> float: ...
    
    def getMinValue(self) -> float: ...
    
    def getTickValues(self, i: int, i2: int) -> typing.List[float]: ...
    
    def getValueType(self) -> int: ...
    
    def setValueLabeler(self, valueLabeler: 'ValueLabeler') -> None: ...
    
    def setValueType(self, i: int) -> None: ...
    
    
class GraphDataSet:
    def __init__(self, s: str, t: typing.List[str], o: object, j: java.awt.Color) -> None: ...
    
    def getColor(self) -> java.awt.Color: ...
    
    def getDetails(self) -> typing.List[str]: ...
    
    def getName(self) -> str: ...
    
    def getReference(self) -> object: ...
    
    @staticmethod
    def resetColors() -> None: ...
    
    def toString(self) -> str: ...
    
    
class BarGraphDataSet(GraphDataSet):
    def __init__(self, s: str, t: typing.List[str], o: object, t2: typing.List[float], j: java.awt.Color) -> None: ...
    
    def getNumIntervals(self) -> int: ...
    
    def getSumOfValues(self) -> float: ...
    
    def getValue(self, i: int) -> float: ...
    
    
class GraphModel:
    def __init__(self) -> None: ...
    
    def getDataSet(self, i: int) -> GraphDataSet: ...
    
    def getDataSetCount(self) -> int: ...
    
    def getLabelForValue(self, f: float) -> str: ...
    
    def getTitle(self) -> str: ...
    
    def getValueType(self) -> int: ...
    
    def isThreeD(self) -> bool: ...
    
    def setThreeD(self, b: bool) -> None: ...
    
    def setTitle(self, s: str) -> None: ...
    
    def setValueLabeler(self, valueLabeler: 'ValueLabeler') -> None: ...
    
    def setValueType(self, i: int) -> None: ...
    
    
class BarGraphModel(GraphModel):
    def __init__(self, t: typing.List[BarGraphDataSet], t2: typing.List[str]) -> None: ...
    
    def getDataSet(self, i: int) -> GraphDataSet: ...
    
    def getDataSetCount(self) -> int: ...
    
    def getDataSetValue(self, i: int, i2: int) -> float: ...
    
    def getIntervalCount(self) -> int: ...
    
    def getIntervalLabel(self, i: int) -> str: ...
    
    def getMaxValue(self) -> float: ...
    
    def getMinValue(self) -> float: ...
    
    def getTickValues(self, i: int, i2: int) -> typing.List[float]: ...
    
    
class ColorEnumerator(java.util.Enumeration):
    colors = 'array(java.awt.Color, [java.awt.Color[r=38,g=139,b=210], java.awt.Color[r=220,g=50,b=47], java.awt.Color[r=108,g=113,b=196], java.awt.Color[r=181,g=137,b=0], java.awt.Color[r=133,g=153,b=0], java.awt.Color[r=203,g=75,b=22], java.awt.Color[r=37,g=37,b=37], java.awt.Color[r=255,g=204,b=102], java.awt.Color[r=0,g=153,b=153], java.awt.Color[r=0,g=0,b=153], java.awt.Color[r=102,g=0,b=102], java.awt.Color[r=153,g=0,b=0], java.awt.Color[r=102,g=102,b=0], java.awt.Color[r=0,g=102,b=0], java.awt.Color[r=0,g=102,b=102], java.awt.Color[r=102,g=204,b=255], java.awt.Color[r=153,g=153,b=255], java.awt.Color[r=0,g=0,b=204], java.awt.Color[r=204,g=102,b=255], java.awt.Color[r=255,g=102,b=102], java.awt.Color[r=255,g=153,b=102], java.awt.Color[r=255,g=255,b=153], java.awt.Color[r=153,g=255,b=153]])'
    
    def __init__(self) -> None: ...
    
    def hasMoreElements(self) -> bool: ...
    
    def nextColor(self) -> java.awt.Color: ...
    
    def nextElement(self) -> object: ...
    
    def reset(self) -> None: ...
    
    
class DataSet:
    CURRENCY_TYPE = 2
    DATE_TIME_TYPE = 7
    DATE_TYPE = 1
    DAY_INTERVAL = -1
    FLOAT_TYPE = 3
    INT_TYPE = 4
    MONTH_INTERVAL = -3
    OTHER_TYPE = 6
    TIME_TYPE = 5
    WEEK_INTERVAL = -2
    YEAR_INTERVAL = -4
    dateFormat = 'java.text.SimpleDateFormat'
    dateTimeFormat = 'java.text.SimpleDateFormat'
    timeFormat = 'java.text.SimpleDateFormat'
    xvalues: typing.List[java.lang.Number]
    yvalues: typing.List[java.lang.Number]
    
    def __init__(self, s: str, i: int, i2: int, i3: int) -> None: ...
    
    def formatValue(self, j: java.lang.Number, i: int) -> str: ...
    
    @staticmethod
    def getBarTicks(j: java.lang.Number, i: int, i2: int) -> typing.List[java.lang.Number]: ...
    
    def getDescription(self) -> typing.List[str]: ...
    
    def getMaxXValue(self) -> java.lang.Number: ...
    
    def getMaxYValue(self) -> java.lang.Number: ...
    
    def getMinXValue(self) -> java.lang.Number: ...
    
    def getMinYValue(self) -> java.lang.Number: ...
    
    def getName(self) -> str: ...
    
    @staticmethod
    def getNumIntervals(i: int, j: java.lang.Number, j2: java.lang.Number) -> int: ...
    
    def getNumValues(self) -> int: ...
    
    def getShortDescription(self) -> str: ...
    
    @staticmethod
    def getTicks(j: java.lang.Number, j2: java.lang.Number, i: int, i2: int, i3: int) -> typing.List[java.lang.Number]: ...
    
    def getXType(self) -> int: ...
    
    def getYType(self) -> int: ...
    
    def setCommaChar(self, s: str) -> None: ...
    
    def setCurrency(self, c: com.infinitekind.moneydance.model.CurrencyType) -> None: ...
    
    def setDecimalChar(self, s: str) -> None: ...
    
    def setDescription(self, t: typing.List[str]) -> None: ...
    
    def setXType(self, i: int) -> None: ...
    
    def setYType(self, i: int) -> None: ...
    
    def sortAscending(self) -> None: ...
    
    def sortDescending(self) -> None: ...
    
    
class DataSetUtilities:
    TYPE_DATE = -201
    TYPE_FLOAT = -203
    TYPE_INT = -204
    TYPE_TIME = -202
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def getDateTicks(i: int, i2: int, i3: int, i4: int) -> typing.List[float]: ...
    
    @staticmethod
    def getIntTicks(i: int, i2: int, i3: int, i4: int) -> typing.List[float]: ...
    
    @staticmethod
    def getLabelForValue(f: float, i: int) -> str: ...
    
    @staticmethod
    def getMaxValue(t: typing.List[float]) -> float: ...
    
    @staticmethod
    def getMinValue(t: typing.List[float]) -> float: ...
    
    @staticmethod
    def getOtherTicks(f: float, f2: float, i: int, i2: int) -> typing.List[float]: ...
    
    @staticmethod
    def getTickValues(i: int, i2: int, f: float, f2: float, i3: int) -> typing.List[float]: ...
    
    @staticmethod
    def getTimeTicks(i: int, i2: int, i3: int, i4: int) -> typing.List[float]: ...
    
    
class GraphDataSource:
    ALL = 5
    DAY = 1
    MONTH = 3
    NONE = 6
    WEEK = 2
    YEAR = 4
    
    def __init__(self) -> None: ...
    
    def getAvailableDataSetTypes(self) -> typing.List[str]: ...
    
    def getAvailableDataSets(self, s: str) -> typing.List[str]: ...
    
    def getDataSetByDateRange(self, s: str, s2: str, j: java.util.Date, j2: java.util.Date, s3: str) -> DataSet: ...
    
    def getDefaultDateFormat(self) -> java.text.SimpleDateFormat: ...
    
    def getPossibleGraphValues(self) -> typing.List[str]: ...
    
    
class GraphPanel(javax.swing.JComponent, 'java.awt.event.MouseMotionListener', 'java.awt.event.MouseListener'):
    pass
    
class JGraph(javax.swing.JComponent, 'java.awt.event.MouseMotionListener', 'java.awt.event.MouseListener'):
    pass
    
class JBarGraph(JGraph):
    pass
    
class JLineGraph(JGraph):
    pass
    
class JPieGraph(JGraph):
    pass
    
class KeyItem:
    def __init__(self, graphDataSet: GraphDataSet, j: java.awt.Color) -> None: ...
    
    def getColor(self) -> java.awt.Color: ...
    
    def getDataSet(self) -> GraphDataSet: ...
    
    def getLabel(self) -> str: ...
    
    
class KeyPanel(javax.swing.JComponent):
    pass
    
class LineGraphModel(GraphModel):
    def __init__(self, t: typing.List['XYGraphDataSet']) -> None: ...
    
    def getDataSet(self, i: int) -> GraphDataSet: ...
    
    def getDataSetCount(self) -> int: ...
    
    def getDataSetXValue(self, i: int, i2: int) -> float: ...
    
    def getDataSetYValue(self, i: int, i2: int) -> float: ...
    
    def getLabelForXAxis(self, f: float) -> str: ...
    
    def getMaxXValue(self) -> float: ...
    
    def getMaxYValue(self) -> float: ...
    
    def getMinXValue(self) -> float: ...
    
    def getMinYValue(self) -> float: ...
    
    def getXAxisType(self) -> int: ...
    
    def getXTickValues(self) -> typing.List[float]: ...
    
    def getYTickValues(self, i: int, i2: int) -> typing.List[float]: ...
    
    def setShowZero(self, b: bool) -> None: ...
    
    def setXAxisLabeler(self, valueLabeler: 'ValueLabeler') -> None: ...
    
    def setXAxisType(self, i: int) -> None: ...
    
    def setXTickValues(self, t: typing.List[float]) -> None: ...
    
    
class PieGraphDataSet(GraphDataSet):
    def __init__(self, s: str, t: typing.List[str], o: object, f: float, j: java.awt.Color) -> None: ...
    
    def getNumIntervals(self) -> int: ...
    
    def getValue(self, i: int) -> float: ...
    
    
class PieGraphModel(GraphModel):
    def __init__(self, t: typing.List[PieGraphDataSet]) -> None: ...
    
    def getDataSet(self, i: int) -> GraphDataSet: ...
    
    def getDataSetCount(self) -> int: ...
    
    def getDataSetValue(self, i: int, i2: int) -> float: ...
    
    
class ValueLabeler:
    def __init__(self) -> None: ...
    
    def getLabelForValue(self, f: float, i: int) -> str: ...
    
    
class XYGraphDataSet(GraphDataSet):
    def __init__(self, s: str, t: typing.List[str], o: object, t2: typing.List[float], t3: typing.List[float], j: java.awt.Color) -> None: ...
    
    def getNumValues(self) -> int: ...
    
    
