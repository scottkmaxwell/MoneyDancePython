import typing
import com.infinitekind.util
import com.moneydance.apps.md.controller
import com.moneydance.apps.md.view.gui


class CurrentVersionStatus:
    def __init__(self) -> None: ...
    
    def getAvailableVersion(self) -> 'VersionInfo': ...
    
    def getChangelogListHTML(self) -> str: ...
    
    def isDiscountUpgradeToLatest(self) -> bool: ...
    
    def isFreeUpgradeToLatest(self) -> bool: ...
    
    def isUpgradeStatusKnown(self) -> bool: ...
    
    def needsAppUpdate(self) -> bool: ...
    
    def replaceVersionStrings(self, s: str) -> str: ...
    
    
class UpdateNotificationWindow(com.moneydance.apps.md.view.gui.SecondaryDialog):
    pass
    
class Updater:
    currentBuild: int
    
    def __init__(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> None: ...
    
    def checkForUpdatesNow(self) -> None: ...
    
    def performStartupCheck(self) -> None: ...
    
    
    class UpdateOption:
        DONT_CHECK = "Don't check for updates"
        PREVIEWS = 'Preview/Beta Updates'
        STABLE = 'Stable Updates Only'
        UNKNOWN = ''
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def optionFromPreferences(c: com.moneydance.apps.md.controller.UserPreferences) -> str: ...
        
        def saveToPreferences(self, c: com.moneydance.apps.md.controller.UserPreferences) -> None: ...
        
        def toString(self) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class VersionInfo:
    def __init__(self, c: com.infinitekind.util.StreamTable) -> None: ...
    
    def extensionUpdateIsAvailable(self, i: int) -> bool: ...
    
    def getChangeList(self) -> typing.List[str]: ...
    
    def getDescriptionHTML(self) -> str: ...
    
    def getFallbackURL(self) -> str: ...
    
    def getFreeUpgradeLicenses(self) -> typing.List[str]: ...
    
    def getKeyVersion(self) -> int: ...
    
    def getLatestBuild(self) -> int: ...
    
    def getLatestExtensionBuild(self) -> int: ...
    
    def getLatestVersion(self) -> str: ...
    
    def getLicenseID(self) -> str: ...
    
    def needsExtensionUpdate(self, i: int) -> bool: ...
    
    def needsUpdateFromBuild(self, i: int) -> bool: ...
    
    
    class VersionUpdateInfo:
        def __init__(self) -> None: ...
        
        def getBuild(self) -> int: ...
        
        def getChangesHTML(self) -> str: ...
        
        def getDateInt(self) -> int: ...
        
        def getLabel(self) -> str: ...
        
        
    
