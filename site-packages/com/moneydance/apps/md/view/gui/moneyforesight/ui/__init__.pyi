import typing
import javax.swing
import javax.swing.table

T = typing.TypeVar("T")


class AbstractListCellRenderer(javax.swing.DefaultListCellRenderer):
    pass
    
class ClickableLabelFactory:
    def __init__(self) -> None: ...
    
    @staticmethod
    def createLabel(j: javax.swing.Action, s: str) -> javax.swing.JLabel: ...
    
    
class ColorTableCellEditor(javax.swing.AbstractCellEditor, javax.swing.table.TableCellEditor):
    pass
    
class ColorTableCellRenderer(javax.swing.table.DefaultTableCellRenderer):
    pass
    
class Colors:
    BLUE_FOR_REMINDER_REVIEW_ACTUAL = 'java.awt.Color[r=0,g=0,b=255]'
    CHART_TOTAL_PLOT_LINE = 'java.awt.Color[r=0,g=255,b=0]'
    DARK_GREEN = 'java.awt.Color[r=54,g=146,b=70]'
    DARK_RED = 'java.awt.Color[r=241,g=62,b=23]'
    DEFAULT_CHART_COLORS = '[java.awt.Color[r=51,g=102,b=204], java.awt.Color[r=220,g=57,b=18], java.awt.Color[r=255,g=153,b=0], java.awt.Color[r=16,g=150,b=24], java.awt.Color[r=153,g=0,b=153], java.awt.Color[r=59,g=62,b=172], java.awt.Color[r=0,g=153,b=198], java.awt.Color[r=221,g=68,b=119], java.awt.Color[r=102,g=170,b=0], java.awt.Color[r=184,g=46,b=46], java.awt.Color[r=49,g=99,b=149], java.awt.Color[r=153,g=68,b=153], java.awt.Color[r=34,g=170,b=153], java.awt.Color[r=170,g=170,b=17], java.awt.Color[r=102,g=51,b=204], java.awt.Color[r=230,g=115,b=0], java.awt.Color[r=139,g=7,b=7], java.awt.Color[r=50,g=146,b=98], java.awt.Color[r=85,g=116,b=166], java.awt.Color[r=59,g=62,b=172]]'
    GREEN_FOR_INCOME = 'java.awt.Color[r=192,g=232,b=143]'
    GREY_FOR_REMINDER_REVIEW_REMINDERS = 'java.awt.Color[r=192,g=192,b=192]'
    RED_FOR_EXPENSE = 'java.awt.Color[r=244,g=130,b=130]'
    
    def __init__(self) -> None: ...
    
    
class SettingsLabelFactory:
    def __init__(self) -> None: ...
    
    @staticmethod
    def createSettingsLabel(j: javax.swing.Action) -> javax.swing.JLabel: ...
    
    
class ShuttleList:
    def __init__(self, t: typing.Any, t2: typing.Any) -> None: ...
    
    def getDisplayableComponent(self) -> javax.swing.JComponent: ...
    
    def requestFocusForSelectedList(self) -> None: ...
    
    def selectFirstLeftIfNoSelection(self) -> bool: ...
    
    def setLeftSelectedIndex(self, i: int) -> None: ...
    
    def setLeftSelectedIndexOrLast(self, i: int) -> None: ...
    
    def setRightSelectedIndex(self, i: int) -> None: ...
    
    def setRightSelectedIndexOrLast(self, i: int) -> None: ...
    
    
class TableColumnDescriptor:
    def __init__(self) -> None: ...
    
    def getCellEditor(self) -> javax.swing.table.TableCellEditor: ...
    
    def getCellRenderer(self) -> javax.swing.table.TableCellRenderer: ...
    
    def getColumnClass(self) -> typing.Any: ...
    
    def getColumnComparator(self) -> typing.Callable[['T', 'T'], int]: ...
    
    def getColumnHeaderCellEditor(self) -> javax.swing.table.TableCellEditor: ...
    
    def getColumnHeaderRenderer(self) -> javax.swing.table.TableCellRenderer: ...
    
    def getColumnLabel(self) -> str: ...
    
    def getPreferredColumnWidth(self) -> int: ...
    
    def getPropertyName(self) -> str: ...
    
    def isEditable(self) -> bool: ...
    
    
    class Builder:
        def __init__(self, s: str, s2: str) -> None: ...
        
        def build(self) -> 'TableColumnDescriptor': ...
        
        def cellEditor(self, j: javax.swing.table.TableCellEditor) -> str: ...
        
        def cellRenderer(self, j: javax.swing.table.TableCellRenderer) -> str: ...
        
        def columnClass(self, t: typing.Any) -> str: ...
        
        def comparator(self, t: typing.Callable[['T', 'T'], int]) -> str: ...
        
        def editable(self, b: bool) -> str: ...
        
        def headerCellEditor(self, j: javax.swing.table.TableCellEditor) -> str: ...
        
        def headerRenderer(self, j: javax.swing.table.TableCellRenderer) -> str: ...
        
        def preferredColumnWidth(self, i: int) -> str: ...
        
        
    
class TableColumnIdentity:
    def __init__(self, i: int, s: str, s2: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getIndex(self) -> int: ...
    
    def getLabel(self) -> str: ...
    
    def getName(self) -> str: ...
    
    @staticmethod
    def getTableColumnIdentity(t: typing.List['TableColumnIdentity'], s: str) -> 'TableColumnIdentity': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class TableFormatDefinition:
    def __init__(self, t: typing.List[TableColumnDescriptor], t2: typing.Dict[typing.Any,javax.swing.table.TableCellRenderer]) -> None: ...
    
    def configureTableRenderersAndEditors(self, j: javax.swing.JTable) -> None: ...
    
    def getColumnClass(self, i: int) -> typing.Any: ...
    
    def getColumnComparator(self, i: int) -> typing.Callable[['T', 'T'], int]: ...
    
    def getColumnCount(self) -> int: ...
    
    def getColumnIdentities(self) -> typing.List[TableColumnIdentity]: ...
    
    def getColumnLabel(self, i: int) -> str: ...
    
    def getPropertyNameForColumn(self, i: int) -> str: ...
    
    def isColumnHidden(self, i: int) -> bool: ...
    
    
class TableFormatDefinitionBuilder:
    def __init__(self) -> None: ...
    
    def addColumn(self, tableColumnDescriptor: TableColumnDescriptor) -> 'TableFormatDefinitionBuilder': ...
    
    def addDefaultRenderer(self, t: typing.Any, j: javax.swing.table.TableCellRenderer) -> 'TableFormatDefinitionBuilder': ...
    
    def build(self) -> TableFormatDefinition: ...
    
    
class UiComponentUtils:
    def __init__(self) -> None: ...
    
    @staticmethod
    def bindCloseActionToEscForPane(j: javax.swing.Action, j2: javax.swing.JLayeredPane) -> None: ...
    
    
