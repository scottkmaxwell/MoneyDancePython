import typing
import account
import com.infinitekind.moneydance.model
import forecast.table
import java.lang
import java.time
import java.util
import org.jfree.data.time
import transactions


class AccountTimeSeries(org.jfree.data.time.TimeSeries):
    pass
    
class DataSetManager:
    def __init__(self, a: account.AccountHelper) -> None: ...
    
    def addResetListener(self, s: str) -> None: ...
    
    def affectsCurrentDataSet(self, c: com.infinitekind.moneydance.model.ParentTxn) -> bool: ...
    
    def clear(self) -> None: ...
    
    def forEachTimeSeries(self, t: typing.Any) -> None: ...
    
    def getDataSet(self) -> org.jfree.data.time.TimeSeriesCollection: ...
    
    def getForecastTransactionsTableModel(self) -> forecast.table.ForecastTransactionsTableModel: ...
    
    def getSeriesIndexByAccountUUID(self) -> typing.Dict[str,int]: ...
    
    def getSeriesIndexForAccount(self, s: str) -> java.util.OptionalInt: ...
    
    def isDisplayingAccount(self, c: com.infinitekind.moneydance.model.Account) -> bool: ...
    
    def isShowingTotalPlot(self) -> bool: ...
    
    def refresh(self, t: typing.Sequence[com.infinitekind.moneydance.model.Account], futurePeriod: 'FuturePeriod', c: com.infinitekind.moneydance.model.ReminderSet, c2: com.infinitekind.moneydance.model.TransactionSet, c3: com.infinitekind.moneydance.model.CurrencyType, b: bool, b2: bool, s: str) -> None: ...
    
    
    class ForecastCalculationCallback:
        def __init__(self) -> None: ...
        
        def done(self, t: transactions.TransactionSumResult) -> None: ...
        
        
    class ResetListener:
        def __init__(self) -> None: ...
        
        def onReset(self) -> None: ...
        
        
    
class DateUtil:
    def __init__(self) -> None: ...
    
    @staticmethod
    def getCalendarFor(j: java.time.LocalDate) -> java.util.Calendar: ...
    
    @staticmethod
    def getDateFor(j: java.time.LocalDate) -> java.util.Date: ...
    
    @staticmethod
    def getDateInt(j: java.time.LocalDate) -> int: ...
    
    @staticmethod
    def getDateIntForToday() -> int: ...
    
    @staticmethod
    def getDayFor(j: java.time.LocalDate) -> org.jfree.data.time.Day: ...
    
    @staticmethod
    def getLocalDateFor(i: int) -> typing.Any: ...
    
    
class FuturePeriod:
    ONE_DAY = 'FuturePeriod: 1 DAYS'
    ONE_MONTH = 'FuturePeriod: 1 MONTHS'
    THREE_MONTHS = 'FuturePeriod: 3 MONTHS'
    
    def __init__(self, i: int, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFutureDate(self) -> java.time.LocalDate: ...
    
    def getJavaPeriod(self) -> java.time.Period: ...
    
    def getPastDate(self) -> java.time.LocalDate: ...
    
    def getQuantity(self) -> int: ...
    
    def getUnit(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
    class Unit:
        DAYS = 'DAYS'
        MONTHS = 'MONTHS'
        WEEKS = 'WEEKS'
        YEARS = 'YEARS'
        
        def __init__(self) -> None: ...
        
        def toStringPlural(self) -> str: ...
        
        def toStringSingular(self) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class MoneyForesightRuntimeException(java.lang.RuntimeException):
    def __init__(self, s: str) -> None: ...
    
    
class PreferencesKey:
    PREFS_KEY_FORECASTER_FAVOURITE_INFO_PREFIX = u'forecaster.favourites.'
    PREFS_KEY_FORECASTER_SAVED_FORECASTS_COUNT = u'forecaster.favourites.count'
    PREFS_KEY_INCLUDE_OVERDUE_REMINDERS = u'moneyforesight.includeOverdueReminders'
    PREFS_KEY_INCLUDE_OVERDUE_REMINDERS_HOME_PAGE = u'moneyforesight.includeOverdueReminders.homePage'
    PREFS_KEY_MARK_ZERO_BALANCE = u'moneyforesight.markZeroBalance'
    PREFS_KEY_MARK_ZERO_BALANCE_HOME_PAGE = u'moneyforesight.markZeroBalance.homePage'
    PREFS_KEY_SHOW_ACCOUNT_MARKERS = u'moneyforesight.showAccountMarkers'
    PREFS_KEY_SHOW_ACCOUNT_MARKERS_HOME_PAGE = u'moneyforesight.showAccountMarkers.homePage'
    PREFS_KEY_SHOW_TOTAL = u'moneyforesight.showTotal'
    PREFS_KEY_SHOW_TOTAL_HOME_PAGE = u'moneyforesight.showTotal.homePage'
    
    def __init__(self) -> None: ...
    
    
class SavedForecastInfo(java.lang.Comparable):
    IMPLICIT_SAVED_FORECAST_NAME = u'last_visible_forecast'
    
    def __init__(self, j: java.util.UUID, s: str, t: typing.Sequence[com.infinitekind.moneydance.model.Account], futurePeriod: FuturePeriod, b: bool) -> None: ...
    
    def compareTo(self, savedForecastInfo: 'SavedForecastInfo') -> int: ...
    
    @staticmethod
    def createFromMemento(savedForecastInfoMemento: 'SavedForecastInfoMemento', c: com.infinitekind.moneydance.model.AccountBook) -> 'SavedForecastInfo': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccountIds(self) -> typing.Set[str]: ...
    
    def getAccounts(self) -> typing.Set[com.infinitekind.moneydance.model.Account]: ...
    
    def getFuturePeriod(self) -> FuturePeriod: ...
    
    def getId(self) -> java.util.UUID: ...
    
    def getMemento(self) -> 'SavedForecastInfoMemento': ...
    
    def getName(self) -> str: ...
    
    def hasSameIdAs(self, savedForecastInfo: 'SavedForecastInfo') -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def isExplicit(self) -> bool: ...
    
    def isImplicit(self) -> bool: ...
    
    
class SavedForecastInfoMemento:
    def __init__(self, j: java.util.UUID, s: str, t: typing.Set[str], futurePeriod: FuturePeriod, b: bool) -> None: ...
    
    def getAccountUUIDs(self) -> typing.Set[str]: ...
    
    def getFuturePeriod(self) -> FuturePeriod: ...
    
    def getId(self) -> java.util.UUID: ...
    
    def getName(self) -> str: ...
    
    def isImplicit(self) -> bool: ...
    
    def isNotAnUnmigratedLastVisibleForecast(self) -> bool: ...
    
    
