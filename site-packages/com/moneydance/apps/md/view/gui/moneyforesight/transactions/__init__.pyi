import typing
import com.infinitekind.moneydance.model


class AmountAndCount:
    ZERO = 'com.moneydance.apps.md.view.gui.moneyforesight.transactions.AmountAndCount'
    
    def __init__(self, i: int, i2: int) -> None: ...
    
    def getAmount(self) -> int: ...
    
    def getCount(self) -> int: ...
    
    
class AmountAndCountAccumulator:
    def __init__(self) -> None: ...
    
    def add(self, i: int) -> None: ...
    
    def result(self) -> AmountAndCount: ...
    
    
class TransactionSumAccumulator:
    def __init__(self) -> None: ...
    
    def accept(self, c: com.infinitekind.moneydance.model.Txn) -> None: ...
    
    def clear(self) -> None: ...
    
    def getResult(self) -> 'TransactionSumResult': ...
    
    
class TransactionSumResult:
    def __init__(self, t: typing.Dict[str,AmountAndCount], i: int, i2: int) -> None: ...
    
    def getAbsoluteNegativeAmountFormatted(self, c: com.infinitekind.moneydance.model.CurrencyType) -> str: ...
    
    def getAbsolutePositiveAmountFormatted(self, c: com.infinitekind.moneydance.model.CurrencyType) -> str: ...
    
    def getAmountAndCountBy(self, s: str) -> AmountAndCount: ...
    
    def getDifferenceAmountFormatted(self, c: com.infinitekind.moneydance.model.CurrencyType) -> str: ...
    
    def getDifferenceLong(self) -> int: ...
    
    def getNegativeAmountTotal(self) -> int: ...
    
    def getPositiveAmountTotal(self) -> int: ...
    
    def getSumByAccountId(self) -> typing.Dict[str,AmountAndCount]: ...
    
    
