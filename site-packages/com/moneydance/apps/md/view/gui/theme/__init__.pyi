import typing
import com.moneydance.apps.md.view.gui
import java.awt
import java.io
import java.net
import javax.swing
import javax.swing.event


class ThemeInfo:
    BRANDED_THEME = None
    DEFAULT_THEME = 'Default'
    DEFAULT_THEME_ID = u'default'
    customTheme = None
    customThemeFile = '/Users/smaxwell/Library/Containers/com.infinitekind.MoneydanceOSX/Data/Library/Application Support/Moneydance/custom_theme.properties'
    
    def __init__(self) -> None: ...
    
    def applyTheme(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> None: ...
    
    def copyIntoCustomTheme(self) -> 'GenericThemeInfo': ...
    
    @staticmethod
    def dumpAllUIProperties() -> None: ...
    
    @staticmethod
    def getAllThemes() -> typing.List['ThemeInfo']: ...
    
    def getColorForString(self, s: str) -> java.awt.Color: ...
    
    def getColorMap(self) -> typing.Dict[str,java.awt.Color]: ...
    
    def getThemeID(self) -> str: ...
    
    def isCustomizable(self) -> bool: ...
    
    def registerWindow(self, j: java.awt.Window) -> None: ...
    
    def setThemeName(self, s: str) -> None: ...
    
    def shouldUpdateUIDefaults(self) -> bool: ...
    
    @staticmethod
    def themeForID(c: com.moneydance.apps.md.view.gui.MoneydanceGUI, s: str) -> 'ThemeInfo': ...
    
    def toString(self) -> str: ...
    
    def unregisterWindow(self, j: java.awt.Window) -> None: ...
    
    def updateThemeName(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> None: ...
    
    @staticmethod
    def updateThemeNames(c: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> None: ...
    
    def useSystemLookAndFeel(self) -> bool: ...
    
    
class MacDarkModeThemeInfo(ThemeInfo):
    BRANDED_THEME = None
    DARK_MODE_THEME_ID = u'mac_dark_mode'
    DEFAULT_THEME = 'Default'
    DEFAULT_THEME_ID = u'default'
    customTheme = None
    customThemeFile = '/Users/smaxwell/Library/Containers/com.infinitekind.MoneydanceOSX/Data/Library/Application Support/Moneydance/custom_theme.properties'
    
    def __init__(self) -> None: ...
    
    def applyCustomTheme(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> None: ...
    
    def getColorForString(self, s: str) -> java.awt.Color: ...
    
    def getColorMap(self) -> typing.Dict[str,java.awt.Color]: ...
    
    def shouldUpdateUIDefaults(self) -> bool: ...
    
    
class DarculaThemeInfo(MacDarkModeThemeInfo):
    BRANDED_THEME = None
    DARCULA_THEME_ID = u'darcula'
    DARK_MODE_THEME_ID = u'mac_dark_mode'
    DEFAULT_THEME = 'Default'
    DEFAULT_THEME_ID = u'default'
    customTheme = None
    customThemeFile = '/Users/smaxwell/Library/Containers/com.infinitekind.MoneydanceOSX/Data/Library/Application Support/Moneydance/custom_theme.properties'
    
    def __init__(self) -> None: ...
    
    def applyCustomTheme(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> None: ...
    
    def getColorForString(self, s: str) -> java.awt.Color: ...
    
    def getColorMap(self) -> typing.Dict[str,java.awt.Color]: ...
    
    def shouldUpdateUIDefaults(self) -> bool: ...
    
    
class DefaultThemeInfo(ThemeInfo):
    BRANDED_THEME = None
    DEFAULT_THEME = 'Default'
    DEFAULT_THEME_ID = u'default'
    customTheme = None
    customThemeFile = '/Users/smaxwell/Library/Containers/com.infinitekind.MoneydanceOSX/Data/Library/Application Support/Moneydance/custom_theme.properties'
    
    def __init__(self) -> None: ...
    
    def applyCustomTheme(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> None: ...
    
    def getColorForString(self, s: str) -> java.awt.Color: ...
    
    def getColorMap(self) -> typing.Dict[str,java.awt.Color]: ...
    
    def isCustomizable(self) -> bool: ...
    
    def shouldUpdateUIDefaults(self) -> bool: ...
    
    def useSystemLookAndFeel(self) -> bool: ...
    
    
class EditThemePanel(javax.swing.JPanel):
    pass
    
class GenericThemeInfo(ThemeInfo):
    BRANDED_THEME = None
    DEFAULT_THEME = 'Default'
    DEFAULT_THEME_ID = u'default'
    customTheme = None
    customThemeFile = '/Users/smaxwell/Library/Containers/com.infinitekind.MoneydanceOSX/Data/Library/Application Support/Moneydance/custom_theme.properties'
    
    def __init__(self, s: str, j: java.net.URL) -> None: ...
    
    def applyCustomTheme(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> None: ...
    
    @staticmethod
    def applyThemeFromMap(t: typing.Dict[str,java.awt.Color]) -> None: ...
    
    def getColorForString(self, s: str) -> java.awt.Color: ...
    
    def getColorMap(self) -> typing.Dict[str,java.awt.Color]: ...
    
    def isCustomizable(self) -> bool: ...
    
    def reloadProperties(self) -> None: ...
    
    def setColorForString(self, s: str, j: java.awt.Color) -> None: ...
    
    def writeThemeToFile(self, j: java.io.File) -> None: ...
    
    
class VaquaThemeInfo(ThemeInfo):
    BRANDED_THEME = None
    DEFAULT_THEME = 'Default'
    DEFAULT_THEME_ID = u'default'
    customTheme = None
    customThemeFile = '/Users/smaxwell/Library/Containers/com.infinitekind.MoneydanceOSX/Data/Library/Application Support/Moneydance/custom_theme.properties'
    
    def __init__(self, s: str) -> None: ...
    
    @staticmethod
    def addListener(j: javax.swing.JComponent, j2: javax.swing.event.ChangeListener) -> None: ...
    
    def applyCustomTheme(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> None: ...
    
    @staticmethod
    def dumpSystemColors() -> None: ...
    
    @staticmethod
    def getAutomaticSystemTheme() -> 'VaquaThemeInfo': ...
    
    def getColorForString(self, s: str) -> java.awt.Color: ...
    
    def getColorMap(self) -> typing.Dict[str,java.awt.Color]: ...
    
    @staticmethod
    def getSystemColors() -> typing.Dict[str,java.awt.Color]: ...
    
    def isCustomizable(self) -> bool: ...
    
    @staticmethod
    def isSystemDark() -> bool: ...
    
    @staticmethod
    def isSystemHighContrast() -> bool: ...
    
    def registerWindow(self, j: java.awt.Window) -> None: ...
    
    def shouldUpdateUIDefaults(self) -> bool: ...
    
    def unregisterWindow(self, j: java.awt.Window) -> None: ...
    
    
