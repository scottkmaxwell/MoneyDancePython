import typing
import com.infinitekind.moneydance.model
import com.moneydance.apps.md.view.gui
import com.moneydance.apps.md.view.gui.sidebar
import com.moneydance.apps.md.view.resources
import java.awt
import java.lang
import java.util
import javax.swing
import javax.swing.tree


class SBTreeNode(javax.swing.tree.TreeNode):
    def __init__(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI, s: str) -> None: ...
    
    def children(self) -> java.util.Enumeration: ...
    
    def cleanUp(self) -> None: ...
    
    def compareNode(self, sBTreeNode: 'SBTreeNode') -> int: ...
    
    def getAllowsChildren(self) -> bool: ...
    
    def getChildAt(self, i: int) -> javax.swing.tree.TreeNode: ...
    
    def getChildCount(self) -> int: ...
    
    def getChildSubType(self) -> int: ...
    
    def getChildType(self) -> 'SideBarNodeType': ...
    
    def getDot(self, b: bool) -> javax.swing.Icon: ...
    
    def getDotToolTipText(self) -> str: ...
    
    def getIconPath(self) -> str: ...
    
    def getIconTint(self) -> java.awt.Color: ...
    
    def getIndentDepth(self) -> int: ...
    
    def getIndex(self, j: javax.swing.tree.TreeNode) -> int: ...
    
    def getParent(self) -> javax.swing.tree.TreeNode: ...
    
    def getRightHandText(self) -> str: ...
    
    def getRightHandTextColor(self) -> java.awt.Color: ...
    
    def getSettings(self) -> str: ...
    
    def getSortKey(self) -> str: ...
    
    def getText(self) -> str: ...
    
    def getToolTipText(self) -> str: ...
    
    @staticmethod
    def getURIForReport(c: com.infinitekind.moneydance.model.ReportSpec) -> str: ...
    
    def getURL(self) -> str: ...
    
    def isLeaf(self) -> bool: ...
    
    def nodeWasSelected(self, c: com.moneydance.apps.md.view.gui.sidebar.SideBarComponent, b: bool) -> None: ...
    
    def setHeader(self, headerNode: 'HeaderNode') -> None: ...
    
    def setIndentDepth(self, i: int) -> None: ...
    
    def toString(self) -> str: ...
    
    def update(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> None: ...
    
    
class AccountNode(SBTreeNode):
    def __init__(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI, c2: com.infinitekind.moneydance.model.Account) -> None: ...
    
    def cleanUp(self) -> None: ...
    
    def compareNode(self, sBTreeNode: SBTreeNode) -> int: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccountId(self) -> int: ...
    
    @staticmethod
    def getAccountNodeURI(c: com.infinitekind.moneydance.model.Account) -> str: ...
    
    def getChildSubType(self) -> int: ...
    
    def getChildType(self) -> 'SideBarNodeType': ...
    
    def getDot(self, b: bool) -> javax.swing.Icon: ...
    
    def getDotToolTipText(self) -> str: ...
    
    def getIconPath(self) -> str: ...
    
    def getIconTint(self) -> java.awt.Color: ...
    
    def getRightHandText(self) -> str: ...
    
    def getRightHandTextColor(self) -> java.awt.Color: ...
    
    def getSettings(self) -> str: ...
    
    def getSortKey(self) -> str: ...
    
    def getText(self) -> str: ...
    
    def getToolTipText(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def nodeWasSelected(self, c: com.moneydance.apps.md.view.gui.sidebar.SideBarComponent, b: bool) -> None: ...
    
    def update(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> None: ...
    
    
class BudgetNode(SBTreeNode):
    def __init__(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI, c2: com.infinitekind.moneydance.model.Budget) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getBudgetKey(self) -> str: ...
    
    def getChildSubType(self) -> int: ...
    
    def getChildType(self) -> 'SideBarNodeType': ...
    
    def getIconPath(self) -> str: ...
    
    def getIconTint(self) -> java.awt.Color: ...
    
    def getSettings(self) -> str: ...
    
    def getText(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def nodeWasSelected(self, c: com.moneydance.apps.md.view.gui.sidebar.SideBarComponent, b: bool) -> None: ...
    
    @staticmethod
    def uriForBudget(c: com.infinitekind.moneydance.model.Budget) -> str: ...
    
    
class GraphNode(SBTreeNode):
    def __init__(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI, c2: com.infinitekind.moneydance.model.ReportSpec) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getChildSubType(self) -> int: ...
    
    def getChildType(self) -> 'SideBarNodeType': ...
    
    def getGenerator(self) -> com.moneydance.apps.md.view.gui.GraphReportGenerator: ...
    
    def getIconPath(self) -> str: ...
    
    def getIconTint(self) -> java.awt.Color: ...
    
    def getInfo(self) -> com.infinitekind.moneydance.model.ReportSpec: ...
    
    def getSettings(self) -> str: ...
    
    def getText(self) -> str: ...
    
    def getToolTipText(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isMemorized(self) -> bool: ...
    
    def nodeWasSelected(self, c: com.moneydance.apps.md.view.gui.sidebar.SideBarComponent, b: bool) -> None: ...
    
    
class HeaderNode(SBTreeNode, java.lang.Comparable):
    def __init__(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI, sideBarNodeType: 'SideBarNodeType', i: int) -> None: ...
    
    def add(self, sBTreeNode: SBTreeNode) -> None: ...
    
    def children(self) -> java.util.Enumeration: ...
    
    def cleanUp(self) -> None: ...
    
    def compareTo(self, headerNode: 'HeaderNode') -> int: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAllowsChildren(self) -> bool: ...
    
    def getChildAt(self, i: int) -> javax.swing.tree.TreeNode: ...
    
    def getChildCount(self) -> int: ...
    
    def getChildSubType(self) -> int: ...
    
    def getChildType(self) -> 'SideBarNodeType': ...
    
    def getDot(self, b: bool) -> javax.swing.Icon: ...
    
    def getDotToolTipText(self) -> str: ...
    
    def getHeaderKey(self) -> 'SideBarNodeType': ...
    
    def getIconPath(self) -> str: ...
    
    def getIndex(self, j: javax.swing.tree.TreeNode) -> int: ...
    
    def getRightHandText(self) -> str: ...
    
    def getSettings(self) -> str: ...
    
    def getSortKey(self) -> str: ...
    
    def getSortingOrdinal(self) -> int: ...
    
    def getText(self) -> str: ...
    
    def getToolTipText(self) -> str: ...
    
    def getURL(self) -> str: ...
    
    def hasTypes(self, sideBarNodeType: 'SideBarNodeType', i: int) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def isExpanded(self) -> bool: ...
    
    def isLeaf(self) -> bool: ...
    
    def nodeWasSelected(self, c: com.moneydance.apps.md.view.gui.sidebar.SideBarComponent, b: bool) -> None: ...
    
    def remove(self, sBTreeNode: SBTreeNode) -> bool: ...
    
    def setExpanded(self, b: bool) -> None: ...
    
    def toString(self) -> str: ...
    
    def update(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> None: ...
    
    
class HomePageNode(SBTreeNode):
    TREE_INDEX = 0
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getChildSubType(self) -> int: ...
    
    def getChildType(self) -> 'SideBarNodeType': ...
    
    def getIconPath(self) -> str: ...
    
    def getIconTint(self) -> java.awt.Color: ...
    
    def getIndentDepth(self) -> int: ...
    
    def getSettings(self) -> str: ...
    
    def getText(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def nodeWasSelected(self, c: com.moneydance.apps.md.view.gui.sidebar.SideBarComponent, b: bool) -> None: ...
    
    
class N12ESideBarNodes:
    def __init__(self) -> None: ...
    
    
class RemindersNode(SBTreeNode):
    TREE_INDEX = 1
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getChildSubType(self) -> int: ...
    
    def getChildType(self) -> 'SideBarNodeType': ...
    
    def getIconPath(self) -> str: ...
    
    def getIconTint(self) -> java.awt.Color: ...
    
    def getIndentDepth(self) -> int: ...
    
    def getSettings(self) -> str: ...
    
    def getText(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def nodeWasSelected(self, c: com.moneydance.apps.md.view.gui.sidebar.SideBarComponent, b: bool) -> None: ...
    
    
class ReportNode(SBTreeNode):
    def __init__(self, c: com.moneydance.apps.md.view.gui.MoneydanceGUI, c2: com.infinitekind.moneydance.model.ReportSpec) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getChildSubType(self) -> int: ...
    
    def getChildType(self) -> 'SideBarNodeType': ...
    
    def getGenerator(self) -> com.moneydance.apps.md.view.gui.GraphReportGenerator: ...
    
    def getIconPath(self) -> str: ...
    
    def getIconTint(self) -> java.awt.Color: ...
    
    def getInfo(self) -> com.infinitekind.moneydance.model.ReportSpec: ...
    
    def getSettings(self) -> str: ...
    
    def getText(self) -> str: ...
    
    def getToolTipText(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isMemorized(self) -> bool: ...
    
    def nodeWasSelected(self, c: com.moneydance.apps.md.view.gui.sidebar.SideBarComponent, b: bool) -> None: ...
    
    
class SideBarNodeFactory:
    def __init__(self) -> None: ...
    
    @staticmethod
    def findNodeInTree(j: javax.swing.tree.TreeModel, sBTreeNode: SBTreeNode) -> javax.swing.tree.TreePath: ...
    
    @staticmethod
    def getBarModelFromSettings(c: com.infinitekind.moneydance.model.AccountBook, c2: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> javax.swing.tree.DefaultTreeModel: ...
    
    @staticmethod
    def getFullAccountNodeList(c: com.moneydance.apps.md.view.gui.MoneydanceGUI, c2: com.infinitekind.moneydance.model.AccountBook) -> typing.List[SBTreeNode]: ...
    
    @staticmethod
    def getFullBudgetNodeList(c: com.moneydance.apps.md.view.gui.MoneydanceGUI, c2: com.infinitekind.moneydance.model.AccountBook) -> typing.List[SBTreeNode]: ...
    
    @staticmethod
    def getFullCategoryNodeList(c: com.moneydance.apps.md.view.gui.MoneydanceGUI, c2: com.infinitekind.moneydance.model.AccountBook) -> typing.List[SBTreeNode]: ...
    
    @staticmethod
    def getFullGraphNodeList(c: com.infinitekind.moneydance.model.AccountBook, c2: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> typing.List[SBTreeNode]: ...
    
    @staticmethod
    def getFullReportNodeList(c: com.infinitekind.moneydance.model.AccountBook, c2: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> typing.List[SBTreeNode]: ...
    
    @staticmethod
    def getNodeTypeHeader(c: com.moneydance.apps.md.view.resources.MDResourceProvider, sideBarNodeType: 'SideBarNodeType', i: int) -> str: ...
    
    @staticmethod
    def getNodesFromTree(j: javax.swing.tree.TreeModel) -> typing.List[SBTreeNode]: ...
    
    @staticmethod
    def loadFromSettings(c: com.infinitekind.moneydance.model.AccountBook, c2: com.moneydance.apps.md.view.gui.MoneydanceGUI, headerNode: HeaderNode) -> typing.List[SBTreeNode]: ...
    
    @staticmethod
    def loadUserListFromSettings(c: com.infinitekind.moneydance.model.AccountBook, c2: com.moneydance.apps.md.view.gui.MoneydanceGUI) -> typing.List[SBTreeNode]: ...
    
    @staticmethod
    def saveHeadersToSettings(c: com.infinitekind.moneydance.model.AccountBook, j: javax.swing.tree.DefaultTreeModel) -> None: ...
    
    @staticmethod
    def saveNodesToSettings(c: com.infinitekind.moneydance.model.AccountBook, c2: com.moneydance.apps.md.view.gui.MoneydanceGUI, t: typing.List[SBTreeNode]) -> None: ...
    
    @staticmethod
    def setNodeHeaders(headerNode: HeaderNode, t: typing.List[SBTreeNode]) -> None: ...
    
    
class SideBarNodeType(java.lang.Enum):
    ACCOUNT = 'ACCOUNT'
    BUDGET = 'BUDGET'
    CATEGORY = 'CATEGORY'
    EXPENSE = 'EXPENSE'
    GRAPH = 'GRAPH'
    HEADER = 'HEADER'
    HOME_PAGE = 'HOME_PAGE'
    INCOME = 'INCOME'
    REMINDERS = 'REMINDERS'
    REPGRAPH = 'REPGRAPH'
    REPORT = 'REPORT'
    ROOT = 'ROOT'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def fromString(s: str) -> 'SideBarNodeType': ...
    
    @staticmethod
    def valueOf(s: str) -> 'SideBarNodeType': ...
    
    @staticmethod
    def values() -> typing.List['SideBarNodeType']: ...
    
    
