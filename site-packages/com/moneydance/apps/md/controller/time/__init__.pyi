import typing
import com.infinitekind.moneydance.model
import com.infinitekind.util
import com.moneydance.apps.md.view.resources
import java.lang
import java.util
import javax.swing


class DateRangeOption(java.lang.Enum, com.moneydance.apps.md.view.resources.DisplayableObject):
    CONFIG_KEY = u'daterange_option'
    DEFAULT = 'DR_YEAR_TO_DATE'
    DEFAULT_FISCAL_YEAR_START = 101
    DR_ALL_DATES = 'DR_ALL_DATES'
    DR_CUSTOM_DATE = 'DR_CUSTOM_DATE'
    DR_FISCAL_YEAR_TO_DATE = 'DR_FISCAL_YEAR_TO_DATE'
    DR_LAST_12_MONTHS = 'DR_LAST_12_MONTHS'
    DR_LAST_1_DAY = 'DR_LAST_1_DAY'
    DR_LAST_30_DAYS = 'DR_LAST_30_DAYS'
    DR_LAST_365_DAYS = 'DR_LAST_365_DAYS'
    DR_LAST_FISCAL_QUARTER = 'DR_LAST_FISCAL_QUARTER'
    DR_LAST_FISCAL_YEAR = 'DR_LAST_FISCAL_YEAR'
    DR_LAST_MONTH = 'DR_LAST_MONTH'
    DR_LAST_QUARTER = 'DR_LAST_QUARTER'
    DR_LAST_WEEK = 'DR_LAST_WEEK'
    DR_LAST_YEAR = 'DR_LAST_YEAR'
    DR_MONTH_TO_DATE = 'DR_MONTH_TO_DATE'
    DR_QUARTER_TO_DATE = 'DR_QUARTER_TO_DATE'
    DR_THIS_FISCAL_YEAR = 'DR_THIS_FISCAL_YEAR'
    DR_THIS_MONTH = 'DR_THIS_MONTH'
    DR_THIS_QUARTER = 'DR_THIS_QUARTER'
    DR_THIS_WEEK = 'DR_THIS_WEEK'
    DR_THIS_YEAR = 'DR_THIS_YEAR'
    DR_YEAR_TO_DATE = 'DR_YEAR_TO_DATE'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def fromInt(i: int) -> 'DateRangeOption': ...
    
    @staticmethod
    def fromKey(s: str) -> 'DateRangeOption': ...
    
    def getDateRange(self) -> com.infinitekind.moneydance.model.DateRange: ...
    
    def getKeyStroke(self) -> javax.swing.KeyStroke: ...
    
    def getResourceKey(self) -> str: ...
    
    def getSortKey(self) -> int: ...
    
    @staticmethod
    def valueOf(s: str) -> 'DateRangeOption': ...
    
    @staticmethod
    def values() -> typing.List['DateRangeOption']: ...
    
    
class GraphInterval(com.infinitekind.moneydance.model.DateRange):
    def __init__(self, c: com.infinitekind.util.CustomDateFormat, b: bool, i: int, i2: int) -> None: ...
    
    @staticmethod
    def getIntervalList(c: com.infinitekind.moneydance.model.DateRange, timeInterval: 'TimeInterval', c2: com.infinitekind.util.CustomDateFormat, b: bool) -> typing.List['GraphInterval']: ...
    
    def toString(self) -> str: ...
    
    def toTitleString(self, j: java.util.Locale) -> str: ...
    
    
class TimeInterval(java.lang.Enum):
    DAY = 'DAY'
    DEFAULT = 'MONTH'
    FISCAL_QUARTER = 'FISCAL_QUARTER'
    FISCAL_YEAR = 'FISCAL_YEAR'
    MONTH = 'MONTH'
    NONE = 'NONE'
    QUARTER = 'QUARTER'
    WEEK = 'WEEK'
    YEAR = 'YEAR'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def fromChar(s: str) -> 'TimeInterval': ...
    
    @staticmethod
    def fromValue(i: int) -> 'TimeInterval': ...
    
    def getConfigKey(self) -> str: ...
    
    def getDivisorResourceKey(self) -> str: ...
    
    def getGroupResourceKey(self) -> str: ...
    
    def getId(self) -> str: ...
    
    def getSubtotalResourceKey(self) -> str: ...
    
    def getValue(self) -> int: ...
    
    @staticmethod
    def valueOf(s: str) -> 'TimeInterval': ...
    
    @staticmethod
    def values() -> typing.List['TimeInterval']: ...
    
    
class TimeIntervalUtil:
    def __init__(self) -> None: ...
    
    @staticmethod
    def getColumnIndex(t: typing.List[GraphInterval], i: int) -> int: ...
    
    @staticmethod
    def getDateIntervalList(c: com.infinitekind.util.CustomDateFormat, c2: com.infinitekind.moneydance.model.DateRange, timeInterval: TimeInterval) -> typing.List[GraphInterval]: ...
    
    def getIntervalEnd(self, i: int, timeInterval: TimeInterval) -> int: ...
    
    def getIntervalLabels(self, c: com.infinitekind.util.CustomDateFormat, i: int, i2: int, timeInterval: TimeInterval) -> typing.List[str]: ...
    
    def getIntervalPoints(self, i: int, i2: int, timeInterval: TimeInterval) -> typing.List[int]: ...
    
    def getIntervalStart(self, i: int, timeInterval: TimeInterval) -> int: ...
    
    def getNumIntervals(self, i: int, i2: int, timeInterval: TimeInterval) -> int: ...
    
    
