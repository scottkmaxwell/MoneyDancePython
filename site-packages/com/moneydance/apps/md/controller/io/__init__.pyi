import typing
import com.infinitekind.moneydance.model
import com.moneydance.apps.md.controller
import com.moneydance.apps.md.view
import com.moneydance.apps.md.view.resources
import com.moneydance.security
import java.io
import java.util


class AccountBookUtil:
    BOOK_COMPARATOR = 'com.moneydance.apps.md.controller.io.AccountBookUtil$1'
    DEFAULT_FOLDER_CONTAINER = '/Users/smaxwell/Library/Containers/com.infinitekind.MoneydanceOSX/Data/Documents'
    INTERNAL_FOLDER_CONTAINERS = '[/Users/smaxwell/Library/Containers/com.infinitekind.MoneydanceOSX/Data/Documents]'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def getAccountBooks() -> typing.List[com.moneydance.apps.md.controller.AccountBookWrapper]: ...
    
    @staticmethod
    def getAccountBooksCount() -> int: ...
    
    @staticmethod
    def getExternalAccountBooks() -> typing.List[com.moneydance.apps.md.controller.AccountBookWrapper]: ...
    
    @staticmethod
    def getInternalAccountBooks() -> typing.List[com.moneydance.apps.md.controller.AccountBookWrapper]: ...
    
    @staticmethod
    def isWithinInternalStorage(c: com.infinitekind.moneydance.model.AccountBook) -> bool: ...
    
    @staticmethod
    def registerExternalAccountBook(c: com.infinitekind.moneydance.model.AccountBook) -> None: ...
    
    
class CollapsedSplitsIdentifier:
    def __init__(self) -> None: ...
    
    @staticmethod
    def isCollapsedSplit(c: com.infinitekind.moneydance.model.AbstractTxn) -> bool: ...
    
    @staticmethod
    def removeResultingCollapsedSplitsFor(c: com.infinitekind.moneydance.model.ParentTxn) -> None: ...
    
    
class DataReader:
    def __init__(self) -> None: ...
    
    def readAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, j: java.io.InputStream) -> com.infinitekind.moneydance.model.Account: ...
    
    
class DataWriter:
    def __init__(self) -> None: ...
    
    def setTxnFilter(self, c: com.infinitekind.moneydance.model.TxnFilter) -> None: ...
    
    def writeAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, c2: com.moneydance.apps.md.controller.StatusMonitor) -> None: ...
    
    
class FileOpeningContext(com.moneydance.security.SecretKeyCallback):
    def __init__(self, s: str, c: com.moneydance.security.SecretKeyCallback) -> None: ...
    
    def getBook(self) -> com.moneydance.apps.md.controller.AccountBookWrapper: ...
    
    def getPassphrase(self, s: str) -> str: ...
    
    def setVerifier(self, c: com.moneydance.security.SecretKeyVerifier) -> None: ...
    
    
class FileUtils:
    ENC_MONEYDANCE_ID = u'MoNeYdAnCe EnCrYpTeD DaTaStReAm'
    FORMAT_MDNATIVE = 0
    FORMAT_XML = 1
    MONEYDANCE_ID = u'MoNeYdAnCe DaTaStReAm'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def archiveFile(j: java.io.File, j2: java.io.File) -> None: ...
    
    @staticmethod
    def backupFileIfNecessary(j: java.io.File, c: com.moneydance.apps.md.controller.UserPreferences) -> None: ...
    
    @staticmethod
    def byteArraysMatch(t: typing.List[int], t2: typing.List[int], i: int) -> bool: ...
    
    @staticmethod
    def checkEncryptionOK(c: com.moneydance.apps.md.controller.AccountBookWrapper) -> bool: ...
    
    @staticmethod
    def copyFile(j: java.io.File, j2: java.io.File) -> None: ...
    
    @staticmethod
    def getAutoSaveFile(j: java.io.File) -> java.io.File: ...
    
    @staticmethod
    def getBackupDir(c: com.moneydance.apps.md.controller.UserPreferences) -> java.io.File: ...
    
    @staticmethod
    def getDefaultBackupDir() -> java.io.File: ...
    
    @staticmethod
    def loadFileIntoNewAccountBook(c: com.moneydance.apps.md.controller.AccountBookWrapper, j: java.io.File, s: str, c2: com.moneydance.security.SecretKeyCallback) -> com.moneydance.apps.md.controller.AccountBookWrapper: ...
    
    @staticmethod
    def main(t: typing.List[str]) -> None: ...
    
    @staticmethod
    def performValidityChecks(c: com.moneydance.apps.md.controller.AccountBookWrapper) -> None: ...
    
    @staticmethod
    def readAccountsFromFile(j: java.io.File, fileOpeningContext: FileOpeningContext) -> com.infinitekind.moneydance.model.Account: ...
    
    @staticmethod
    def readAccountsFromStream(j: java.io.InputStream, fileOpeningContext: FileOpeningContext) -> com.infinitekind.moneydance.model.Account: ...
    
    @staticmethod
    def sortByDateModified(t: typing.List[java.io.File]) -> None: ...
    
    @staticmethod
    def writeAccountsToFile(c: com.moneydance.apps.md.controller.AccountBookWrapper, j: java.io.File, i: int, c2: com.moneydance.apps.md.controller.UserPreferences) -> None: ...
    
    @staticmethod
    def writeAccountsToStream(c: com.moneydance.apps.md.controller.AccountBookWrapper, j: java.io.OutputStream) -> None: ...
    
    @staticmethod
    def writeExportFile(c: com.moneydance.apps.md.controller.AccountBookWrapper, j: java.io.File, i: int, c2: com.moneydance.apps.md.controller.UserPreferences, c3: com.infinitekind.moneydance.model.TxnFilter, c4: com.moneydance.apps.md.view.MoneydanceUI) -> None: ...
    
    
class GroupedSplits:
    def __init__(self, c: com.infinitekind.moneydance.model.ParentTxn) -> None: ...
    
    def getGroupForAccount(self, c: com.infinitekind.moneydance.model.Account) -> str: ...
    
    def getGroups(self) -> typing.List[str]: ...
    
    def numberOfGroups(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
    class Group:
        def __init__(self, groupedSplits: 'GroupedSplits', c: com.infinitekind.moneydance.model.Account) -> None: ...
        
        def add(self, c: com.infinitekind.moneydance.model.SplitTxn) -> None: ...
        
        def getAccount(self) -> com.infinitekind.moneydance.model.Account: ...
        
        def getDateInt(self) -> int: ...
        
        def getParentTxn(self) -> com.infinitekind.moneydance.model.ParentTxn: ...
        
        def isPotentialProblem(self) -> bool: ...
        
        def matchesAccount(self, c: com.infinitekind.moneydance.model.Account) -> bool: ...
        
        def size(self) -> int: ...
        
        def toString(self) -> str: ...
        
        def totalValue(self) -> int: ...
        
        
    
class KVSet:
    def __init__(self) -> None: ...
    
    def add(self, s: str, i: int) -> None: ...
    
    def clear(self) -> None: ...
    
    def copyInto(self, kVSet: 'KVSet') -> None: ...
    
    def getBoolean(self, s: str, b: bool) -> bool: ...
    
    def getDouble(self, s: str, f: float) -> float: ...
    
    def getInt(self, s: str, i: int) -> int: ...
    
    def getKeyAtIndex(self, i: int) -> str: ...
    
    def getLabel(self) -> str: ...
    
    def getLong(self, s: str, i: int) -> int: ...
    
    def getString(self, s: str, s2: str) -> str: ...
    
    def getSubset(self, s: str) -> 'KVSet': ...
    
    def hasKey(self, s: str) -> bool: ...
    
    def iterator(self) -> typing.Iterator['KVPair']: ...
    
    def readSet(self, j: java.io.Reader) -> bool: ...
    
    def remove(self, s: str) -> None: ...
    
    def setLabel(self, s: str) -> None: ...
    
    def size(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def writeSet(self, j: java.io.Writer) -> None: ...
    
    
class MDV4DataReader(DataReader):
    VERSION = 4
    
    def __init__(self) -> None: ...
    
    def readAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, j: java.io.InputStream) -> com.infinitekind.moneydance.model.Account: ...
    
    
class MDV5DataReader(DataReader):
    VERSION = 5
    
    def __init__(self) -> None: ...
    
    def readAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, j: java.io.InputStream) -> com.infinitekind.moneydance.model.Account: ...
    
    
class MDV6DataReader(DataReader):
    VERSION = 6
    
    def __init__(self) -> None: ...
    
    def readAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, j: java.io.InputStream) -> com.infinitekind.moneydance.model.Account: ...
    
    @staticmethod
    def statusCharToByte(s: str) -> int: ...
    
    
class MDV7DataReader(DataReader):
    DEBUG_READ_STRING: bool
    VERSION = 7
    
    def __init__(self) -> None: ...
    
    def readAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, j: java.io.InputStream) -> com.infinitekind.moneydance.model.Account: ...
    
    @staticmethod
    def statusCharToByte(s: str) -> int: ...
    
    
class MDV7DataWriter(DataWriter):
    UTF8_STRING_MAXLEN = 65530
    VERSION = 7
    
    def __init__(self, j: java.io.OutputStream) -> None: ...
    
    @staticmethod
    def statusByteToChar(i: int) -> str: ...
    
    def writeAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, c2: com.moneydance.apps.md.controller.StatusMonitor) -> None: ...
    
    
class MDV8DataReader(DataReader):
    VERSION = 8
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def fileStartsWith(t: typing.List[int], i: int) -> bool: ...
    
    def readAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, j: java.io.InputStream) -> com.infinitekind.moneydance.model.Account: ...
    
    @staticmethod
    def statusCharToByte(s: str) -> int: ...
    
    
class MDV8DataWriter(DataWriter):
    VERSION = 8
    
    def __init__(self, j: java.io.OutputStream) -> None: ...
    
    def writeAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, c2: com.moneydance.apps.md.controller.StatusMonitor) -> None: ...
    
    
class MDV8EncryptedDataReader(MDV8DataReader):
    VERSION = 8
    
    def __init__(self, s: str, fileOpeningContext: FileOpeningContext) -> None: ...
    
    @staticmethod
    def fileStartsWith(t: typing.List[int], i: int) -> bool: ...
    
    def readAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, j: java.io.InputStream) -> com.infinitekind.moneydance.model.Account: ...
    
    
class MDXMLDataReader(DataReader):
    VERSION = 6
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def fileStartsWith(t: typing.List[int], i: int) -> bool: ...
    
    def readAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, j: java.io.InputStream) -> com.infinitekind.moneydance.model.Account: ...
    
    @staticmethod
    def statusStrToByte(s: str) -> int: ...
    
    
class MDXMLDataWriter(DataWriter):
    VERSION = 6
    
    def __init__(self, j: java.io.OutputStream) -> None: ...
    
    def flush(self) -> None: ...
    
    @staticmethod
    def statusByteToStr(i: int) -> str: ...
    
    def writeAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, c2: com.moneydance.apps.md.controller.StatusMonitor) -> None: ...
    
    def writeParentTxn(self, c: com.infinitekind.moneydance.model.ParentTxn) -> None: ...
    
    
class MiniXMLParser:
    def __init__(self) -> None: ...
    
    def parseXML(self, j: java.io.Reader) -> 'XMLTag': ...
    
    
class ProgressMonitorInputStream(java.io.InputStream):
    def __init__(self, s: str, c: com.moneydance.apps.md.view.MoneydanceUI, j: java.io.InputStream, i: int) -> None: ...
    
    def close(self) -> None: ...
    
    def read(self) -> int: ...
    
    
class QIFDataReader:
    def __init__(self, c: com.infinitekind.moneydance.model.AccountBook, j: java.io.File, c2: com.moneydance.apps.md.view.MoneydanceUI, s: str, c3: com.infinitekind.moneydance.model.CurrencyType, i: int, b: bool, i2: int, c4: com.moneydance.apps.md.view.resources.Resources) -> None: ...
    
    def getUpdatedAccounts(self) -> typing.List[com.infinitekind.moneydance.model.Account]: ...
    
    @staticmethod
    def parseQuickenDateInt(s: str, i: int) -> int: ...
    
    def readTransactions(self, c: com.moneydance.apps.md.controller.StatusMonitor) -> None: ...
    
    def setCommissionAcctStr(self, s: str) -> None: ...
    
    
class QIFDataWriter(DataWriter):
    def __init__(self, j: java.io.File, c: com.infinitekind.moneydance.model.CurrencyType) -> None: ...
    
    def setAccountFilter(self, c: com.infinitekind.moneydance.model.AcctFilter) -> None: ...
    
    def writeAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, c2: com.moneydance.apps.md.controller.StatusMonitor) -> None: ...
    
    
class TabDelDataWriter(DataWriter):
    def __init__(self, j: java.io.File) -> None: ...
    
    def setAccountFilter(self, c: com.infinitekind.moneydance.model.AcctFilter) -> None: ...
    
    def writeAccounts(self, c: com.moneydance.apps.md.controller.AccountBookWrapper, c2: com.moneydance.apps.md.controller.StatusMonitor) -> None: ...
    
    
class Tag:
    def __init__(self, s: str, s2: str) -> None: ...
    
    def duplicate(self) -> 'Tag': ...
    
    def getKey(self) -> str: ...
    
    def getValue(self) -> str: ...
    
    
class TagSet:
    def __init__(self) -> None: ...
    
    def clear(self) -> None: ...
    
    def duplicate(self) -> 'TagSet': ...
    
    def getBooleanTag(self, s: str, b: bool) -> bool: ...
    
    def getDoubleTag(self, s: str, f: float) -> float: ...
    
    def getIntTag(self, s: str, i: int) -> int: ...
    
    def getLongTag(self, s: str, i: int) -> int: ...
    
    def getTag(self, s: str) -> str: ...
    
    def getTagAt(self, i: int) -> Tag: ...
    
    def getTagCount(self) -> int: ...
    
    def removeTag(self, s: str) -> None: ...
    
    def setTag(self, s: str, b: bool) -> None: ...
    
    def toString(self) -> str: ...
    
    
class XMLTag:
    def __init__(self) -> None: ...
    
    def addSubTag(self, xMLTag: 'XMLTag') -> None: ...
    
    def getAmountSubTag(self, s: str, i: int, c: com.infinitekind.moneydance.model.CurrencyType) -> int: ...
    
    def getBoolSubTag(self, s: str, b: bool) -> bool: ...
    
    def getBoolValue(self) -> bool: ...
    
    def getDateIntSubTag(self, s: str, i: int) -> int: ...
    
    def getDateSubTag(self, s: str, j: java.util.Date) -> java.util.Date: ...
    
    def getDateTimeSubTag(self, s: str, j: java.util.Date) -> java.util.Date: ...
    
    def getDateTimeValue(self) -> java.util.Date: ...
    
    def getDateValue(self) -> java.util.Date: ...
    
    def getDoubleSubTag(self, s: str, f: float) -> float: ...
    
    def getDoubleValue(self) -> float: ...
    
    def getIntSubTag(self, s: str, i: int) -> int: ...
    
    def getIntValue(self) -> int: ...
    
    def getLongSubTag(self, s: str, i: int) -> int: ...
    
    def getLongValue(self) -> int: ...
    
    def getName(self) -> str: ...
    
    def getStrListSubTag(self, s: str) -> typing.List[str]: ...
    
    def getStrSubTag(self, s: str, s2: str) -> str: ...
    
    def getStrValue(self) -> str: ...
    
    def getSubTag(self, i: int) -> 'XMLTag': ...
    
    def getSubTagCount(self) -> int: ...
    
    def getValue(self) -> object: ...
    
    def hasSubTag(self, s: str) -> bool: ...
    
    def insertSubTag(self, xMLTag: 'XMLTag') -> None: ...
    
    def setValue(self, o: object) -> None: ...
    
    def toString(self) -> str: ...
    
    
