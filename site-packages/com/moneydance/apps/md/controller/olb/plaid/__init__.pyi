import typing
import com.infinitekind.moneydance.model
import com.infinitekind.moneydance.online
import com.infinitekind.tiksync
import com.moneydance.apps.md.controller.olb
import java.io


class PlaidConnection(com.moneydance.apps.md.controller.olb.OLBConnection):
    DEBUG = False
    DEBUG_MESSAGES = False
    
    def __init__(self, c: com.infinitekind.moneydance.model.AccountBook, c2: com.infinitekind.moneydance.online.OnlineBankingUI) -> None: ...
    
    @staticmethod
    def formatPlaidDate(i: int) -> str: ...
    
    def getAccessTokensByItemID(self) -> typing.Dict[str,str]: ...
    
    def getFIID(self) -> str: ...
    
    def getInstitutionInfo(self, s: str) -> str: ...
    
    def getItemInfo(self, s: str) -> com.infinitekind.tiksync.SyncRecord: ...
    
    def getMDPlusLicense(self) -> str: ...
    
    @staticmethod
    def getPlaidService(c: com.infinitekind.moneydance.model.AccountBook) -> com.infinitekind.moneydance.model.OnlineService: ...
    
    def getPlaidSettings(self) -> com.infinitekind.moneydance.model.MoneydanceSyncableItem: ...
    
    def getTransactions(self, c: com.infinitekind.moneydance.model.OnlineAccountProxy) -> None: ...
    
    def getUpdateLinkToken(self, s: str) -> str: ...
    
    @staticmethod
    def main(t: typing.List[str]) -> None: ...
    
    @staticmethod
    def parsePlaidDate(s: str, i: int) -> int: ...
    
    @staticmethod
    def parsePlaidDatetime(s: str, i: int) -> int: ...
    
    def printDebuggingInfo(self, j: java.io.PrintStream) -> None: ...
    
    def removeItem(self, s: str) -> bool: ...
    
    def setAccessTokens(self, t: typing.List[com.infinitekind.tiksync.SyncRecord]) -> bool: ...
    
    def updateAccountList(self) -> bool: ...
    
    
    class InstitutionInfo:
        def __init__(self, plaidConnection: 'PlaidConnection', c: com.infinitekind.tiksync.SyncRecord) -> None: ...
        
        def getEncodedIcon(self) -> str: ...
        
        def getID(self) -> str: ...
        
        def getName(self) -> str: ...
        
        
    class ItemAccessInfo:
        def __init__(self, plaidConnection: 'PlaidConnection', c: com.infinitekind.tiksync.SyncRecord) -> None: ...
        
        def getItemID(self) -> str: ...
        
        def getPayloadID(self) -> str: ...
        
        def toString(self) -> str: ...
        
        
    class Keys:
        ACCESS_TOKENS_KEY = u'access_tokens'
        ID = u'id'
        INSTITUTION_COLOR = u'color'
        INSTITUTION_COUNTRIES = u'countries'
        INSTITUTION_ID = u'inst'
        INSTITUTION_KEY_PREFIX = u'inst.'
        INSTITUTION_LOGO = u'logo'
        INSTITUTION_NAME = u'name'
        INSTITUTION_PRODUCTS = u'prods'
        INSTITUTION_URL = u'url'
        ITEMS_INSTITUTIONS_CACHE = u'mdp_items'
        ITEM_EXPIRATION = u'expdate'
        ITEM_KEY_PREFIX = u'item.'
        ITEM_PRODUCTS = u'prods'
        ITEM_PRODUCTS_AVAILABLE = u'prods.avail'
        
        def __init__(self) -> None: ...
        
        
    class PlaidInvestTxnSubtype:
        account_fee = 'account_fee'
        adjustment = 'adjustment'
        assignment = 'assignment'
        buy = 'buy'
        buy_to_cover = 'buy_to_cover'
        contribution = 'contribution'
        deposit = 'deposit'
        distribution = 'distribution'
        dividend = 'dividend'
        dividend_reinvestment = 'dividend_reinvestment'
        exercise = 'exercise'
        expire = 'expire'
        fund_fee = 'fund_fee'
        interest = 'interest'
        interest_receivable = 'interest_receivable'
        interest_reinvestment = 'interest_reinvestment'
        legal_fee = 'legal_fee'
        loan_payment = 'loan_payment'
        longterm_capital_gain = 'longterm_capital_gain'
        longterm_capital_gain_reinvestment = 'longterm_capital_gain_reinvestment'
        management_fee = 'management_fee'
        margin_expense = 'margin_expense'
        merger = 'merger'
        miscellaneous_fee = 'miscellaneous_fee'
        nonqualified_dividend = 'nonqualified_dividend'
        nonresident_tax = 'nonresident_tax'
        pending_credit = 'pending_credit'
        pending_debit = 'pending_debit'
        qualified_dividend = 'qualified_dividend'
        rebalance = 'rebalance'
        return_of_principal = 'return_of_principal'
        sell = 'sell'
        sell_short = 'sell_short'
        shortterm_capital_gain = 'shortterm_capital_gain'
        shortterm_capital_gain_reinvestment = 'shortterm_capital_gain_reinvestment'
        spin_off = 'spin_off'
        split = 'split'
        stock_distribution = 'stock_distribution'
        tax = 'tax'
        tax_withheld = 'tax_withheld'
        transfer = 'transfer'
        transfer_fee = 'transfer_fee'
        trust_fee = 'trust_fee'
        unqualified_gain = 'unqualified_gain'
        withdrawal = 'withdrawal'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def subtypeForPlaidID(s: str) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    class PlaidInvestTxnType:
        buy = 'buy'
        cancel = 'cancel'
        cash = 'cash'
        fee = 'fee'
        sell = 'sell'
        transfer = 'transfer'
        
        def __init__(self) -> None: ...
        
        def getLocalTypeIDXXX(self) -> str: ...
        
        def getPlaidTypeID(self) -> str: ...
        
        def setLocalTxnTypeID(self, s: str, c: com.infinitekind.moneydance.model.OnlineTxn) -> None: ...
        
        @staticmethod
        def typeForPlaidID(s: str) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
