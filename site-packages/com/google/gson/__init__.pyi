import typing
import internal
import java.io
import java.lang
import java.lang.annotation
import java.lang.reflect
import stream

T = typing.TypeVar("T")


class ExclusionStrategy:
    def __init__(self) -> None: ...
    
    def shouldSkipClass(self, t: typing.Any) -> bool: ...
    
    def shouldSkipField(self, fieldAttributes: 'FieldAttributes') -> bool: ...
    
    
class FieldAttributes:
    def __init__(self, j: java.lang.reflect.Field) -> None: ...
    
    def getAnnotation(self, t: typing.Any) -> 'T': ...
    
    def getAnnotations(self) -> typing.Sequence[java.lang.annotation.Annotation]: ...
    
    def getDeclaredClass(self) -> typing.Any: ...
    
    def getDeclaredType(self) -> java.lang.reflect.Type: ...
    
    def getDeclaringClass(self) -> typing.Any: ...
    
    def getName(self) -> str: ...
    
    def hasModifier(self, i: int) -> bool: ...
    
    
class FieldNamingStrategy:
    def __init__(self) -> None: ...
    
    def translateName(self, j: java.lang.reflect.Field) -> str: ...
    
    
class FieldNamingPolicy(FieldNamingStrategy, java.lang.Enum):
    IDENTITY = 'IDENTITY'
    LOWER_CASE_WITH_DASHES = 'LOWER_CASE_WITH_DASHES'
    LOWER_CASE_WITH_DOTS = 'LOWER_CASE_WITH_DOTS'
    LOWER_CASE_WITH_UNDERSCORES = 'LOWER_CASE_WITH_UNDERSCORES'
    UPPER_CAMEL_CASE = 'UPPER_CAMEL_CASE'
    UPPER_CAMEL_CASE_WITH_SPACES = 'UPPER_CAMEL_CASE_WITH_SPACES'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'FieldNamingPolicy': ...
    
    @staticmethod
    def values() -> typing.List['FieldNamingPolicy']: ...
    
    
class Gson:
    def __init__(self) -> None: ...
    
    def excluder(self) -> internal.Excluder: ...
    
    def fieldNamingStrategy(self) -> FieldNamingStrategy: ...
    
    def fromJson(self, s: str, t: typing.Any) -> 'T': ...
    
    def getAdapter(self, t: typing.Any) -> typing.Any: ...
    
    def getDelegateAdapter(self, typeAdapterFactory: 'TypeAdapterFactory', t: typing.Any) -> typing.Any: ...
    
    def htmlSafe(self) -> bool: ...
    
    def newBuilder(self) -> 'GsonBuilder': ...
    
    def newJsonReader(self, j: java.io.Reader) -> stream.JsonReader: ...
    
    def newJsonWriter(self, j: java.io.Writer) -> stream.JsonWriter: ...
    
    def serializeNulls(self) -> bool: ...
    
    def toJson(self, jsonElement: 'JsonElement') -> str: ...
    
    def toJsonTree(self, o: object) -> 'JsonElement': ...
    
    def toString(self) -> str: ...
    
    
class GsonBuilder:
    def __init__(self) -> None: ...
    
    def addDeserializationExclusionStrategy(self, exclusionStrategy: ExclusionStrategy) -> 'GsonBuilder': ...
    
    def addSerializationExclusionStrategy(self, exclusionStrategy: ExclusionStrategy) -> 'GsonBuilder': ...
    
    def create(self) -> Gson: ...
    
    def disableHtmlEscaping(self) -> 'GsonBuilder': ...
    
    def disableInnerClassSerialization(self) -> 'GsonBuilder': ...
    
    def enableComplexMapKeySerialization(self) -> 'GsonBuilder': ...
    
    def excludeFieldsWithModifiers(self, t: typing.List[int]) -> 'GsonBuilder': ...
    
    def excludeFieldsWithoutExposeAnnotation(self) -> 'GsonBuilder': ...
    
    def generateNonExecutableJson(self) -> 'GsonBuilder': ...
    
    def registerTypeAdapter(self, j: java.lang.reflect.Type, o: object) -> 'GsonBuilder': ...
    
    def registerTypeAdapterFactory(self, typeAdapterFactory: 'TypeAdapterFactory') -> 'GsonBuilder': ...
    
    def registerTypeHierarchyAdapter(self, t: typing.Any, o: object) -> 'GsonBuilder': ...
    
    def serializeNulls(self) -> 'GsonBuilder': ...
    
    def serializeSpecialFloatingPointValues(self) -> 'GsonBuilder': ...
    
    def setDateFormat(self, i: int) -> 'GsonBuilder': ...
    
    def setExclusionStrategies(self, t: typing.List[ExclusionStrategy]) -> 'GsonBuilder': ...
    
    def setFieldNamingPolicy(self, fieldNamingPolicy: FieldNamingPolicy) -> 'GsonBuilder': ...
    
    def setFieldNamingStrategy(self, fieldNamingStrategy: FieldNamingStrategy) -> 'GsonBuilder': ...
    
    def setLenient(self) -> 'GsonBuilder': ...
    
    def setLongSerializationPolicy(self, longSerializationPolicy: 'LongSerializationPolicy') -> 'GsonBuilder': ...
    
    def setPrettyPrinting(self) -> 'GsonBuilder': ...
    
    def setVersion(self, f: float) -> 'GsonBuilder': ...
    
    
class InstanceCreator:
    def __init__(self) -> None: ...
    
    def createInstance(self, j: java.lang.reflect.Type) -> 'T': ...
    
    
class JsonElement:
    def __init__(self) -> None: ...
    
    def deepCopy(self) -> 'JsonElement': ...
    
    def getAsBigDecimal(self) -> float: ...
    
    def getAsBigInteger(self) -> int: ...
    
    def getAsBoolean(self) -> bool: ...
    
    def getAsByte(self) -> int: ...
    
    def getAsCharacter(self) -> str: ...
    
    def getAsDouble(self) -> float: ...
    
    def getAsFloat(self) -> float: ...
    
    def getAsInt(self) -> int: ...
    
    def getAsJsonArray(self) -> 'JsonArray': ...
    
    def getAsJsonNull(self) -> 'JsonNull': ...
    
    def getAsJsonObject(self) -> 'JsonObject': ...
    
    def getAsJsonPrimitive(self) -> 'JsonPrimitive': ...
    
    def getAsLong(self) -> int: ...
    
    def getAsNumber(self) -> java.lang.Number: ...
    
    def getAsShort(self) -> int: ...
    
    def getAsString(self) -> str: ...
    
    def isJsonArray(self) -> bool: ...
    
    def isJsonNull(self) -> bool: ...
    
    def isJsonObject(self) -> bool: ...
    
    def isJsonPrimitive(self) -> bool: ...
    
    def toString(self) -> str: ...
    
    
class JsonArray(JsonElement, typing.Iterable):
    def __init__(self) -> None: ...
    
    def add(self, s: str) -> None: ...
    
    def addAll(self, jsonArray: 'JsonArray') -> None: ...
    
    def contains(self, jsonElement: JsonElement) -> bool: ...
    
    def deepCopy(self) -> JsonElement: ...
    
    def equals(self, o: object) -> bool: ...
    
    def get(self, i: int) -> JsonElement: ...
    
    def getAsBigDecimal(self) -> float: ...
    
    def getAsBigInteger(self) -> int: ...
    
    def getAsBoolean(self) -> bool: ...
    
    def getAsByte(self) -> int: ...
    
    def getAsCharacter(self) -> str: ...
    
    def getAsDouble(self) -> float: ...
    
    def getAsFloat(self) -> float: ...
    
    def getAsInt(self) -> int: ...
    
    def getAsLong(self) -> int: ...
    
    def getAsNumber(self) -> java.lang.Number: ...
    
    def getAsShort(self) -> int: ...
    
    def getAsString(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isEmpty(self) -> bool: ...
    
    def iterator(self) -> typing.Iterator[JsonElement]: ...
    
    def remove(self, i: int) -> JsonElement: ...
    
    def set(self, i: int, jsonElement: JsonElement) -> JsonElement: ...
    
    def size(self) -> int: ...
    
    
class JsonDeserializationContext:
    def __init__(self) -> None: ...
    
    def deserialize(self, jsonElement: JsonElement, j: java.lang.reflect.Type) -> 'T': ...
    
    
class JsonDeserializer:
    def __init__(self) -> None: ...
    
    def deserialize(self, jsonElement: JsonElement, j: java.lang.reflect.Type, jsonDeserializationContext: JsonDeserializationContext) -> 'T': ...
    
    
class JsonParseException(java.lang.RuntimeException):
    def __init__(self, s: str) -> None: ...
    
    
class JsonIOException(JsonParseException):
    def __init__(self, s: str) -> None: ...
    
    
class JsonNull(JsonElement):
    INSTANCE = 'null'
    
    def __init__(self) -> None: ...
    
    def deepCopy(self) -> JsonElement: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    
class JsonObject(JsonElement):
    def __init__(self) -> None: ...
    
    def add(self, s: str, jsonElement: JsonElement) -> None: ...
    
    def addProperty(self, s: str, s2: str) -> None: ...
    
    def deepCopy(self) -> JsonElement: ...
    
    def entrySet(self) -> typing.Set[typing.Any]: ...
    
    def equals(self, o: object) -> bool: ...
    
    def get(self, s: str) -> JsonElement: ...
    
    def has(self, s: str) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def keySet(self) -> typing.Set[str]: ...
    
    def remove(self, s: str) -> JsonElement: ...
    
    def size(self) -> int: ...
    
    
class JsonParser:
    def __init__(self) -> None: ...
    
    def parse(self, s: str) -> JsonElement: ...
    
    @staticmethod
    def parseReader(s: stream.JsonReader) -> JsonElement: ...
    
    @staticmethod
    def parseString(s: str) -> JsonElement: ...
    
    
class JsonPrimitive(JsonElement):
    def __init__(self, s: str) -> None: ...
    
    def deepCopy(self) -> JsonElement: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAsBigDecimal(self) -> float: ...
    
    def getAsBigInteger(self) -> int: ...
    
    def getAsBoolean(self) -> bool: ...
    
    def getAsByte(self) -> int: ...
    
    def getAsCharacter(self) -> str: ...
    
    def getAsDouble(self) -> float: ...
    
    def getAsFloat(self) -> float: ...
    
    def getAsInt(self) -> int: ...
    
    def getAsLong(self) -> int: ...
    
    def getAsNumber(self) -> java.lang.Number: ...
    
    def getAsShort(self) -> int: ...
    
    def getAsString(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isBoolean(self) -> bool: ...
    
    def isNumber(self) -> bool: ...
    
    def isString(self) -> bool: ...
    
    
class JsonSerializationContext:
    def __init__(self) -> None: ...
    
    def serialize(self, o: object) -> JsonElement: ...
    
    
class JsonSerializer:
    def __init__(self) -> None: ...
    
    def serialize(self, t: 'T', j: java.lang.reflect.Type, jsonSerializationContext: JsonSerializationContext) -> JsonElement: ...
    
    
class JsonStreamParser(typing.Iterator):
    def __init__(self, s: str) -> None: ...
    
    def hasNext(self) -> bool: ...
    
    def next(self) -> object: ...
    
    def remove(self) -> None: ...
    
    
class JsonSyntaxException(JsonParseException):
    def __init__(self, s: str) -> None: ...
    
    
class LongSerializationPolicy(java.lang.Enum):
    DEFAULT = 'DEFAULT'
    STRING = 'STRING'
    
    def __init__(self) -> None: ...
    
    def serialize(self, i: int) -> JsonElement: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LongSerializationPolicy': ...
    
    @staticmethod
    def values() -> typing.List['LongSerializationPolicy']: ...
    
    
class TypeAdapter:
    def __init__(self) -> None: ...
    
    def fromJson(self, s: str) -> 'T': ...
    
    def fromJsonTree(self, jsonElement: JsonElement) -> 'T': ...
    
    def nullSafe(self) -> typing.Any: ...
    
    def read(self, s: stream.JsonReader) -> 'T': ...
    
    def toJson(self, t: 'T') -> str: ...
    
    def toJsonTree(self, t: 'T') -> JsonElement: ...
    
    def write(self, s: stream.JsonWriter, t: 'T') -> None: ...
    
    
class TypeAdapterFactory:
    def __init__(self) -> None: ...
    
    def create(self, gson: Gson, t: typing.Any) -> typing.Any: ...
    
    
