import typing
import com.google.gson
import com.google.gson.stream
import java.io
import java.lang
import java.lang.reflect
import java.text
import java.util

E = typing.TypeVar("E")
K = typing.TypeVar("K")
T = typing.TypeVar("T")
V = typing.TypeVar("V")


class ConstructorConstructor:
    def __init__(self, t: typing.Dict[java.lang.reflect.Type,typing.Any], b: bool, t2: typing.List[com.google.gson.ReflectionAccessFilter]) -> None: ...
    
    def get(self, t: typing.Any) -> typing.Any: ...
    
    def toString(self) -> str: ...
    
    
class Excluder(com.google.gson.TypeAdapterFactory, java.lang.Cloneable):
    DEFAULT = 'com.google.gson.internal.Excluder'
    
    def __init__(self) -> None: ...
    
    def create(self, c: com.google.gson.Gson, t: typing.Any) -> typing.Any: ...
    
    def disableInnerClassSerialization(self) -> 'Excluder': ...
    
    def excludeClass(self, t: typing.Any, b: bool) -> bool: ...
    
    def excludeField(self, j: java.lang.reflect.Field, b: bool) -> bool: ...
    
    def excludeFieldsWithoutExposeAnnotation(self) -> 'Excluder': ...
    
    def withExclusionStrategy(self, c: com.google.gson.ExclusionStrategy, b: bool, b2: bool) -> 'Excluder': ...
    
    def withModifiers(self, t: typing.List[int]) -> 'Excluder': ...
    
    def withVersion(self, f: float) -> 'Excluder': ...
    
    
class GsonBuildConfig:
    VERSION = u'2.10.1'
    
    def __init__(self) -> None: ...
    
    
class JavaVersion:
    def __init__(self) -> None: ...
    
    @staticmethod
    def getMajorJavaVersion() -> int: ...
    
    @staticmethod
    def isJava9OrLater() -> bool: ...
    
    
class JsonReaderInternalAccess:
    INSTANCE = 'com.google.gson.stream.JsonReader$1'
    
    def __init__(self) -> None: ...
    
    def promoteNameToValue(self, c: com.google.gson.stream.JsonReader) -> None: ...
    
    
class LazilyParsedNumber(java.lang.Number):
    def __init__(self, s: str) -> None: ...
    
    def doubleValue(self) -> float: ...
    
    def equals(self, o: object) -> bool: ...
    
    def floatValue(self) -> float: ...
    
    def hashCode(self) -> int: ...
    
    def intValue(self) -> int: ...
    
    def longValue(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class LinkedTreeMap(typing.Mapping, java.io.Serializable):
    def __init__(self) -> None: ...
    
    def clear(self) -> None: ...
    
    def containsKey(self, o: object) -> bool: ...
    
    def entrySet(self) -> typing.Set[typing.Any]: ...
    
    def fromkeys(self) -> None: ...
    
    def keySet(self) -> typing.Set['K']: ...
    
    def put(self, k: 'K', v: 'V') -> 'V': ...
    
    def remove(self, o: object) -> 'V': ...
    
    def size(self) -> int: ...
    
    
class NonNullElementWrapperList(java.util.AbstractList, java.util.RandomAccess):
    def __init__(self, t: typing.List['E']) -> None: ...
    
    def clear(self) -> None: ...
    
    def contains(self, o: object) -> bool: ...
    
    def equals(self, o: object) -> bool: ...
    
    def get(self, i: int) -> 'E': ...
    
    def hashCode(self) -> int: ...
    
    def indexOf(self, o: object) -> int: ...
    
    def lastIndexOf(self, o: object) -> int: ...
    
    def removeAll(self, t: typing.Sequence['T']) -> bool: ...
    
    def retainAll(self, t: typing.Sequence['T']) -> bool: ...
    
    def set(self, i: int, e: 'E') -> 'E': ...
    
    def size(self) -> int: ...
    
    def toArray(self) -> typing.List[object]: ...
    
    
class ObjectConstructor:
    def __init__(self) -> None: ...
    
    def construct(self) -> 'T': ...
    
    
class PreJava9DateFormatProvider:
    def __init__(self) -> None: ...
    
    @staticmethod
    def getUSDateFormat(i: int) -> java.text.DateFormat: ...
    
    @staticmethod
    def getUSDateTimeFormat(i: int, i2: int) -> java.text.DateFormat: ...
    
    
class Primitives:
    def __init__(self) -> None: ...
    
    @staticmethod
    def isPrimitive(j: java.lang.reflect.Type) -> bool: ...
    
    @staticmethod
    def isWrapperType(j: java.lang.reflect.Type) -> bool: ...
    
    @staticmethod
    def unwrap(t: typing.Any) -> typing.Any: ...
    
    @staticmethod
    def wrap(t: typing.Any) -> typing.Any: ...
    
    
class ReflectionAccessFilterHelper:
    def __init__(self) -> None: ...
    
    @staticmethod
    def canAccess(j: java.lang.reflect.AccessibleObject, o: object) -> bool: ...
    
    @staticmethod
    def getFilterResult(t: typing.List[com.google.gson.ReflectionAccessFilter], t2: typing.Any) -> str: ...
    
    @staticmethod
    def isAndroidType(t: typing.Any) -> bool: ...
    
    @staticmethod
    def isAnyPlatformType(t: typing.Any) -> bool: ...
    
    @staticmethod
    def isJavaType(t: typing.Any) -> bool: ...
    
    
class Streams:
    def __init__(self) -> None: ...
    
    @staticmethod
    def parse(c: com.google.gson.stream.JsonReader) -> com.google.gson.JsonElement: ...
    
    @staticmethod
    def write(c: com.google.gson.JsonElement, c2: com.google.gson.stream.JsonWriter) -> None: ...
    
    @staticmethod
    def writerForAppendable(j: java.lang.Appendable) -> java.io.Writer: ...
    
    
class UnsafeAllocator:
    INSTANCE = 'com.google.gson.internal.UnsafeAllocator$1'
    
    def __init__(self) -> None: ...
    
    def newInstance(self, t: typing.Any) -> 'T': ...
    
    
