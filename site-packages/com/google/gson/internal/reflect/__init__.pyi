import typing
import java.lang
import java.lang.reflect


class ReflectionHelper:
    def __init__(self) -> None: ...
    
    @staticmethod
    def constructorToString(t: typing.Any) -> str: ...
    
    @staticmethod
    def createExceptionForUnexpectedIllegalAccess(j: java.lang.IllegalAccessException) -> java.lang.RuntimeException: ...
    
    @staticmethod
    def fieldToString(j: java.lang.reflect.Field) -> str: ...
    
    @staticmethod
    def getAccessibleObjectDescription(j: java.lang.reflect.AccessibleObject, b: bool) -> str: ...
    
    @staticmethod
    def getAccessor(t: typing.Any, j: java.lang.reflect.Field) -> java.lang.reflect.Method: ...
    
    @staticmethod
    def getCanonicalRecordConstructor(t: typing.Any) -> typing.Any: ...
    
    @staticmethod
    def getRecordComponentNames(t: typing.Any) -> typing.List[str]: ...
    
    @staticmethod
    def isRecord(t: typing.Any) -> bool: ...
    
    @staticmethod
    def makeAccessible(j: java.lang.reflect.AccessibleObject) -> None: ...
    
    @staticmethod
    def tryMakeAccessible(t: typing.Any) -> str: ...
    
    
