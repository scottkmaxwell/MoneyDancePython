import typing
import com.dropbox.core.v2
import com.dropbox.core.v2.fileproperties
import java.lang
import java.util


class AddTagError:
    OTHER = '"other"'
    TOO_MANY_TAGS = '"too_many_tags"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isTooManyTags(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'AddTagError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        TOO_MANY_TAGS = 'TOO_MANY_TAGS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class AddTagErrorException('com.dropbox.core.DbxApiException'):
    errorValue: AddTagError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', addTagError: AddTagError) -> None: ...
    
    
class AlphaGetMetadataBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'Metadata': ...
    
    def withIncludeDeleted(self, b: bool) -> 'AlphaGetMetadataBuilder': ...
    
    def withIncludeHasExplicitSharedMembers(self, b: bool) -> 'AlphaGetMetadataBuilder': ...
    
    def withIncludeMediaInfo(self, b: bool) -> 'AlphaGetMetadataBuilder': ...
    
    def withIncludePropertyGroups(self, c: com.dropbox.core.v2.fileproperties.TemplateFilterBase) -> 'AlphaGetMetadataBuilder': ...
    
    def withIncludePropertyTemplates(self, t: typing.List[str]) -> 'AlphaGetMetadataBuilder': ...
    
    
class AlphaGetMetadataError:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def getPropertiesErrorValue(self) -> com.dropbox.core.v2.fileproperties.LookUpPropertiesError: ...
    
    def hashCode(self) -> int: ...
    
    def isPath(self) -> bool: ...
    
    def isPropertiesError(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'AlphaGetMetadataError': ...
    
    @staticmethod
    def propertiesError(c: com.dropbox.core.v2.fileproperties.LookUpPropertiesError) -> 'AlphaGetMetadataError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        PATH = 'PATH'
        PROPERTIES_ERROR = 'PROPERTIES_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class AlphaGetMetadataErrorException('com.dropbox.core.DbxApiException'):
    errorValue: AlphaGetMetadataError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', alphaGetMetadataError: AlphaGetMetadataError) -> None: ...
    
    
class AlphaUploadBuilder(com.dropbox.core.v2.DbxUploadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> 'com.dropbox.core.DbxUploader': ...
    
    def withAutorename(self, b: bool) -> 'AlphaUploadBuilder': ...
    
    def withClientModified(self, j: java.util.Date) -> 'AlphaUploadBuilder': ...
    
    def withContentHash(self, s: str) -> 'AlphaUploadBuilder': ...
    
    def withMode(self, writeMode: 'WriteMode') -> 'AlphaUploadBuilder': ...
    
    def withMute(self, b: bool) -> 'AlphaUploadBuilder': ...
    
    def withPropertyGroups(self, t: typing.List[com.dropbox.core.v2.fileproperties.PropertyGroup]) -> 'AlphaUploadBuilder': ...
    
    def withStrictConflict(self, b: bool) -> 'AlphaUploadBuilder': ...
    
    
class AlphaUploadUploader('com.dropbox.core.DbxUploader'):
    def __init__(self, s: str, s2: str) -> None: ...
    
    
class BaseTagError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'BaseTagError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class BaseTagErrorException('com.dropbox.core.DbxApiException'):
    errorValue: BaseTagError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', baseTagError: BaseTagError) -> None: ...
    
    
class CommitInfo:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAutorename(self) -> bool: ...
    
    def getClientModified(self) -> java.util.Date: ...
    
    def getMode(self) -> 'WriteMode': ...
    
    def getMute(self) -> bool: ...
    
    def getPath(self) -> str: ...
    
    def getPropertyGroups(self) -> typing.List[com.dropbox.core.v2.fileproperties.PropertyGroup]: ...
    
    def getStrictConflict(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'CommitInfo': ...
        
        def withAutorename(self, b: bool) -> str: ...
        
        def withClientModified(self, j: java.util.Date) -> str: ...
        
        def withMode(self, writeMode: 'WriteMode') -> str: ...
        
        def withMute(self, b: bool) -> str: ...
        
        def withPropertyGroups(self, t: typing.List[com.dropbox.core.v2.fileproperties.PropertyGroup]) -> str: ...
        
        def withStrictConflict(self, b: bool) -> str: ...
        
        
    
class ContentSyncSetting:
    def __init__(self, s: str, syncSetting: 'SyncSetting') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getId(self) -> str: ...
    
    def getSyncSetting(self) -> 'SyncSetting': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.files.ContentSyncSetting.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class ContentSyncSettingArg:
    def __init__(self, s: str, syncSettingArg: 'SyncSettingArg') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getId(self) -> str: ...
    
    def getSyncSetting(self) -> 'SyncSettingArg': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.files.ContentSyncSettingArg.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class CopyBatchBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'RelocationBatchLaunch': ...
    
    def withAllowOwnershipTransfer(self, b: bool) -> 'CopyBatchBuilder': ...
    
    def withAllowSharedFolder(self, b: bool) -> 'CopyBatchBuilder': ...
    
    def withAutorename(self, b: bool) -> 'CopyBatchBuilder': ...
    
    
class CopyBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'Metadata': ...
    
    def withAllowOwnershipTransfer(self, b: bool) -> 'CopyBuilder': ...
    
    def withAllowSharedFolder(self, b: bool) -> 'CopyBuilder': ...
    
    def withAutorename(self, b: bool) -> 'CopyBuilder': ...
    
    
class CopyV2Builder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'RelocationResult': ...
    
    def withAllowOwnershipTransfer(self, b: bool) -> 'CopyV2Builder': ...
    
    def withAllowSharedFolder(self, b: bool) -> 'CopyV2Builder': ...
    
    def withAutorename(self, b: bool) -> 'CopyV2Builder': ...
    
    
class CreateFolderBatchBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'CreateFolderBatchLaunch': ...
    
    def withAutorename(self, b: bool) -> 'CreateFolderBatchBuilder': ...
    
    def withForceAsync(self, b: bool) -> 'CreateFolderBatchBuilder': ...
    
    
class CreateFolderBatchError(java.lang.Enum):
    OTHER = 'OTHER'
    TOO_MANY_FILES = 'TOO_MANY_FILES'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'CreateFolderBatchError': ...
    
    @staticmethod
    def values() -> typing.List['CreateFolderBatchError']: ...
    
    
class CreateFolderBatchJobStatus:
    IN_PROGRESS = '"in_progress"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def complete(createFolderBatchResult: 'CreateFolderBatchResult') -> 'CreateFolderBatchJobStatus': ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failed(createFolderBatchError: CreateFolderBatchError) -> 'CreateFolderBatchJobStatus': ...
    
    def getCompleteValue(self) -> 'CreateFolderBatchResult': ...
    
    def getFailedValue(self) -> CreateFolderBatchError: ...
    
    def hashCode(self) -> int: ...
    
    def isComplete(self) -> bool: ...
    
    def isFailed(self) -> bool: ...
    
    def isInProgress(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        COMPLETE = 'COMPLETE'
        FAILED = 'FAILED'
        IN_PROGRESS = 'IN_PROGRESS'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class CreateFolderBatchLaunch:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def asyncJobId(s: str) -> 'CreateFolderBatchLaunch': ...
    
    @staticmethod
    def complete(createFolderBatchResult: 'CreateFolderBatchResult') -> 'CreateFolderBatchLaunch': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAsyncJobIdValue(self) -> str: ...
    
    def getCompleteValue(self) -> 'CreateFolderBatchResult': ...
    
    def hashCode(self) -> int: ...
    
    def isAsyncJobId(self) -> bool: ...
    
    def isComplete(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ASYNC_JOB_ID = 'ASYNC_JOB_ID'
        COMPLETE = 'COMPLETE'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class FileOpsResult:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class CreateFolderBatchResult(FileOpsResult):
    def __init__(self, t: typing.List['CreateFolderBatchResultEntry']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEntries(self) -> typing.List['CreateFolderBatchResultEntry']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class CreateFolderBatchResultEntry:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failure(createFolderEntryError: 'CreateFolderEntryError') -> 'CreateFolderBatchResultEntry': ...
    
    def getFailureValue(self) -> 'CreateFolderEntryError': ...
    
    def getSuccessValue(self) -> 'CreateFolderEntryResult': ...
    
    def hashCode(self) -> int: ...
    
    def isFailure(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def success(createFolderEntryResult: 'CreateFolderEntryResult') -> 'CreateFolderBatchResultEntry': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        FAILURE = 'FAILURE'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class CreateFolderEntryError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'WriteError': ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    @staticmethod
    def path(writeError: 'WriteError') -> 'CreateFolderEntryError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class CreateFolderEntryResult:
    def __init__(self, folderMetadata: 'FolderMetadata') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMetadata(self) -> 'FolderMetadata': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class CreateFolderError:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'WriteError': ...
    
    def hashCode(self) -> int: ...
    
    def isPath(self) -> bool: ...
    
    @staticmethod
    def path(writeError: 'WriteError') -> 'CreateFolderError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        PATH = 'PATH'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class CreateFolderErrorException('com.dropbox.core.DbxApiException'):
    errorValue: CreateFolderError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', createFolderError: CreateFolderError) -> None: ...
    
    
class CreateFolderResult(FileOpsResult):
    def __init__(self, folderMetadata: 'FolderMetadata') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMetadata(self) -> 'FolderMetadata': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class DbxAppFilesRequests:
    def __init__(self, c: com.dropbox.core.v2.DbxRawClientV2) -> None: ...
    
    def getThumbnailV2(self, pathOrLink: 'PathOrLink') -> typing.Any: ...
    
    def getThumbnailV2Builder(self, pathOrLink: 'PathOrLink') -> 'DbxAppGetThumbnailV2Builder': ...
    
    def listFolder(self, s: str) -> 'ListFolderResult': ...
    
    def listFolderBuilder(self, s: str) -> 'DbxAppListFolderBuilder': ...
    
    def listFolderContinue(self, s: str) -> 'ListFolderResult': ...
    
    
class DbxAppGetThumbnailV2Builder(com.dropbox.core.v2.DbxDownloadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> typing.Any: ...
    
    def withFormat(self, thumbnailFormat: 'ThumbnailFormat') -> 'DbxAppGetThumbnailV2Builder': ...
    
    def withMode(self, thumbnailMode: 'ThumbnailMode') -> 'DbxAppGetThumbnailV2Builder': ...
    
    def withSize(self, thumbnailSize: 'ThumbnailSize') -> 'DbxAppGetThumbnailV2Builder': ...
    
    
class DbxAppListFolderBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'ListFolderResult': ...
    
    def withIncludeDeleted(self, b: bool) -> 'DbxAppListFolderBuilder': ...
    
    def withIncludeHasExplicitSharedMembers(self, b: bool) -> 'DbxAppListFolderBuilder': ...
    
    def withIncludeMediaInfo(self, b: bool) -> 'DbxAppListFolderBuilder': ...
    
    def withIncludeMountedFolders(self, b: bool) -> 'DbxAppListFolderBuilder': ...
    
    def withIncludeNonDownloadableFiles(self, b: bool) -> 'DbxAppListFolderBuilder': ...
    
    def withIncludePropertyGroups(self, c: com.dropbox.core.v2.fileproperties.TemplateFilterBase) -> 'DbxAppListFolderBuilder': ...
    
    def withLimit(self, i: int) -> 'DbxAppListFolderBuilder': ...
    
    def withRecursive(self, b: bool) -> 'DbxAppListFolderBuilder': ...
    
    def withSharedLink(self, sharedLink: 'SharedLink') -> 'DbxAppListFolderBuilder': ...
    
    
class DbxUserFilesRequests:
    def __init__(self, c: com.dropbox.core.v2.DbxRawClientV2) -> None: ...
    
    def alphaGetMetadata(self, s: str) -> 'Metadata': ...
    
    def alphaGetMetadataBuilder(self, s: str) -> AlphaGetMetadataBuilder: ...
    
    def alphaUpload(self, s: str) -> AlphaUploadUploader: ...
    
    def alphaUploadBuilder(self, s: str) -> AlphaUploadBuilder: ...
    
    def copy(self, s: str, s2: str) -> 'Metadata': ...
    
    def copyBatch(self, t: typing.List['RelocationPath']) -> 'RelocationBatchLaunch': ...
    
    def copyBatchBuilder(self, t: typing.List['RelocationPath']) -> CopyBatchBuilder: ...
    
    def copyBatchCheck(self, s: str) -> 'RelocationBatchJobStatus': ...
    
    def copyBatchCheckV2(self, s: str) -> 'RelocationBatchV2JobStatus': ...
    
    def copyBatchV2(self, t: typing.List['RelocationPath']) -> 'RelocationBatchV2Launch': ...
    
    def copyBuilder(self, s: str, s2: str) -> CopyBuilder: ...
    
    def copyReferenceGet(self, s: str) -> 'GetCopyReferenceResult': ...
    
    def copyReferenceSave(self, s: str, s2: str) -> 'SaveCopyReferenceResult': ...
    
    def copyV2(self, s: str, s2: str) -> 'RelocationResult': ...
    
    def copyV2Builder(self, s: str, s2: str) -> CopyV2Builder: ...
    
    def createFolder(self, s: str) -> 'FolderMetadata': ...
    
    def createFolderBatch(self, t: typing.List[str]) -> CreateFolderBatchLaunch: ...
    
    def createFolderBatchBuilder(self, t: typing.List[str]) -> CreateFolderBatchBuilder: ...
    
    def createFolderBatchCheck(self, s: str) -> CreateFolderBatchJobStatus: ...
    
    def createFolderV2(self, s: str) -> CreateFolderResult: ...
    
    def delete(self, s: str) -> 'Metadata': ...
    
    def deleteBatch(self, t: typing.List['DeleteArg']) -> 'DeleteBatchLaunch': ...
    
    def deleteBatchCheck(self, s: str) -> 'DeleteBatchJobStatus': ...
    
    def deleteV2(self, s: str) -> 'DeleteResult': ...
    
    def download(self, s: str) -> typing.Any: ...
    
    def downloadBuilder(self, s: str) -> 'DownloadBuilder': ...
    
    def downloadZip(self, s: str) -> typing.Any: ...
    
    def downloadZipBuilder(self, s: str) -> 'DownloadZipBuilder': ...
    
    def export(self, s: str) -> typing.Any: ...
    
    def exportBuilder(self, s: str) -> 'ExportBuilder': ...
    
    def getFileLockBatch(self, t: typing.List['LockFileArg']) -> 'LockFileBatchResult': ...
    
    def getMetadata(self, s: str) -> 'Metadata': ...
    
    def getMetadataBuilder(self, s: str) -> 'GetMetadataBuilder': ...
    
    def getPreview(self, s: str) -> typing.Any: ...
    
    def getPreviewBuilder(self, s: str) -> 'GetPreviewBuilder': ...
    
    def getTemporaryLink(self, s: str) -> 'GetTemporaryLinkResult': ...
    
    def getTemporaryUploadLink(self, commitInfo: CommitInfo) -> 'GetTemporaryUploadLinkResult': ...
    
    def getThumbnail(self, s: str) -> typing.Any: ...
    
    def getThumbnailBatch(self, t: typing.List['ThumbnailArg']) -> 'GetThumbnailBatchResult': ...
    
    def getThumbnailBuilder(self, s: str) -> 'GetThumbnailBuilder': ...
    
    def getThumbnailV2(self, pathOrLink: 'PathOrLink') -> typing.Any: ...
    
    def getThumbnailV2Builder(self, pathOrLink: 'PathOrLink') -> 'DbxUserGetThumbnailV2Builder': ...
    
    def listFolder(self, s: str) -> 'ListFolderResult': ...
    
    def listFolderBuilder(self, s: str) -> 'DbxUserListFolderBuilder': ...
    
    def listFolderContinue(self, s: str) -> 'ListFolderResult': ...
    
    def listFolderGetLatestCursor(self, s: str) -> 'ListFolderGetLatestCursorResult': ...
    
    def listFolderGetLatestCursorBuilder(self, s: str) -> 'ListFolderGetLatestCursorBuilder': ...
    
    def listFolderLongpoll(self, s: str) -> 'ListFolderLongpollResult': ...
    
    def listRevisions(self, s: str) -> 'ListRevisionsResult': ...
    
    def listRevisionsBuilder(self, s: str) -> 'ListRevisionsBuilder': ...
    
    def lockFileBatch(self, t: typing.List['LockFileArg']) -> 'LockFileBatchResult': ...
    
    def move(self, s: str, s2: str) -> 'Metadata': ...
    
    def moveBatch(self, t: typing.List['RelocationPath']) -> 'RelocationBatchLaunch': ...
    
    def moveBatchBuilder(self, t: typing.List['RelocationPath']) -> 'MoveBatchBuilder': ...
    
    def moveBatchCheck(self, s: str) -> 'RelocationBatchJobStatus': ...
    
    def moveBatchCheckV2(self, s: str) -> 'RelocationBatchV2JobStatus': ...
    
    def moveBatchV2(self, t: typing.List['RelocationPath']) -> 'RelocationBatchV2Launch': ...
    
    def moveBatchV2Builder(self, t: typing.List['RelocationPath']) -> 'MoveBatchV2Builder': ...
    
    def moveBuilder(self, s: str, s2: str) -> 'MoveBuilder': ...
    
    def moveV2(self, s: str, s2: str) -> 'RelocationResult': ...
    
    def moveV2Builder(self, s: str, s2: str) -> 'MoveV2Builder': ...
    
    def paperCreate(self, s: str, importFormat: 'ImportFormat') -> 'PaperCreateUploader': ...
    
    def paperUpdate(self, s: str, importFormat: 'ImportFormat', paperDocUpdatePolicy: 'PaperDocUpdatePolicy') -> 'PaperUpdateUploader': ...
    
    def permanentlyDelete(self, s: str) -> None: ...
    
    def propertiesAdd(self, s: str, t: typing.List[com.dropbox.core.v2.fileproperties.PropertyGroup]) -> None: ...
    
    def propertiesOverwrite(self, s: str, t: typing.List[com.dropbox.core.v2.fileproperties.PropertyGroup]) -> None: ...
    
    def propertiesRemove(self, s: str, t: typing.List[str]) -> None: ...
    
    def propertiesTemplateGet(self, s: str) -> com.dropbox.core.v2.fileproperties.GetTemplateResult: ...
    
    def propertiesTemplateList(self) -> com.dropbox.core.v2.fileproperties.ListTemplateResult: ...
    
    def propertiesUpdate(self, s: str, t: typing.List[com.dropbox.core.v2.fileproperties.PropertyGroupUpdate]) -> None: ...
    
    def restore(self, s: str, s2: str) -> 'FileMetadata': ...
    
    def saveUrl(self, s: str, s2: str) -> 'SaveUrlResult': ...
    
    def saveUrlCheckJobStatus(self, s: str) -> 'SaveUrlJobStatus': ...
    
    def search(self, s: str, s2: str) -> 'SearchResult': ...
    
    def searchBuilder(self, s: str, s2: str) -> 'SearchBuilder': ...
    
    def searchContinueV2(self, s: str) -> 'SearchV2Result': ...
    
    def searchV2(self, s: str) -> 'SearchV2Result': ...
    
    def searchV2Builder(self, s: str) -> 'SearchV2Builder': ...
    
    def tagsAdd(self, s: str, s2: str) -> None: ...
    
    def tagsGet(self, t: typing.List[str]) -> 'GetTagsResult': ...
    
    def tagsRemove(self, s: str, s2: str) -> None: ...
    
    def unlockFileBatch(self, t: typing.List['UnlockFileArg']) -> 'LockFileBatchResult': ...
    
    def upload(self, s: str) -> 'UploadUploader': ...
    
    def uploadBuilder(self, s: str) -> 'UploadBuilder': ...
    
    def uploadSessionAppend(self, s: str, i: int) -> 'UploadSessionAppendUploader': ...
    
    def uploadSessionAppendV2(self, uploadSessionCursor: 'UploadSessionCursor') -> 'UploadSessionAppendV2Uploader': ...
    
    def uploadSessionAppendV2Builder(self, uploadSessionCursor: 'UploadSessionCursor') -> 'UploadSessionAppendV2Builder': ...
    
    def uploadSessionFinish(self, uploadSessionCursor: 'UploadSessionCursor', commitInfo: CommitInfo) -> 'UploadSessionFinishUploader': ...
    
    def uploadSessionFinishBatch(self, t: typing.List['UploadSessionFinishArg']) -> 'UploadSessionFinishBatchLaunch': ...
    
    def uploadSessionFinishBatchCheck(self, s: str) -> 'UploadSessionFinishBatchJobStatus': ...
    
    def uploadSessionFinishBatchV2(self, t: typing.List['UploadSessionFinishArg']) -> 'UploadSessionFinishBatchResult': ...
    
    def uploadSessionStart(self) -> 'UploadSessionStartUploader': ...
    
    def uploadSessionStartBatch(self, i: int) -> 'UploadSessionStartBatchResult': ...
    
    def uploadSessionStartBuilder(self) -> 'UploadSessionStartBuilder': ...
    
    
class DbxUserGetThumbnailV2Builder(com.dropbox.core.v2.DbxDownloadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> typing.Any: ...
    
    def withFormat(self, thumbnailFormat: 'ThumbnailFormat') -> 'DbxUserGetThumbnailV2Builder': ...
    
    def withMode(self, thumbnailMode: 'ThumbnailMode') -> 'DbxUserGetThumbnailV2Builder': ...
    
    def withSize(self, thumbnailSize: 'ThumbnailSize') -> 'DbxUserGetThumbnailV2Builder': ...
    
    
class DbxUserListFolderBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'ListFolderResult': ...
    
    def withIncludeDeleted(self, b: bool) -> 'DbxUserListFolderBuilder': ...
    
    def withIncludeHasExplicitSharedMembers(self, b: bool) -> 'DbxUserListFolderBuilder': ...
    
    def withIncludeMediaInfo(self, b: bool) -> 'DbxUserListFolderBuilder': ...
    
    def withIncludeMountedFolders(self, b: bool) -> 'DbxUserListFolderBuilder': ...
    
    def withIncludeNonDownloadableFiles(self, b: bool) -> 'DbxUserListFolderBuilder': ...
    
    def withIncludePropertyGroups(self, c: com.dropbox.core.v2.fileproperties.TemplateFilterBase) -> 'DbxUserListFolderBuilder': ...
    
    def withLimit(self, i: int) -> 'DbxUserListFolderBuilder': ...
    
    def withRecursive(self, b: bool) -> 'DbxUserListFolderBuilder': ...
    
    def withSharedLink(self, sharedLink: 'SharedLink') -> 'DbxUserListFolderBuilder': ...
    
    
class DeleteArg:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getParentRev(self) -> str: ...
    
    def getPath(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class DeleteBatchError(java.lang.Enum):
    OTHER = 'OTHER'
    TOO_MANY_WRITE_OPERATIONS = 'TOO_MANY_WRITE_OPERATIONS'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'DeleteBatchError': ...
    
    @staticmethod
    def values() -> typing.List['DeleteBatchError']: ...
    
    
class DeleteBatchJobStatus:
    IN_PROGRESS = '"in_progress"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def complete(deleteBatchResult: 'DeleteBatchResult') -> 'DeleteBatchJobStatus': ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failed(deleteBatchError: DeleteBatchError) -> 'DeleteBatchJobStatus': ...
    
    def getCompleteValue(self) -> 'DeleteBatchResult': ...
    
    def getFailedValue(self) -> DeleteBatchError: ...
    
    def hashCode(self) -> int: ...
    
    def isComplete(self) -> bool: ...
    
    def isFailed(self) -> bool: ...
    
    def isInProgress(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        COMPLETE = 'COMPLETE'
        FAILED = 'FAILED'
        IN_PROGRESS = 'IN_PROGRESS'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class DeleteBatchLaunch:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def asyncJobId(s: str) -> 'DeleteBatchLaunch': ...
    
    @staticmethod
    def complete(deleteBatchResult: 'DeleteBatchResult') -> 'DeleteBatchLaunch': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAsyncJobIdValue(self) -> str: ...
    
    def getCompleteValue(self) -> 'DeleteBatchResult': ...
    
    def hashCode(self) -> int: ...
    
    def isAsyncJobId(self) -> bool: ...
    
    def isComplete(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ASYNC_JOB_ID = 'ASYNC_JOB_ID'
        COMPLETE = 'COMPLETE'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class DeleteBatchResult(FileOpsResult):
    def __init__(self, t: typing.List['DeleteBatchResultEntry']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEntries(self) -> typing.List['DeleteBatchResultEntry']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class DeleteBatchResultData:
    def __init__(self, metadata: 'Metadata') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMetadata(self) -> 'Metadata': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class DeleteBatchResultEntry:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failure(deleteError: 'DeleteError') -> 'DeleteBatchResultEntry': ...
    
    def getFailureValue(self) -> 'DeleteError': ...
    
    def getSuccessValue(self) -> DeleteBatchResultData: ...
    
    def hashCode(self) -> int: ...
    
    def isFailure(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def success(deleteBatchResultData: DeleteBatchResultData) -> 'DeleteBatchResultEntry': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        FAILURE = 'FAILURE'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class DeleteError:
    OTHER = '"other"'
    TOO_MANY_FILES = '"too_many_files"'
    TOO_MANY_WRITE_OPERATIONS = '"too_many_write_operations"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathLookupValue(self) -> 'LookupError': ...
    
    def getPathWriteValue(self) -> 'WriteError': ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPathLookup(self) -> bool: ...
    
    def isPathWrite(self) -> bool: ...
    
    def isTooManyFiles(self) -> bool: ...
    
    def isTooManyWriteOperations(self) -> bool: ...
    
    @staticmethod
    def pathLookup(lookupError: 'LookupError') -> 'DeleteError': ...
    
    @staticmethod
    def pathWrite(writeError: 'WriteError') -> 'DeleteError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH_LOOKUP = 'PATH_LOOKUP'
        PATH_WRITE = 'PATH_WRITE'
        TOO_MANY_FILES = 'TOO_MANY_FILES'
        TOO_MANY_WRITE_OPERATIONS = 'TOO_MANY_WRITE_OPERATIONS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class DeleteErrorException('com.dropbox.core.DbxApiException'):
    errorValue: DeleteError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', deleteError: DeleteError) -> None: ...
    
    
class DeleteResult(FileOpsResult):
    def __init__(self, metadata: 'Metadata') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMetadata(self) -> 'Metadata': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class Metadata:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getName(self) -> str: ...
    
    def getParentSharedFolderId(self) -> str: ...
    
    def getPathDisplay(self) -> str: ...
    
    def getPathLower(self) -> str: ...
    
    def getPreviewUrl(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'Metadata': ...
        
        def withParentSharedFolderId(self, s: str) -> str: ...
        
        def withPathDisplay(self, s: str) -> str: ...
        
        def withPathLower(self, s: str) -> str: ...
        
        def withPreviewUrl(self, s: str) -> str: ...
        
        
    
class DeletedMetadata(Metadata):
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getName(self) -> str: ...
    
    def getParentSharedFolderId(self) -> str: ...
    
    def getPathDisplay(self) -> str: ...
    
    def getPathLower(self) -> str: ...
    
    def getPreviewUrl(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> Metadata: ...
        
        def withParentSharedFolderId(self, s: str) -> str: ...
        
        def withPathDisplay(self, s: str) -> str: ...
        
        def withPathLower(self, s: str) -> str: ...
        
        def withPreviewUrl(self, s: str) -> str: ...
        
        
    
class Dimensions:
    def __init__(self, i: int, i2: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getHeight(self) -> int: ...
    
    def getWidth(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class DownloadBuilder(com.dropbox.core.v2.DbxDownloadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> typing.Any: ...
    
    def withRev(self, s: str) -> 'DownloadBuilder': ...
    
    
class DownloadError:
    OTHER = '"other"'
    UNSUPPORTED_FILE = '"unsupported_file"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isUnsupportedFile(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'DownloadError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        UNSUPPORTED_FILE = 'UNSUPPORTED_FILE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class DownloadErrorException('com.dropbox.core.DbxApiException'):
    errorValue: DownloadError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', downloadError: DownloadError) -> None: ...
    
    
class DownloadZipBuilder(com.dropbox.core.v2.DbxDownloadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> typing.Any: ...
    
    
class DownloadZipError:
    OTHER = '"other"'
    TOO_LARGE = '"too_large"'
    TOO_MANY_FILES = '"too_many_files"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isTooLarge(self) -> bool: ...
    
    def isTooManyFiles(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'DownloadZipError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        TOO_LARGE = 'TOO_LARGE'
        TOO_MANY_FILES = 'TOO_MANY_FILES'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class DownloadZipErrorException('com.dropbox.core.DbxApiException'):
    errorValue: DownloadZipError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', downloadZipError: DownloadZipError) -> None: ...
    
    
class DownloadZipResult:
    def __init__(self, folderMetadata: 'FolderMetadata') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMetadata(self) -> 'FolderMetadata': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ExportArg:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getExportFormat(self) -> str: ...
    
    def getPath(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.files.ExportArg.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class ExportBuilder(com.dropbox.core.v2.DbxDownloadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> typing.Any: ...
    
    def withExportFormat(self, s: str) -> 'ExportBuilder': ...
    
    
class ExportError:
    INVALID_EXPORT_FORMAT = '"invalid_export_format"'
    NON_EXPORTABLE = '"non_exportable"'
    OTHER = '"other"'
    RETRY_ERROR = '"retry_error"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def hashCode(self) -> int: ...
    
    def isInvalidExportFormat(self) -> bool: ...
    
    def isNonExportable(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isRetryError(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'ExportError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.files.ExportError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        INVALID_EXPORT_FORMAT = 'INVALID_EXPORT_FORMAT'
        NON_EXPORTABLE = 'NON_EXPORTABLE'
        OTHER = 'OTHER'
        PATH = 'PATH'
        RETRY_ERROR = 'RETRY_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ExportErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ExportError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', exportError: ExportError) -> None: ...
    
    
class ExportInfo:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getExportAs(self) -> str: ...
    
    def getExportOptions(self) -> typing.List[str]: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'ExportInfo': ...
        
        def withExportAs(self, s: str) -> str: ...
        
        def withExportOptions(self, t: typing.List[str]) -> str: ...
        
        
    
class ExportMetadata:
    def __init__(self, s: str, i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getExportHash(self) -> str: ...
    
    def getName(self) -> str: ...
    
    def getPaperRevision(self) -> int: ...
    
    def getSize(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str, i: int) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'ExportMetadata': ...
        
        def withExportHash(self, s: str) -> str: ...
        
        def withPaperRevision(self, i: int) -> str: ...
        
        
    
class ExportResult:
    def __init__(self, exportMetadata: ExportMetadata, fileMetadata: 'FileMetadata') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getExportMetadata(self) -> ExportMetadata: ...
    
    def getFileMetadata(self) -> 'FileMetadata': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.files.ExportResult.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class FileCategory(java.lang.Enum):
    AUDIO = 'AUDIO'
    DOCUMENT = 'DOCUMENT'
    FOLDER = 'FOLDER'
    IMAGE = 'IMAGE'
    OTHER = 'OTHER'
    OTHERS = 'OTHERS'
    PAPER = 'PAPER'
    PDF = 'PDF'
    PRESENTATION = 'PRESENTATION'
    SPREADSHEET = 'SPREADSHEET'
    VIDEO = 'VIDEO'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'FileCategory': ...
    
    @staticmethod
    def values() -> typing.List['FileCategory']: ...
    
    
class FileLock:
    def __init__(self, fileLockContent: 'FileLockContent') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getContent(self) -> 'FileLockContent': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class FileLockContent:
    OTHER = '"other"'
    UNLOCKED = '"unlocked"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getSingleUserValue(self) -> 'SingleUserLock': ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isSingleUser(self) -> bool: ...
    
    def isUnlocked(self) -> bool: ...
    
    @staticmethod
    def singleUser(singleUserLock: 'SingleUserLock') -> 'FileLockContent': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        SINGLE_USER = 'SINGLE_USER'
        UNLOCKED = 'UNLOCKED'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class FileLockMetadata:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCreated(self) -> java.util.Date: ...
    
    def getIsLockholder(self) -> bool: ...
    
    def getLockholderAccountId(self) -> str: ...
    
    def getLockholderName(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'FileLockMetadata': ...
        
        def withCreated(self, j: java.util.Date) -> str: ...
        
        def withIsLockholder(self, b: bool) -> str: ...
        
        def withLockholderAccountId(self, s: str) -> str: ...
        
        def withLockholderName(self, s: str) -> str: ...
        
        
    
class FileMetadata(Metadata):
    def __init__(self, s: str, s2: str, j: java.util.Date, j2: java.util.Date, s3: str, i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getClientModified(self) -> java.util.Date: ...
    
    def getContentHash(self) -> str: ...
    
    def getExportInfo(self) -> ExportInfo: ...
    
    def getFileLockInfo(self) -> FileLockMetadata: ...
    
    def getHasExplicitSharedMembers(self) -> bool: ...
    
    def getId(self) -> str: ...
    
    def getIsDownloadable(self) -> bool: ...
    
    def getMediaInfo(self) -> 'MediaInfo': ...
    
    def getName(self) -> str: ...
    
    def getParentSharedFolderId(self) -> str: ...
    
    def getPathDisplay(self) -> str: ...
    
    def getPathLower(self) -> str: ...
    
    def getPreviewUrl(self) -> str: ...
    
    def getPropertyGroups(self) -> typing.List[com.dropbox.core.v2.fileproperties.PropertyGroup]: ...
    
    def getRev(self) -> str: ...
    
    def getServerModified(self) -> java.util.Date: ...
    
    def getSharingInfo(self) -> 'FileSharingInfo': ...
    
    def getSize(self) -> int: ...
    
    def getSymlinkInfo(self) -> 'SymlinkInfo': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> Metadata: ...
        
        def withContentHash(self, s: str) -> str: ...
        
        def withExportInfo(self, exportInfo: ExportInfo) -> str: ...
        
        def withFileLockInfo(self, fileLockMetadata: FileLockMetadata) -> str: ...
        
        def withHasExplicitSharedMembers(self, b: bool) -> str: ...
        
        def withIsDownloadable(self, b: bool) -> str: ...
        
        def withMediaInfo(self, mediaInfo: 'MediaInfo') -> str: ...
        
        def withParentSharedFolderId(self, s: str) -> str: ...
        
        def withPathDisplay(self, s: str) -> str: ...
        
        def withPathLower(self, s: str) -> str: ...
        
        def withPreviewUrl(self, s: str) -> str: ...
        
        def withPropertyGroups(self, t: typing.List[com.dropbox.core.v2.fileproperties.PropertyGroup]) -> str: ...
        
        def withSharingInfo(self, fileSharingInfo: 'FileSharingInfo') -> str: ...
        
        def withSymlinkInfo(self, symlinkInfo: 'SymlinkInfo') -> str: ...
        
        
    
class SharingInfo:
    def __init__(self, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getReadOnly(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class FileSharingInfo(SharingInfo):
    def __init__(self, b: bool, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getModifiedBy(self) -> str: ...
    
    def getParentSharedFolderId(self) -> str: ...
    
    def getReadOnly(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class FileStatus(java.lang.Enum):
    ACTIVE = 'ACTIVE'
    DELETED = 'DELETED'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'FileStatus': ...
    
    @staticmethod
    def values() -> typing.List['FileStatus']: ...
    
    
class FolderMetadata(Metadata):
    def __init__(self, s: str, s2: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getId(self) -> str: ...
    
    def getName(self) -> str: ...
    
    def getParentSharedFolderId(self) -> str: ...
    
    def getPathDisplay(self) -> str: ...
    
    def getPathLower(self) -> str: ...
    
    def getPreviewUrl(self) -> str: ...
    
    def getPropertyGroups(self) -> typing.List[com.dropbox.core.v2.fileproperties.PropertyGroup]: ...
    
    def getSharedFolderId(self) -> str: ...
    
    def getSharingInfo(self) -> 'FolderSharingInfo': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> Metadata: ...
        
        def withParentSharedFolderId(self, s: str) -> str: ...
        
        def withPathDisplay(self, s: str) -> str: ...
        
        def withPathLower(self, s: str) -> str: ...
        
        def withPreviewUrl(self, s: str) -> str: ...
        
        def withPropertyGroups(self, t: typing.List[com.dropbox.core.v2.fileproperties.PropertyGroup]) -> str: ...
        
        def withSharedFolderId(self, s: str) -> str: ...
        
        def withSharingInfo(self, folderSharingInfo: 'FolderSharingInfo') -> str: ...
        
        
    
class FolderSharingInfo(SharingInfo):
    def __init__(self, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getNoAccess(self) -> bool: ...
    
    def getParentSharedFolderId(self) -> str: ...
    
    def getReadOnly(self) -> bool: ...
    
    def getSharedFolderId(self) -> str: ...
    
    def getTraverseOnly(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(b: bool) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'FolderSharingInfo': ...
        
        def withNoAccess(self, b: bool) -> str: ...
        
        def withParentSharedFolderId(self, s: str) -> str: ...
        
        def withSharedFolderId(self, s: str) -> str: ...
        
        def withTraverseOnly(self, b: bool) -> str: ...
        
        
    
class GetCopyReferenceError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'GetCopyReferenceError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GetCopyReferenceErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GetCopyReferenceError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', getCopyReferenceError: GetCopyReferenceError) -> None: ...
    
    
class GetCopyReferenceResult:
    def __init__(self, metadata: Metadata, s: str, j: java.util.Date) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCopyReference(self) -> str: ...
    
    def getExpires(self) -> java.util.Date: ...
    
    def getMetadata(self) -> Metadata: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GetMetadataBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> Metadata: ...
    
    def withIncludeDeleted(self, b: bool) -> 'GetMetadataBuilder': ...
    
    def withIncludeHasExplicitSharedMembers(self, b: bool) -> 'GetMetadataBuilder': ...
    
    def withIncludeMediaInfo(self, b: bool) -> 'GetMetadataBuilder': ...
    
    def withIncludePropertyGroups(self, c: com.dropbox.core.v2.fileproperties.TemplateFilterBase) -> 'GetMetadataBuilder': ...
    
    
class GetMetadataError:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def hashCode(self) -> int: ...
    
    def isPath(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'GetMetadataError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        PATH = 'PATH'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GetMetadataErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GetMetadataError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', getMetadataError: GetMetadataError) -> None: ...
    
    
class GetPreviewBuilder(com.dropbox.core.v2.DbxDownloadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> typing.Any: ...
    
    def withRev(self, s: str) -> 'GetPreviewBuilder': ...
    
    
class GetTagsResult:
    def __init__(self, t: typing.List['PathToTags']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathsToTags(self) -> typing.List['PathToTags']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GetTemporaryLinkError:
    EMAIL_NOT_VERIFIED = '"email_not_verified"'
    NOT_ALLOWED = '"not_allowed"'
    OTHER = '"other"'
    UNSUPPORTED_FILE = '"unsupported_file"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def hashCode(self) -> int: ...
    
    def isEmailNotVerified(self) -> bool: ...
    
    def isNotAllowed(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isUnsupportedFile(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'GetTemporaryLinkError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        EMAIL_NOT_VERIFIED = 'EMAIL_NOT_VERIFIED'
        NOT_ALLOWED = 'NOT_ALLOWED'
        OTHER = 'OTHER'
        PATH = 'PATH'
        UNSUPPORTED_FILE = 'UNSUPPORTED_FILE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GetTemporaryLinkErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GetTemporaryLinkError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', getTemporaryLinkError: GetTemporaryLinkError) -> None: ...
    
    
class GetTemporaryLinkResult:
    def __init__(self, fileMetadata: FileMetadata, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLink(self) -> str: ...
    
    def getMetadata(self) -> FileMetadata: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GetTemporaryUploadLinkResult:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLink(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GetThumbnailBatchError(java.lang.Enum):
    OTHER = 'OTHER'
    TOO_MANY_FILES = 'TOO_MANY_FILES'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GetThumbnailBatchError': ...
    
    @staticmethod
    def values() -> typing.List['GetThumbnailBatchError']: ...
    
    
class GetThumbnailBatchErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GetThumbnailBatchError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', getThumbnailBatchError: GetThumbnailBatchError) -> None: ...
    
    
class GetThumbnailBatchResult:
    def __init__(self, t: typing.List['GetThumbnailBatchResultEntry']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEntries(self) -> typing.List['GetThumbnailBatchResultEntry']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GetThumbnailBatchResultData:
    def __init__(self, fileMetadata: FileMetadata, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMetadata(self) -> FileMetadata: ...
    
    def getThumbnail(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GetThumbnailBatchResultEntry:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failure(thumbnailError: 'ThumbnailError') -> 'GetThumbnailBatchResultEntry': ...
    
    def getFailureValue(self) -> 'ThumbnailError': ...
    
    def getSuccessValue(self) -> GetThumbnailBatchResultData: ...
    
    def hashCode(self) -> int: ...
    
    def isFailure(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def success(getThumbnailBatchResultData: GetThumbnailBatchResultData) -> 'GetThumbnailBatchResultEntry': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        FAILURE = 'FAILURE'
        OTHER = 'OTHER'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GetThumbnailBuilder(com.dropbox.core.v2.DbxDownloadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> typing.Any: ...
    
    def withFormat(self, thumbnailFormat: 'ThumbnailFormat') -> 'GetThumbnailBuilder': ...
    
    def withMode(self, thumbnailMode: 'ThumbnailMode') -> 'GetThumbnailBuilder': ...
    
    def withSize(self, thumbnailSize: 'ThumbnailSize') -> 'GetThumbnailBuilder': ...
    
    
class GpsCoordinates:
    def __init__(self, f: float, f2: float) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLatitude(self) -> float: ...
    
    def getLongitude(self) -> float: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class HighlightSpan:
    def __init__(self, s: str, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getHighlightStr(self) -> str: ...
    
    def getIsHighlighted(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ImportFormat(java.lang.Enum):
    HTML = 'HTML'
    MARKDOWN = 'MARKDOWN'
    OTHER = 'OTHER'
    PLAIN_TEXT = 'PLAIN_TEXT'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ImportFormat': ...
    
    @staticmethod
    def values() -> typing.List['ImportFormat']: ...
    
    
class ListFolderContinueError:
    OTHER = '"other"'
    RESET = '"reset"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isReset(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'ListFolderContinueError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        RESET = 'RESET'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ListFolderContinueErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListFolderContinueError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listFolderContinueError: ListFolderContinueError) -> None: ...
    
    
class ListFolderError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def getTemplateErrorValue(self) -> com.dropbox.core.v2.fileproperties.TemplateError: ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isTemplateError(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'ListFolderError': ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def templateError(c: com.dropbox.core.v2.fileproperties.TemplateError) -> 'ListFolderError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        TEMPLATE_ERROR = 'TEMPLATE_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ListFolderErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListFolderError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listFolderError: ListFolderError) -> None: ...
    
    
class ListFolderGetLatestCursorBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'ListFolderGetLatestCursorResult': ...
    
    def withIncludeDeleted(self, b: bool) -> 'ListFolderGetLatestCursorBuilder': ...
    
    def withIncludeHasExplicitSharedMembers(self, b: bool) -> 'ListFolderGetLatestCursorBuilder': ...
    
    def withIncludeMediaInfo(self, b: bool) -> 'ListFolderGetLatestCursorBuilder': ...
    
    def withIncludeMountedFolders(self, b: bool) -> 'ListFolderGetLatestCursorBuilder': ...
    
    def withIncludeNonDownloadableFiles(self, b: bool) -> 'ListFolderGetLatestCursorBuilder': ...
    
    def withIncludePropertyGroups(self, c: com.dropbox.core.v2.fileproperties.TemplateFilterBase) -> 'ListFolderGetLatestCursorBuilder': ...
    
    def withLimit(self, i: int) -> 'ListFolderGetLatestCursorBuilder': ...
    
    def withRecursive(self, b: bool) -> 'ListFolderGetLatestCursorBuilder': ...
    
    def withSharedLink(self, sharedLink: 'SharedLink') -> 'ListFolderGetLatestCursorBuilder': ...
    
    
class ListFolderGetLatestCursorResult:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListFolderLongpollError(java.lang.Enum):
    OTHER = 'OTHER'
    RESET = 'RESET'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ListFolderLongpollError': ...
    
    @staticmethod
    def values() -> typing.List['ListFolderLongpollError']: ...
    
    
class ListFolderLongpollErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListFolderLongpollError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listFolderLongpollError: ListFolderLongpollError) -> None: ...
    
    
class ListFolderLongpollResult:
    def __init__(self, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getBackoff(self) -> int: ...
    
    def getChanges(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListFolderResult:
    def __init__(self, t: typing.List[Metadata], s: str, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getEntries(self) -> typing.List[Metadata]: ...
    
    def getHasMore(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListRevisionsBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'ListRevisionsResult': ...
    
    def withLimit(self, i: int) -> 'ListRevisionsBuilder': ...
    
    def withMode(self, listRevisionsMode: 'ListRevisionsMode') -> 'ListRevisionsBuilder': ...
    
    
class ListRevisionsError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'ListRevisionsError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ListRevisionsErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListRevisionsError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listRevisionsError: ListRevisionsError) -> None: ...
    
    
class ListRevisionsMode(java.lang.Enum):
    ID = 'ID'
    OTHER = 'OTHER'
    PATH = 'PATH'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ListRevisionsMode': ...
    
    @staticmethod
    def values() -> typing.List['ListRevisionsMode']: ...
    
    
class ListRevisionsResult:
    def __init__(self, b: bool, t: typing.List[FileMetadata]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEntries(self) -> typing.List[FileMetadata]: ...
    
    def getIsDeleted(self) -> bool: ...
    
    def getServerDeleted(self) -> java.util.Date: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class LockConflictError:
    def __init__(self, fileLock: FileLock) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLock(self) -> FileLock: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class LockFileArg:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPath(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class LockFileBatchResult(FileOpsResult):
    def __init__(self, t: typing.List['LockFileResultEntry']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEntries(self) -> typing.List['LockFileResultEntry']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class LockFileError:
    CANNOT_BE_LOCKED = '"cannot_be_locked"'
    FILE_NOT_SHARED = '"file_not_shared"'
    INTERNAL_ERROR = '"internal_error"'
    NO_WRITE_PERMISSION = '"no_write_permission"'
    OTHER = '"other"'
    TOO_MANY_FILES = '"too_many_files"'
    TOO_MANY_WRITE_OPERATIONS = '"too_many_write_operations"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLockConflictValue(self) -> LockConflictError: ...
    
    def getPathLookupValue(self) -> 'LookupError': ...
    
    def hashCode(self) -> int: ...
    
    def isCannotBeLocked(self) -> bool: ...
    
    def isFileNotShared(self) -> bool: ...
    
    def isInternalError(self) -> bool: ...
    
    def isLockConflict(self) -> bool: ...
    
    def isNoWritePermission(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPathLookup(self) -> bool: ...
    
    def isTooManyFiles(self) -> bool: ...
    
    def isTooManyWriteOperations(self) -> bool: ...
    
    @staticmethod
    def lockConflict(lockConflictError: LockConflictError) -> 'LockFileError': ...
    
    @staticmethod
    def pathLookup(lookupError: 'LookupError') -> 'LockFileError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        CANNOT_BE_LOCKED = 'CANNOT_BE_LOCKED'
        FILE_NOT_SHARED = 'FILE_NOT_SHARED'
        INTERNAL_ERROR = 'INTERNAL_ERROR'
        LOCK_CONFLICT = 'LOCK_CONFLICT'
        NO_WRITE_PERMISSION = 'NO_WRITE_PERMISSION'
        OTHER = 'OTHER'
        PATH_LOOKUP = 'PATH_LOOKUP'
        TOO_MANY_FILES = 'TOO_MANY_FILES'
        TOO_MANY_WRITE_OPERATIONS = 'TOO_MANY_WRITE_OPERATIONS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class LockFileErrorException('com.dropbox.core.DbxApiException'):
    errorValue: LockFileError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', lockFileError: LockFileError) -> None: ...
    
    
class LockFileResult:
    def __init__(self, metadata: Metadata, fileLock: FileLock) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLock(self) -> FileLock: ...
    
    def getMetadata(self) -> Metadata: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class LockFileResultEntry:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failure(lockFileError: LockFileError) -> 'LockFileResultEntry': ...
    
    def getFailureValue(self) -> LockFileError: ...
    
    def getSuccessValue(self) -> LockFileResult: ...
    
    def hashCode(self) -> int: ...
    
    def isFailure(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def success(lockFileResult: LockFileResult) -> 'LockFileResultEntry': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        FAILURE = 'FAILURE'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class LookupError:
    LOCKED = '"locked"'
    NOT_FILE = '"not_file"'
    NOT_FOLDER = '"not_folder"'
    NOT_FOUND = '"not_found"'
    OTHER = '"other"'
    RESTRICTED_CONTENT = '"restricted_content"'
    UNSUPPORTED_CONTENT_TYPE = '"unsupported_content_type"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMalformedPathValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isLocked(self) -> bool: ...
    
    def isMalformedPath(self) -> bool: ...
    
    def isNotFile(self) -> bool: ...
    
    def isNotFolder(self) -> bool: ...
    
    def isNotFound(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isRestrictedContent(self) -> bool: ...
    
    def isUnsupportedContentType(self) -> bool: ...
    
    @staticmethod
    def malformedPath() -> 'LookupError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.files.LookupError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        LOCKED = 'LOCKED'
        MALFORMED_PATH = 'MALFORMED_PATH'
        NOT_FILE = 'NOT_FILE'
        NOT_FOLDER = 'NOT_FOLDER'
        NOT_FOUND = 'NOT_FOUND'
        OTHER = 'OTHER'
        RESTRICTED_CONTENT = 'RESTRICTED_CONTENT'
        UNSUPPORTED_CONTENT_TYPE = 'UNSUPPORTED_CONTENT_TYPE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class MediaInfo:
    PENDING = '"pending"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMetadataValue(self) -> 'MediaMetadata': ...
    
    def hashCode(self) -> int: ...
    
    def isMetadata(self) -> bool: ...
    
    def isPending(self) -> bool: ...
    
    @staticmethod
    def metadata(mediaMetadata: 'MediaMetadata') -> 'MediaInfo': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        METADATA = 'METADATA'
        PENDING = 'PENDING'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class MediaMetadata:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDimensions(self) -> Dimensions: ...
    
    def getLocation(self) -> GpsCoordinates: ...
    
    def getTimeTaken(self) -> java.util.Date: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'MediaMetadata': ...
        
        def withDimensions(self, dimensions: Dimensions) -> str: ...
        
        def withLocation(self, gpsCoordinates: GpsCoordinates) -> str: ...
        
        def withTimeTaken(self, j: java.util.Date) -> str: ...
        
        
    
class MetadataV2:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMetadataValue(self) -> Metadata: ...
    
    def hashCode(self) -> int: ...
    
    def isMetadata(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    @staticmethod
    def metadata(metadata: Metadata) -> 'MetadataV2': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        METADATA = 'METADATA'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class MinimalFileLinkMetadata:
    def __init__(self, s: str, s2: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getId(self) -> str: ...
    
    def getPath(self) -> str: ...
    
    def getRev(self) -> str: ...
    
    def getUrl(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str, s2: str) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'MinimalFileLinkMetadata': ...
        
        def withId(self, s: str) -> str: ...
        
        def withPath(self, s: str) -> str: ...
        
        
    
class MoveBatchBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'RelocationBatchLaunch': ...
    
    def withAllowOwnershipTransfer(self, b: bool) -> 'MoveBatchBuilder': ...
    
    def withAllowSharedFolder(self, b: bool) -> 'MoveBatchBuilder': ...
    
    def withAutorename(self, b: bool) -> 'MoveBatchBuilder': ...
    
    
class MoveBatchV2Builder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'RelocationBatchV2Launch': ...
    
    def withAllowOwnershipTransfer(self, b: bool) -> 'MoveBatchV2Builder': ...
    
    def withAutorename(self, b: bool) -> 'MoveBatchV2Builder': ...
    
    
class MoveBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> Metadata: ...
    
    def withAllowOwnershipTransfer(self, b: bool) -> 'MoveBuilder': ...
    
    def withAllowSharedFolder(self, b: bool) -> 'MoveBuilder': ...
    
    def withAutorename(self, b: bool) -> 'MoveBuilder': ...
    
    
class MoveIntoFamilyError(java.lang.Enum):
    IS_SHARED_FOLDER = 'IS_SHARED_FOLDER'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MoveIntoFamilyError': ...
    
    @staticmethod
    def values() -> typing.List['MoveIntoFamilyError']: ...
    
    
class MoveIntoVaultError(java.lang.Enum):
    IS_SHARED_FOLDER = 'IS_SHARED_FOLDER'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MoveIntoVaultError': ...
    
    @staticmethod
    def values() -> typing.List['MoveIntoVaultError']: ...
    
    
class MoveV2Builder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'RelocationResult': ...
    
    def withAllowOwnershipTransfer(self, b: bool) -> 'MoveV2Builder': ...
    
    def withAllowSharedFolder(self, b: bool) -> 'MoveV2Builder': ...
    
    def withAutorename(self, b: bool) -> 'MoveV2Builder': ...
    
    
class PaperCreateError(java.lang.Enum):
    CONTENT_MALFORMED = 'CONTENT_MALFORMED'
    DOC_LENGTH_EXCEEDED = 'DOC_LENGTH_EXCEEDED'
    EMAIL_UNVERIFIED = 'EMAIL_UNVERIFIED'
    IMAGE_SIZE_EXCEEDED = 'IMAGE_SIZE_EXCEEDED'
    INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'
    INVALID_FILE_EXTENSION = 'INVALID_FILE_EXTENSION'
    INVALID_PATH = 'INVALID_PATH'
    OTHER = 'OTHER'
    PAPER_DISABLED = 'PAPER_DISABLED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'PaperCreateError': ...
    
    @staticmethod
    def values() -> typing.List['PaperCreateError']: ...
    
    
class PaperCreateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: PaperCreateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', paperCreateError: PaperCreateError) -> None: ...
    
    
class PaperCreateResult:
    def __init__(self, s: str, s2: str, s3: str, i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFileId(self) -> str: ...
    
    def getPaperRevision(self) -> int: ...
    
    def getResultPath(self) -> str: ...
    
    def getUrl(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class PaperCreateUploader('com.dropbox.core.DbxUploader'):
    def __init__(self, s: str, s2: str) -> None: ...
    
    
class PaperDocUpdatePolicy(java.lang.Enum):
    APPEND = 'APPEND'
    OTHER = 'OTHER'
    OVERWRITE = 'OVERWRITE'
    PREPEND = 'PREPEND'
    UPDATE = 'UPDATE'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'PaperDocUpdatePolicy': ...
    
    @staticmethod
    def values() -> typing.List['PaperDocUpdatePolicy']: ...
    
    
class PaperUpdateError:
    CONTENT_MALFORMED = '"content_malformed"'
    DOC_ARCHIVED = '"doc_archived"'
    DOC_DELETED = '"doc_deleted"'
    DOC_LENGTH_EXCEEDED = '"doc_length_exceeded"'
    IMAGE_SIZE_EXCEEDED = '"image_size_exceeded"'
    INSUFFICIENT_PERMISSIONS = '"insufficient_permissions"'
    OTHER = '"other"'
    REVISION_MISMATCH = '"revision_mismatch"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> LookupError: ...
    
    def hashCode(self) -> int: ...
    
    def isContentMalformed(self) -> bool: ...
    
    def isDocArchived(self) -> bool: ...
    
    def isDocDeleted(self) -> bool: ...
    
    def isDocLengthExceeded(self) -> bool: ...
    
    def isImageSizeExceeded(self) -> bool: ...
    
    def isInsufficientPermissions(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isRevisionMismatch(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: LookupError) -> 'PaperUpdateError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        CONTENT_MALFORMED = 'CONTENT_MALFORMED'
        DOC_ARCHIVED = 'DOC_ARCHIVED'
        DOC_DELETED = 'DOC_DELETED'
        DOC_LENGTH_EXCEEDED = 'DOC_LENGTH_EXCEEDED'
        IMAGE_SIZE_EXCEEDED = 'IMAGE_SIZE_EXCEEDED'
        INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'
        OTHER = 'OTHER'
        PATH = 'PATH'
        REVISION_MISMATCH = 'REVISION_MISMATCH'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class PaperUpdateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: PaperUpdateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', paperUpdateError: PaperUpdateError) -> None: ...
    
    
class PaperUpdateResult:
    def __init__(self, i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPaperRevision(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class PaperUpdateUploader('com.dropbox.core.DbxUploader'):
    def __init__(self, s: str, s2: str) -> None: ...
    
    
class PathOrLink:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLinkValue(self) -> 'SharedLinkFileInfo': ...
    
    def getPathValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isLink(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    @staticmethod
    def link(sharedLinkFileInfo: 'SharedLinkFileInfo') -> 'PathOrLink': ...
    
    @staticmethod
    def path(s: str) -> 'PathOrLink': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        LINK = 'LINK'
        OTHER = 'OTHER'
        PATH = 'PATH'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class PathToTags:
    def __init__(self, s: str, t: typing.List['TagObject']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPath(self) -> str: ...
    
    def getTags(self) -> typing.List['TagObject']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class PhotoMetadata(MediaMetadata):
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDimensions(self) -> Dimensions: ...
    
    def getLocation(self) -> GpsCoordinates: ...
    
    def getTimeTaken(self) -> java.util.Date: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> MediaMetadata: ...
        
        def withDimensions(self, dimensions: Dimensions) -> str: ...
        
        def withLocation(self, gpsCoordinates: GpsCoordinates) -> str: ...
        
        def withTimeTaken(self, j: java.util.Date) -> str: ...
        
        
    
class PreviewError:
    IN_PROGRESS = '"in_progress"'
    UNSUPPORTED_CONTENT = '"unsupported_content"'
    UNSUPPORTED_EXTENSION = '"unsupported_extension"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> LookupError: ...
    
    def hashCode(self) -> int: ...
    
    def isInProgress(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isUnsupportedContent(self) -> bool: ...
    
    def isUnsupportedExtension(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: LookupError) -> 'PreviewError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        IN_PROGRESS = 'IN_PROGRESS'
        PATH = 'PATH'
        UNSUPPORTED_CONTENT = 'UNSUPPORTED_CONTENT'
        UNSUPPORTED_EXTENSION = 'UNSUPPORTED_EXTENSION'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class PreviewErrorException('com.dropbox.core.DbxApiException'):
    errorValue: PreviewError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', previewError: PreviewError) -> None: ...
    
    
class PreviewResult:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFileMetadata(self) -> FileMetadata: ...
    
    def getLinkMetadata(self) -> MinimalFileLinkMetadata: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'PreviewResult': ...
        
        def withFileMetadata(self, fileMetadata: FileMetadata) -> str: ...
        
        def withLinkMetadata(self, minimalFileLinkMetadata: MinimalFileLinkMetadata) -> str: ...
        
        
    
class RelocationBatchError:
    CANT_COPY_SHARED_FOLDER = '"cant_copy_shared_folder"'
    CANT_MOVE_FOLDER_INTO_ITSELF = '"cant_move_folder_into_itself"'
    CANT_MOVE_SHARED_FOLDER = '"cant_move_shared_folder"'
    CANT_NEST_SHARED_FOLDER = '"cant_nest_shared_folder"'
    CANT_TRANSFER_OWNERSHIP = '"cant_transfer_ownership"'
    DUPLICATED_OR_NESTED_PATHS = '"duplicated_or_nested_paths"'
    INSUFFICIENT_QUOTA = '"insufficient_quota"'
    INTERNAL_ERROR = '"internal_error"'
    OTHER = '"other"'
    TOO_MANY_FILES = '"too_many_files"'
    TOO_MANY_WRITE_OPERATIONS = '"too_many_write_operations"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def cantMoveIntoFamily(moveIntoFamilyError: MoveIntoFamilyError) -> 'RelocationBatchError': ...
    
    @staticmethod
    def cantMoveIntoVault(moveIntoVaultError: MoveIntoVaultError) -> 'RelocationBatchError': ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def fromLookup(lookupError: LookupError) -> 'RelocationBatchError': ...
    
    @staticmethod
    def fromWrite(writeError: 'WriteError') -> 'RelocationBatchError': ...
    
    def getCantMoveIntoFamilyValue(self) -> MoveIntoFamilyError: ...
    
    def getCantMoveIntoVaultValue(self) -> MoveIntoVaultError: ...
    
    def getFromLookupValue(self) -> LookupError: ...
    
    def getFromWriteValue(self) -> 'WriteError': ...
    
    def getToValue(self) -> 'WriteError': ...
    
    def hashCode(self) -> int: ...
    
    def isCantCopySharedFolder(self) -> bool: ...
    
    def isCantMoveFolderIntoItself(self) -> bool: ...
    
    def isCantMoveIntoFamily(self) -> bool: ...
    
    def isCantMoveIntoVault(self) -> bool: ...
    
    def isCantMoveSharedFolder(self) -> bool: ...
    
    def isCantNestSharedFolder(self) -> bool: ...
    
    def isCantTransferOwnership(self) -> bool: ...
    
    def isDuplicatedOrNestedPaths(self) -> bool: ...
    
    def isFromLookup(self) -> bool: ...
    
    def isFromWrite(self) -> bool: ...
    
    def isInsufficientQuota(self) -> bool: ...
    
    def isInternalError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isTo(self) -> bool: ...
    
    def isTooManyFiles(self) -> bool: ...
    
    def isTooManyWriteOperations(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def to(writeError: 'WriteError') -> 'RelocationBatchError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        CANT_COPY_SHARED_FOLDER = 'CANT_COPY_SHARED_FOLDER'
        CANT_MOVE_FOLDER_INTO_ITSELF = 'CANT_MOVE_FOLDER_INTO_ITSELF'
        CANT_MOVE_INTO_FAMILY = 'CANT_MOVE_INTO_FAMILY'
        CANT_MOVE_INTO_VAULT = 'CANT_MOVE_INTO_VAULT'
        CANT_MOVE_SHARED_FOLDER = 'CANT_MOVE_SHARED_FOLDER'
        CANT_NEST_SHARED_FOLDER = 'CANT_NEST_SHARED_FOLDER'
        CANT_TRANSFER_OWNERSHIP = 'CANT_TRANSFER_OWNERSHIP'
        DUPLICATED_OR_NESTED_PATHS = 'DUPLICATED_OR_NESTED_PATHS'
        FROM_LOOKUP = 'FROM_LOOKUP'
        FROM_WRITE = 'FROM_WRITE'
        INSUFFICIENT_QUOTA = 'INSUFFICIENT_QUOTA'
        INTERNAL_ERROR = 'INTERNAL_ERROR'
        OTHER = 'OTHER'
        TO = 'TO'
        TOO_MANY_FILES = 'TOO_MANY_FILES'
        TOO_MANY_WRITE_OPERATIONS = 'TOO_MANY_WRITE_OPERATIONS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RelocationBatchErrorEntry:
    INTERNAL_ERROR = '"internal_error"'
    OTHER = '"other"'
    TOO_MANY_WRITE_OPERATIONS = '"too_many_write_operations"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getRelocationErrorValue(self) -> 'RelocationError': ...
    
    def hashCode(self) -> int: ...
    
    def isInternalError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isRelocationError(self) -> bool: ...
    
    def isTooManyWriteOperations(self) -> bool: ...
    
    @staticmethod
    def relocationError(relocationError: 'RelocationError') -> 'RelocationBatchErrorEntry': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        INTERNAL_ERROR = 'INTERNAL_ERROR'
        OTHER = 'OTHER'
        RELOCATION_ERROR = 'RELOCATION_ERROR'
        TOO_MANY_WRITE_OPERATIONS = 'TOO_MANY_WRITE_OPERATIONS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RelocationBatchJobStatus:
    IN_PROGRESS = '"in_progress"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def complete(relocationBatchResult: 'RelocationBatchResult') -> 'RelocationBatchJobStatus': ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failed(relocationBatchError: RelocationBatchError) -> 'RelocationBatchJobStatus': ...
    
    def getCompleteValue(self) -> 'RelocationBatchResult': ...
    
    def getFailedValue(self) -> RelocationBatchError: ...
    
    def hashCode(self) -> int: ...
    
    def isComplete(self) -> bool: ...
    
    def isFailed(self) -> bool: ...
    
    def isInProgress(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        COMPLETE = 'COMPLETE'
        FAILED = 'FAILED'
        IN_PROGRESS = 'IN_PROGRESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RelocationBatchLaunch:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def asyncJobId(s: str) -> 'RelocationBatchLaunch': ...
    
    @staticmethod
    def complete(relocationBatchResult: 'RelocationBatchResult') -> 'RelocationBatchLaunch': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAsyncJobIdValue(self) -> str: ...
    
    def getCompleteValue(self) -> 'RelocationBatchResult': ...
    
    def hashCode(self) -> int: ...
    
    def isAsyncJobId(self) -> bool: ...
    
    def isComplete(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ASYNC_JOB_ID = 'ASYNC_JOB_ID'
        COMPLETE = 'COMPLETE'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RelocationBatchResult(FileOpsResult):
    def __init__(self, t: typing.List['RelocationBatchResultData']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEntries(self) -> typing.List['RelocationBatchResultData']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class RelocationBatchResultData:
    def __init__(self, metadata: Metadata) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMetadata(self) -> Metadata: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class RelocationBatchResultEntry:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failure(relocationBatchErrorEntry: RelocationBatchErrorEntry) -> 'RelocationBatchResultEntry': ...
    
    def getFailureValue(self) -> RelocationBatchErrorEntry: ...
    
    def getSuccessValue(self) -> Metadata: ...
    
    def hashCode(self) -> int: ...
    
    def isFailure(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def success(metadata: Metadata) -> 'RelocationBatchResultEntry': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        FAILURE = 'FAILURE'
        OTHER = 'OTHER'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RelocationBatchV2JobStatus:
    IN_PROGRESS = '"in_progress"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def complete(relocationBatchV2Result: 'RelocationBatchV2Result') -> 'RelocationBatchV2JobStatus': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCompleteValue(self) -> 'RelocationBatchV2Result': ...
    
    def hashCode(self) -> int: ...
    
    def isComplete(self) -> bool: ...
    
    def isInProgress(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        COMPLETE = 'COMPLETE'
        IN_PROGRESS = 'IN_PROGRESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RelocationBatchV2Launch:
    def __init__(self) -> None: ...
    
    @staticmethod
    def asyncJobId(s: str) -> 'RelocationBatchV2Launch': ...
    
    @staticmethod
    def complete(relocationBatchV2Result: 'RelocationBatchV2Result') -> 'RelocationBatchV2Launch': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAsyncJobIdValue(self) -> str: ...
    
    def getCompleteValue(self) -> 'RelocationBatchV2Result': ...
    
    def hashCode(self) -> int: ...
    
    def isAsyncJobId(self) -> bool: ...
    
    def isComplete(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ASYNC_JOB_ID = 'ASYNC_JOB_ID'
        COMPLETE = 'COMPLETE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RelocationBatchV2Result(FileOpsResult):
    def __init__(self, t: typing.List[RelocationBatchResultEntry]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEntries(self) -> typing.List[RelocationBatchResultEntry]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class RelocationError:
    CANT_COPY_SHARED_FOLDER = '"cant_copy_shared_folder"'
    CANT_MOVE_FOLDER_INTO_ITSELF = '"cant_move_folder_into_itself"'
    CANT_MOVE_SHARED_FOLDER = '"cant_move_shared_folder"'
    CANT_NEST_SHARED_FOLDER = '"cant_nest_shared_folder"'
    CANT_TRANSFER_OWNERSHIP = '"cant_transfer_ownership"'
    DUPLICATED_OR_NESTED_PATHS = '"duplicated_or_nested_paths"'
    INSUFFICIENT_QUOTA = '"insufficient_quota"'
    INTERNAL_ERROR = '"internal_error"'
    OTHER = '"other"'
    TOO_MANY_FILES = '"too_many_files"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def cantMoveIntoFamily(moveIntoFamilyError: MoveIntoFamilyError) -> 'RelocationError': ...
    
    @staticmethod
    def cantMoveIntoVault(moveIntoVaultError: MoveIntoVaultError) -> 'RelocationError': ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def fromLookup(lookupError: LookupError) -> 'RelocationError': ...
    
    @staticmethod
    def fromWrite(writeError: 'WriteError') -> 'RelocationError': ...
    
    def getCantMoveIntoFamilyValue(self) -> MoveIntoFamilyError: ...
    
    def getCantMoveIntoVaultValue(self) -> MoveIntoVaultError: ...
    
    def getFromLookupValue(self) -> LookupError: ...
    
    def getFromWriteValue(self) -> 'WriteError': ...
    
    def getToValue(self) -> 'WriteError': ...
    
    def hashCode(self) -> int: ...
    
    def isCantCopySharedFolder(self) -> bool: ...
    
    def isCantMoveFolderIntoItself(self) -> bool: ...
    
    def isCantMoveIntoFamily(self) -> bool: ...
    
    def isCantMoveIntoVault(self) -> bool: ...
    
    def isCantMoveSharedFolder(self) -> bool: ...
    
    def isCantNestSharedFolder(self) -> bool: ...
    
    def isCantTransferOwnership(self) -> bool: ...
    
    def isDuplicatedOrNestedPaths(self) -> bool: ...
    
    def isFromLookup(self) -> bool: ...
    
    def isFromWrite(self) -> bool: ...
    
    def isInsufficientQuota(self) -> bool: ...
    
    def isInternalError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isTo(self) -> bool: ...
    
    def isTooManyFiles(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def to(writeError: 'WriteError') -> 'RelocationError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        CANT_COPY_SHARED_FOLDER = 'CANT_COPY_SHARED_FOLDER'
        CANT_MOVE_FOLDER_INTO_ITSELF = 'CANT_MOVE_FOLDER_INTO_ITSELF'
        CANT_MOVE_INTO_FAMILY = 'CANT_MOVE_INTO_FAMILY'
        CANT_MOVE_INTO_VAULT = 'CANT_MOVE_INTO_VAULT'
        CANT_MOVE_SHARED_FOLDER = 'CANT_MOVE_SHARED_FOLDER'
        CANT_NEST_SHARED_FOLDER = 'CANT_NEST_SHARED_FOLDER'
        CANT_TRANSFER_OWNERSHIP = 'CANT_TRANSFER_OWNERSHIP'
        DUPLICATED_OR_NESTED_PATHS = 'DUPLICATED_OR_NESTED_PATHS'
        FROM_LOOKUP = 'FROM_LOOKUP'
        FROM_WRITE = 'FROM_WRITE'
        INSUFFICIENT_QUOTA = 'INSUFFICIENT_QUOTA'
        INTERNAL_ERROR = 'INTERNAL_ERROR'
        OTHER = 'OTHER'
        TO = 'TO'
        TOO_MANY_FILES = 'TOO_MANY_FILES'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RelocationErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RelocationError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', relocationError: RelocationError) -> None: ...
    
    
class RelocationPath:
    def __init__(self, s: str, s2: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFromPath(self) -> str: ...
    
    def getToPath(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class RelocationResult(FileOpsResult):
    def __init__(self, metadata: Metadata) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMetadata(self) -> Metadata: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class RemoveTagError:
    OTHER = '"other"'
    TAG_NOT_PRESENT = '"tag_not_present"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> LookupError: ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isTagNotPresent(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: LookupError) -> 'RemoveTagError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        TAG_NOT_PRESENT = 'TAG_NOT_PRESENT'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RemoveTagErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RemoveTagError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', removeTagError: RemoveTagError) -> None: ...
    
    
class RestoreError:
    INVALID_REVISION = '"invalid_revision"'
    IN_PROGRESS = '"in_progress"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathLookupValue(self) -> LookupError: ...
    
    def getPathWriteValue(self) -> 'WriteError': ...
    
    def hashCode(self) -> int: ...
    
    def isInProgress(self) -> bool: ...
    
    def isInvalidRevision(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPathLookup(self) -> bool: ...
    
    def isPathWrite(self) -> bool: ...
    
    @staticmethod
    def pathLookup(lookupError: LookupError) -> 'RestoreError': ...
    
    @staticmethod
    def pathWrite(writeError: 'WriteError') -> 'RestoreError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        INVALID_REVISION = 'INVALID_REVISION'
        IN_PROGRESS = 'IN_PROGRESS'
        OTHER = 'OTHER'
        PATH_LOOKUP = 'PATH_LOOKUP'
        PATH_WRITE = 'PATH_WRITE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RestoreErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RestoreError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', restoreError: RestoreError) -> None: ...
    
    
class SaveCopyReferenceError:
    INVALID_COPY_REFERENCE = '"invalid_copy_reference"'
    NOT_FOUND = '"not_found"'
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    TOO_MANY_FILES = '"too_many_files"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'WriteError': ...
    
    def hashCode(self) -> int: ...
    
    def isInvalidCopyReference(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isNotFound(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isTooManyFiles(self) -> bool: ...
    
    @staticmethod
    def path(writeError: 'WriteError') -> 'SaveCopyReferenceError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        INVALID_COPY_REFERENCE = 'INVALID_COPY_REFERENCE'
        NOT_FOUND = 'NOT_FOUND'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        PATH = 'PATH'
        TOO_MANY_FILES = 'TOO_MANY_FILES'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class SaveCopyReferenceErrorException('com.dropbox.core.DbxApiException'):
    errorValue: SaveCopyReferenceError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', saveCopyReferenceError: SaveCopyReferenceError) -> None: ...
    
    
class SaveCopyReferenceResult:
    def __init__(self, metadata: Metadata) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMetadata(self) -> Metadata: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class SaveUrlError:
    DOWNLOAD_FAILED = '"download_failed"'
    INVALID_URL = '"invalid_url"'
    NOT_FOUND = '"not_found"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'WriteError': ...
    
    def hashCode(self) -> int: ...
    
    def isDownloadFailed(self) -> bool: ...
    
    def isInvalidUrl(self) -> bool: ...
    
    def isNotFound(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    @staticmethod
    def path(writeError: 'WriteError') -> 'SaveUrlError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        DOWNLOAD_FAILED = 'DOWNLOAD_FAILED'
        INVALID_URL = 'INVALID_URL'
        NOT_FOUND = 'NOT_FOUND'
        OTHER = 'OTHER'
        PATH = 'PATH'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class SaveUrlErrorException('com.dropbox.core.DbxApiException'):
    errorValue: SaveUrlError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', saveUrlError: SaveUrlError) -> None: ...
    
    
class SaveUrlJobStatus:
    IN_PROGRESS = '"in_progress"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def complete(fileMetadata: FileMetadata) -> 'SaveUrlJobStatus': ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failed(saveUrlError: SaveUrlError) -> 'SaveUrlJobStatus': ...
    
    def getCompleteValue(self) -> FileMetadata: ...
    
    def getFailedValue(self) -> SaveUrlError: ...
    
    def hashCode(self) -> int: ...
    
    def isComplete(self) -> bool: ...
    
    def isFailed(self) -> bool: ...
    
    def isInProgress(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        COMPLETE = 'COMPLETE'
        FAILED = 'FAILED'
        IN_PROGRESS = 'IN_PROGRESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class SaveUrlResult:
    def __init__(self) -> None: ...
    
    @staticmethod
    def asyncJobId(s: str) -> 'SaveUrlResult': ...
    
    @staticmethod
    def complete(fileMetadata: FileMetadata) -> 'SaveUrlResult': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAsyncJobIdValue(self) -> str: ...
    
    def getCompleteValue(self) -> FileMetadata: ...
    
    def hashCode(self) -> int: ...
    
    def isAsyncJobId(self) -> bool: ...
    
    def isComplete(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ASYNC_JOB_ID = 'ASYNC_JOB_ID'
        COMPLETE = 'COMPLETE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class SearchBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'SearchResult': ...
    
    def withMaxResults(self, i: int) -> 'SearchBuilder': ...
    
    def withMode(self, searchMode: 'SearchMode') -> 'SearchBuilder': ...
    
    def withStart(self, i: int) -> 'SearchBuilder': ...
    
    
class SearchError:
    INTERNAL_ERROR = '"internal_error"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getInvalidArgumentValue(self) -> str: ...
    
    def getPathValue(self) -> LookupError: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def invalidArgument() -> 'SearchError': ...
    
    def isInternalError(self) -> bool: ...
    
    def isInvalidArgument(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: LookupError) -> 'SearchError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        INTERNAL_ERROR = 'INTERNAL_ERROR'
        INVALID_ARGUMENT = 'INVALID_ARGUMENT'
        OTHER = 'OTHER'
        PATH = 'PATH'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class SearchErrorException('com.dropbox.core.DbxApiException'):
    errorValue: SearchError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', searchError: SearchError) -> None: ...
    
    
class SearchMatch:
    def __init__(self, searchMatchType: 'SearchMatchType', metadata: Metadata) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMatchType(self) -> 'SearchMatchType': ...
    
    def getMetadata(self) -> Metadata: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class SearchMatchFieldOptions:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getIncludeHighlights(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class SearchMatchType(java.lang.Enum):
    BOTH = 'BOTH'
    CONTENT = 'CONTENT'
    FILENAME = 'FILENAME'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SearchMatchType': ...
    
    @staticmethod
    def values() -> typing.List['SearchMatchType']: ...
    
    
class SearchMatchTypeV2(java.lang.Enum):
    FILENAME = 'FILENAME'
    FILENAME_AND_CONTENT = 'FILENAME_AND_CONTENT'
    FILE_CONTENT = 'FILE_CONTENT'
    IMAGE_CONTENT = 'IMAGE_CONTENT'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SearchMatchTypeV2': ...
    
    @staticmethod
    def values() -> typing.List['SearchMatchTypeV2']: ...
    
    
class SearchMatchV2:
    def __init__(self, metadataV2: MetadataV2) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getHighlightSpans(self) -> typing.List[HighlightSpan]: ...
    
    def getMatchType(self) -> SearchMatchTypeV2: ...
    
    def getMetadata(self) -> MetadataV2: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(metadataV2: MetadataV2) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'SearchMatchV2': ...
        
        def withHighlightSpans(self, t: typing.List[HighlightSpan]) -> str: ...
        
        def withMatchType(self, searchMatchTypeV2: SearchMatchTypeV2) -> str: ...
        
        
    
class SearchMode(java.lang.Enum):
    DELETED_FILENAME = 'DELETED_FILENAME'
    FILENAME = 'FILENAME'
    FILENAME_AND_CONTENT = 'FILENAME_AND_CONTENT'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SearchMode': ...
    
    @staticmethod
    def values() -> typing.List['SearchMode']: ...
    
    
class SearchOptions:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccountId(self) -> str: ...
    
    def getFileCategories(self) -> typing.List[FileCategory]: ...
    
    def getFileExtensions(self) -> typing.List[str]: ...
    
    def getFileStatus(self) -> FileStatus: ...
    
    def getFilenameOnly(self) -> bool: ...
    
    def getMaxResults(self) -> int: ...
    
    def getOrderBy(self) -> 'SearchOrderBy': ...
    
    def getPath(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'SearchOptions': ...
        
        def withAccountId(self, s: str) -> str: ...
        
        def withFileCategories(self, t: typing.List[FileCategory]) -> str: ...
        
        def withFileExtensions(self, t: typing.List[str]) -> str: ...
        
        def withFileStatus(self, fileStatus: FileStatus) -> str: ...
        
        def withFilenameOnly(self, b: bool) -> str: ...
        
        def withMaxResults(self, i: int) -> str: ...
        
        def withOrderBy(self, searchOrderBy: 'SearchOrderBy') -> str: ...
        
        def withPath(self, s: str) -> str: ...
        
        
    
class SearchOrderBy(java.lang.Enum):
    LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME'
    OTHER = 'OTHER'
    RELEVANCE = 'RELEVANCE'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SearchOrderBy': ...
    
    @staticmethod
    def values() -> typing.List['SearchOrderBy']: ...
    
    
class SearchResult:
    def __init__(self, t: typing.List[SearchMatch], b: bool, i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMatches(self) -> typing.List[SearchMatch]: ...
    
    def getMore(self) -> bool: ...
    
    def getStart(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class SearchV2Builder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'SearchV2Result': ...
    
    def withIncludeHighlights(self, b: bool) -> 'SearchV2Builder': ...
    
    def withMatchFieldOptions(self, searchMatchFieldOptions: SearchMatchFieldOptions) -> 'SearchV2Builder': ...
    
    def withOptions(self, searchOptions: SearchOptions) -> 'SearchV2Builder': ...
    
    
class SearchV2Result:
    def __init__(self, t: typing.List[SearchMatchV2], b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getHasMore(self) -> bool: ...
    
    def getMatches(self) -> typing.List[SearchMatchV2]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class SharedLink:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPassword(self) -> str: ...
    
    def getUrl(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class SharedLinkFileInfo:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPassword(self) -> str: ...
    
    def getPath(self) -> str: ...
    
    def getUrl(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'SharedLinkFileInfo': ...
        
        def withPassword(self, s: str) -> str: ...
        
        def withPath(self, s: str) -> str: ...
        
        
    
class SingleUserLock:
    def __init__(self, j: java.util.Date, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCreated(self) -> java.util.Date: ...
    
    def getLockHolderAccountId(self) -> str: ...
    
    def getLockHolderTeamId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class SymlinkInfo:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getTarget(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class SyncSetting(java.lang.Enum):
    DEFAULT = 'DEFAULT'
    NOT_SYNCED = 'NOT_SYNCED'
    NOT_SYNCED_INACTIVE = 'NOT_SYNCED_INACTIVE'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SyncSetting': ...
    
    @staticmethod
    def values() -> typing.List['SyncSetting']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.files.SyncSetting.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class SyncSettingArg(java.lang.Enum):
    DEFAULT = 'DEFAULT'
    NOT_SYNCED = 'NOT_SYNCED'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SyncSettingArg': ...
    
    @staticmethod
    def values() -> typing.List['SyncSettingArg']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.files.SyncSettingArg.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class SyncSettingsError:
    OTHER = '"other"'
    UNSUPPORTED_COMBINATION = '"unsupported_combination"'
    UNSUPPORTED_CONFIGURATION = '"unsupported_configuration"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> LookupError: ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isUnsupportedCombination(self) -> bool: ...
    
    def isUnsupportedConfiguration(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: LookupError) -> 'SyncSettingsError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.files.SyncSettingsError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        UNSUPPORTED_COMBINATION = 'UNSUPPORTED_COMBINATION'
        UNSUPPORTED_CONFIGURATION = 'UNSUPPORTED_CONFIGURATION'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TagObject:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getUserGeneratedTagValue(self) -> 'UserGeneratedTag': ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isUserGeneratedTag(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def userGeneratedTag(userGeneratedTag: 'UserGeneratedTag') -> 'TagObject': ...
    
    
    class Tag:
        OTHER = 'OTHER'
        USER_GENERATED_TAG = 'USER_GENERATED_TAG'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ThumbnailArg:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFormat(self) -> 'ThumbnailFormat': ...
    
    def getMode(self) -> 'ThumbnailMode': ...
    
    def getPath(self) -> str: ...
    
    def getSize(self) -> 'ThumbnailSize': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'ThumbnailArg': ...
        
        def withFormat(self, thumbnailFormat: 'ThumbnailFormat') -> str: ...
        
        def withMode(self, thumbnailMode: 'ThumbnailMode') -> str: ...
        
        def withSize(self, thumbnailSize: 'ThumbnailSize') -> str: ...
        
        
    
class ThumbnailError:
    CONVERSION_ERROR = '"conversion_error"'
    UNSUPPORTED_EXTENSION = '"unsupported_extension"'
    UNSUPPORTED_IMAGE = '"unsupported_image"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> LookupError: ...
    
    def hashCode(self) -> int: ...
    
    def isConversionError(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isUnsupportedExtension(self) -> bool: ...
    
    def isUnsupportedImage(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: LookupError) -> 'ThumbnailError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        CONVERSION_ERROR = 'CONVERSION_ERROR'
        PATH = 'PATH'
        UNSUPPORTED_EXTENSION = 'UNSUPPORTED_EXTENSION'
        UNSUPPORTED_IMAGE = 'UNSUPPORTED_IMAGE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ThumbnailErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ThumbnailError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', thumbnailError: ThumbnailError) -> None: ...
    
    
class ThumbnailFormat(java.lang.Enum):
    JPEG = 'JPEG'
    PNG = 'PNG'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ThumbnailFormat': ...
    
    @staticmethod
    def values() -> typing.List['ThumbnailFormat']: ...
    
    
class ThumbnailMode(java.lang.Enum):
    BESTFIT = 'BESTFIT'
    FITONE_BESTFIT = 'FITONE_BESTFIT'
    STRICT = 'STRICT'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ThumbnailMode': ...
    
    @staticmethod
    def values() -> typing.List['ThumbnailMode']: ...
    
    
class ThumbnailSize(java.lang.Enum):
    W1024H768 = 'W1024H768'
    W128H128 = 'W128H128'
    W2048H1536 = 'W2048H1536'
    W256H256 = 'W256H256'
    W32H32 = 'W32H32'
    W480H320 = 'W480H320'
    W640H480 = 'W640H480'
    W64H64 = 'W64H64'
    W960H640 = 'W960H640'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ThumbnailSize': ...
    
    @staticmethod
    def values() -> typing.List['ThumbnailSize']: ...
    
    
class ThumbnailV2Error:
    ACCESS_DENIED = '"access_denied"'
    CONVERSION_ERROR = '"conversion_error"'
    NOT_FOUND = '"not_found"'
    OTHER = '"other"'
    UNSUPPORTED_EXTENSION = '"unsupported_extension"'
    UNSUPPORTED_IMAGE = '"unsupported_image"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> LookupError: ...
    
    def hashCode(self) -> int: ...
    
    def isAccessDenied(self) -> bool: ...
    
    def isConversionError(self) -> bool: ...
    
    def isNotFound(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isUnsupportedExtension(self) -> bool: ...
    
    def isUnsupportedImage(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: LookupError) -> 'ThumbnailV2Error': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_DENIED = 'ACCESS_DENIED'
        CONVERSION_ERROR = 'CONVERSION_ERROR'
        NOT_FOUND = 'NOT_FOUND'
        OTHER = 'OTHER'
        PATH = 'PATH'
        UNSUPPORTED_EXTENSION = 'UNSUPPORTED_EXTENSION'
        UNSUPPORTED_IMAGE = 'UNSUPPORTED_IMAGE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ThumbnailV2ErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ThumbnailV2Error
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', thumbnailV2Error: ThumbnailV2Error) -> None: ...
    
    
class UnlockFileArg:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPath(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UploadBuilder(com.dropbox.core.v2.DbxUploadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> 'com.dropbox.core.DbxUploader': ...
    
    def withAutorename(self, b: bool) -> 'UploadBuilder': ...
    
    def withClientModified(self, j: java.util.Date) -> 'UploadBuilder': ...
    
    def withContentHash(self, s: str) -> 'UploadBuilder': ...
    
    def withMode(self, writeMode: 'WriteMode') -> 'UploadBuilder': ...
    
    def withMute(self, b: bool) -> 'UploadBuilder': ...
    
    def withPropertyGroups(self, t: typing.List[com.dropbox.core.v2.fileproperties.PropertyGroup]) -> 'UploadBuilder': ...
    
    def withStrictConflict(self, b: bool) -> 'UploadBuilder': ...
    
    
class UploadError:
    CONTENT_HASH_MISMATCH = '"content_hash_mismatch"'
    OTHER = '"other"'
    PAYLOAD_TOO_LARGE = '"payload_too_large"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'UploadWriteFailed': ...
    
    def getPropertiesErrorValue(self) -> com.dropbox.core.v2.fileproperties.InvalidPropertyGroupError: ...
    
    def hashCode(self) -> int: ...
    
    def isContentHashMismatch(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isPayloadTooLarge(self) -> bool: ...
    
    def isPropertiesError(self) -> bool: ...
    
    @staticmethod
    def path(uploadWriteFailed: 'UploadWriteFailed') -> 'UploadError': ...
    
    @staticmethod
    def propertiesError(c: com.dropbox.core.v2.fileproperties.InvalidPropertyGroupError) -> 'UploadError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        CONTENT_HASH_MISMATCH = 'CONTENT_HASH_MISMATCH'
        OTHER = 'OTHER'
        PATH = 'PATH'
        PAYLOAD_TOO_LARGE = 'PAYLOAD_TOO_LARGE'
        PROPERTIES_ERROR = 'PROPERTIES_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UploadErrorException('com.dropbox.core.DbxApiException'):
    errorValue: UploadError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', uploadError: UploadError) -> None: ...
    
    
class UploadSessionAppendError:
    CLOSED = '"closed"'
    CONCURRENT_SESSION_INVALID_DATA_SIZE = '"concurrent_session_invalid_data_size"'
    CONCURRENT_SESSION_INVALID_OFFSET = '"concurrent_session_invalid_offset"'
    CONTENT_HASH_MISMATCH = '"content_hash_mismatch"'
    NOT_CLOSED = '"not_closed"'
    NOT_FOUND = '"not_found"'
    OTHER = '"other"'
    PAYLOAD_TOO_LARGE = '"payload_too_large"'
    TOO_LARGE = '"too_large"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getIncorrectOffsetValue(self) -> 'UploadSessionOffsetError': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def incorrectOffset(uploadSessionOffsetError: 'UploadSessionOffsetError') -> 'UploadSessionAppendError': ...
    
    def isClosed(self) -> bool: ...
    
    def isConcurrentSessionInvalidDataSize(self) -> bool: ...
    
    def isConcurrentSessionInvalidOffset(self) -> bool: ...
    
    def isContentHashMismatch(self) -> bool: ...
    
    def isIncorrectOffset(self) -> bool: ...
    
    def isNotClosed(self) -> bool: ...
    
    def isNotFound(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPayloadTooLarge(self) -> bool: ...
    
    def isTooLarge(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        CLOSED = 'CLOSED'
        CONCURRENT_SESSION_INVALID_DATA_SIZE = 'CONCURRENT_SESSION_INVALID_DATA_SIZE'
        CONCURRENT_SESSION_INVALID_OFFSET = 'CONCURRENT_SESSION_INVALID_OFFSET'
        CONTENT_HASH_MISMATCH = 'CONTENT_HASH_MISMATCH'
        INCORRECT_OFFSET = 'INCORRECT_OFFSET'
        NOT_CLOSED = 'NOT_CLOSED'
        NOT_FOUND = 'NOT_FOUND'
        OTHER = 'OTHER'
        PAYLOAD_TOO_LARGE = 'PAYLOAD_TOO_LARGE'
        TOO_LARGE = 'TOO_LARGE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UploadSessionAppendErrorException('com.dropbox.core.DbxApiException'):
    errorValue: UploadSessionAppendError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', uploadSessionAppendError: UploadSessionAppendError) -> None: ...
    
    
class UploadSessionAppendUploader('com.dropbox.core.DbxUploader'):
    def __init__(self, s: str, s2: str) -> None: ...
    
    
class UploadSessionAppendV2Builder(com.dropbox.core.v2.DbxUploadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> 'com.dropbox.core.DbxUploader': ...
    
    def withClose(self, b: bool) -> 'UploadSessionAppendV2Builder': ...
    
    def withContentHash(self, s: str) -> 'UploadSessionAppendV2Builder': ...
    
    
class UploadSessionAppendV2Uploader('com.dropbox.core.DbxUploader'):
    def __init__(self, s: str, s2: str) -> None: ...
    
    
class UploadSessionCursor:
    def __init__(self, s: str, i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getOffset(self) -> int: ...
    
    def getSessionId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UploadSessionFinishArg:
    def __init__(self, uploadSessionCursor: UploadSessionCursor, commitInfo: CommitInfo) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCommit(self) -> CommitInfo: ...
    
    def getContentHash(self) -> str: ...
    
    def getCursor(self) -> UploadSessionCursor: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UploadSessionFinishBatchJobStatus:
    IN_PROGRESS = '"in_progress"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def complete(uploadSessionFinishBatchResult: 'UploadSessionFinishBatchResult') -> 'UploadSessionFinishBatchJobStatus': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCompleteValue(self) -> 'UploadSessionFinishBatchResult': ...
    
    def hashCode(self) -> int: ...
    
    def isComplete(self) -> bool: ...
    
    def isInProgress(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        COMPLETE = 'COMPLETE'
        IN_PROGRESS = 'IN_PROGRESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UploadSessionFinishBatchLaunch:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def asyncJobId(s: str) -> 'UploadSessionFinishBatchLaunch': ...
    
    @staticmethod
    def complete(uploadSessionFinishBatchResult: 'UploadSessionFinishBatchResult') -> 'UploadSessionFinishBatchLaunch': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAsyncJobIdValue(self) -> str: ...
    
    def getCompleteValue(self) -> 'UploadSessionFinishBatchResult': ...
    
    def hashCode(self) -> int: ...
    
    def isAsyncJobId(self) -> bool: ...
    
    def isComplete(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ASYNC_JOB_ID = 'ASYNC_JOB_ID'
        COMPLETE = 'COMPLETE'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UploadSessionFinishBatchResult:
    def __init__(self, t: typing.List['UploadSessionFinishBatchResultEntry']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEntries(self) -> typing.List['UploadSessionFinishBatchResultEntry']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UploadSessionFinishBatchResultEntry:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failure(uploadSessionFinishError: 'UploadSessionFinishError') -> 'UploadSessionFinishBatchResultEntry': ...
    
    def getFailureValue(self) -> 'UploadSessionFinishError': ...
    
    def getSuccessValue(self) -> FileMetadata: ...
    
    def hashCode(self) -> int: ...
    
    def isFailure(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def success(fileMetadata: FileMetadata) -> 'UploadSessionFinishBatchResultEntry': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        FAILURE = 'FAILURE'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UploadSessionFinishError:
    CONCURRENT_SESSION_DATA_NOT_ALLOWED = '"concurrent_session_data_not_allowed"'
    CONCURRENT_SESSION_MISSING_DATA = '"concurrent_session_missing_data"'
    CONCURRENT_SESSION_NOT_CLOSED = '"concurrent_session_not_closed"'
    CONTENT_HASH_MISMATCH = '"content_hash_mismatch"'
    OTHER = '"other"'
    PAYLOAD_TOO_LARGE = '"payload_too_large"'
    TOO_MANY_SHARED_FOLDER_TARGETS = '"too_many_shared_folder_targets"'
    TOO_MANY_WRITE_OPERATIONS = '"too_many_write_operations"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLookupFailedValue(self) -> 'UploadSessionLookupError': ...
    
    def getPathValue(self) -> 'WriteError': ...
    
    def getPropertiesErrorValue(self) -> com.dropbox.core.v2.fileproperties.InvalidPropertyGroupError: ...
    
    def hashCode(self) -> int: ...
    
    def isConcurrentSessionDataNotAllowed(self) -> bool: ...
    
    def isConcurrentSessionMissingData(self) -> bool: ...
    
    def isConcurrentSessionNotClosed(self) -> bool: ...
    
    def isContentHashMismatch(self) -> bool: ...
    
    def isLookupFailed(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isPayloadTooLarge(self) -> bool: ...
    
    def isPropertiesError(self) -> bool: ...
    
    def isTooManySharedFolderTargets(self) -> bool: ...
    
    def isTooManyWriteOperations(self) -> bool: ...
    
    @staticmethod
    def lookupFailed(uploadSessionLookupError: 'UploadSessionLookupError') -> 'UploadSessionFinishError': ...
    
    @staticmethod
    def path(writeError: 'WriteError') -> 'UploadSessionFinishError': ...
    
    @staticmethod
    def propertiesError(c: com.dropbox.core.v2.fileproperties.InvalidPropertyGroupError) -> 'UploadSessionFinishError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        CONCURRENT_SESSION_DATA_NOT_ALLOWED = 'CONCURRENT_SESSION_DATA_NOT_ALLOWED'
        CONCURRENT_SESSION_MISSING_DATA = 'CONCURRENT_SESSION_MISSING_DATA'
        CONCURRENT_SESSION_NOT_CLOSED = 'CONCURRENT_SESSION_NOT_CLOSED'
        CONTENT_HASH_MISMATCH = 'CONTENT_HASH_MISMATCH'
        LOOKUP_FAILED = 'LOOKUP_FAILED'
        OTHER = 'OTHER'
        PATH = 'PATH'
        PAYLOAD_TOO_LARGE = 'PAYLOAD_TOO_LARGE'
        PROPERTIES_ERROR = 'PROPERTIES_ERROR'
        TOO_MANY_SHARED_FOLDER_TARGETS = 'TOO_MANY_SHARED_FOLDER_TARGETS'
        TOO_MANY_WRITE_OPERATIONS = 'TOO_MANY_WRITE_OPERATIONS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UploadSessionFinishErrorException('com.dropbox.core.DbxApiException'):
    errorValue: UploadSessionFinishError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', uploadSessionFinishError: UploadSessionFinishError) -> None: ...
    
    
class UploadSessionFinishUploader('com.dropbox.core.DbxUploader'):
    def __init__(self, s: str, s2: str) -> None: ...
    
    
class UploadSessionLookupError:
    CLOSED = '"closed"'
    CONCURRENT_SESSION_INVALID_DATA_SIZE = '"concurrent_session_invalid_data_size"'
    CONCURRENT_SESSION_INVALID_OFFSET = '"concurrent_session_invalid_offset"'
    NOT_CLOSED = '"not_closed"'
    NOT_FOUND = '"not_found"'
    OTHER = '"other"'
    PAYLOAD_TOO_LARGE = '"payload_too_large"'
    TOO_LARGE = '"too_large"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getIncorrectOffsetValue(self) -> 'UploadSessionOffsetError': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def incorrectOffset(uploadSessionOffsetError: 'UploadSessionOffsetError') -> 'UploadSessionLookupError': ...
    
    def isClosed(self) -> bool: ...
    
    def isConcurrentSessionInvalidDataSize(self) -> bool: ...
    
    def isConcurrentSessionInvalidOffset(self) -> bool: ...
    
    def isIncorrectOffset(self) -> bool: ...
    
    def isNotClosed(self) -> bool: ...
    
    def isNotFound(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPayloadTooLarge(self) -> bool: ...
    
    def isTooLarge(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        CLOSED = 'CLOSED'
        CONCURRENT_SESSION_INVALID_DATA_SIZE = 'CONCURRENT_SESSION_INVALID_DATA_SIZE'
        CONCURRENT_SESSION_INVALID_OFFSET = 'CONCURRENT_SESSION_INVALID_OFFSET'
        INCORRECT_OFFSET = 'INCORRECT_OFFSET'
        NOT_CLOSED = 'NOT_CLOSED'
        NOT_FOUND = 'NOT_FOUND'
        OTHER = 'OTHER'
        PAYLOAD_TOO_LARGE = 'PAYLOAD_TOO_LARGE'
        TOO_LARGE = 'TOO_LARGE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UploadSessionOffsetError:
    def __init__(self, i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCorrectOffset(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UploadSessionStartBatchResult:
    def __init__(self, t: typing.List[str]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getSessionIds(self) -> typing.List[str]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UploadSessionStartBuilder(com.dropbox.core.v2.DbxUploadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> 'com.dropbox.core.DbxUploader': ...
    
    def withClose(self, b: bool) -> 'UploadSessionStartBuilder': ...
    
    def withContentHash(self, s: str) -> 'UploadSessionStartBuilder': ...
    
    def withSessionType(self, uploadSessionType: 'UploadSessionType') -> 'UploadSessionStartBuilder': ...
    
    
class UploadSessionStartError(java.lang.Enum):
    CONCURRENT_SESSION_CLOSE_NOT_ALLOWED = 'CONCURRENT_SESSION_CLOSE_NOT_ALLOWED'
    CONCURRENT_SESSION_DATA_NOT_ALLOWED = 'CONCURRENT_SESSION_DATA_NOT_ALLOWED'
    CONTENT_HASH_MISMATCH = 'CONTENT_HASH_MISMATCH'
    OTHER = 'OTHER'
    PAYLOAD_TOO_LARGE = 'PAYLOAD_TOO_LARGE'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'UploadSessionStartError': ...
    
    @staticmethod
    def values() -> typing.List['UploadSessionStartError']: ...
    
    
class UploadSessionStartErrorException('com.dropbox.core.DbxApiException'):
    errorValue: UploadSessionStartError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', uploadSessionStartError: UploadSessionStartError) -> None: ...
    
    
class UploadSessionStartResult:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getSessionId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UploadSessionStartUploader('com.dropbox.core.DbxUploader'):
    def __init__(self, s: str, s2: str) -> None: ...
    
    
class UploadSessionType(java.lang.Enum):
    CONCURRENT = 'CONCURRENT'
    OTHER = 'OTHER'
    SEQUENTIAL = 'SEQUENTIAL'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'UploadSessionType': ...
    
    @staticmethod
    def values() -> typing.List['UploadSessionType']: ...
    
    
class UploadUploader('com.dropbox.core.DbxUploader'):
    def __init__(self, s: str, s2: str) -> None: ...
    
    
class UploadWriteFailed:
    def __init__(self, writeError: 'WriteError', s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getReason(self) -> 'WriteError': ...
    
    def getUploadSessionId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UserGeneratedTag:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getTagText(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class VideoMetadata(MediaMetadata):
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDimensions(self) -> Dimensions: ...
    
    def getDuration(self) -> int: ...
    
    def getLocation(self) -> GpsCoordinates: ...
    
    def getTimeTaken(self) -> java.util.Date: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> MediaMetadata: ...
        
        def withDimensions(self, dimensions: Dimensions) -> str: ...
        
        def withDuration(self, i: int) -> str: ...
        
        def withLocation(self, gpsCoordinates: GpsCoordinates) -> str: ...
        
        def withTimeTaken(self, j: java.util.Date) -> str: ...
        
        
    
class WriteConflictError(java.lang.Enum):
    FILE = 'FILE'
    FILE_ANCESTOR = 'FILE_ANCESTOR'
    FOLDER = 'FOLDER'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'WriteConflictError': ...
    
    @staticmethod
    def values() -> typing.List['WriteConflictError']: ...
    
    
class WriteError:
    DISALLOWED_NAME = '"disallowed_name"'
    INSUFFICIENT_SPACE = '"insufficient_space"'
    NO_WRITE_PERMISSION = '"no_write_permission"'
    OPERATION_SUPPRESSED = '"operation_suppressed"'
    OTHER = '"other"'
    TEAM_FOLDER = '"team_folder"'
    TOO_MANY_WRITE_OPERATIONS = '"too_many_write_operations"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def conflict(writeConflictError: WriteConflictError) -> 'WriteError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getConflictValue(self) -> WriteConflictError: ...
    
    def getMalformedPathValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isConflict(self) -> bool: ...
    
    def isDisallowedName(self) -> bool: ...
    
    def isInsufficientSpace(self) -> bool: ...
    
    def isMalformedPath(self) -> bool: ...
    
    def isNoWritePermission(self) -> bool: ...
    
    def isOperationSuppressed(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isTeamFolder(self) -> bool: ...
    
    def isTooManyWriteOperations(self) -> bool: ...
    
    @staticmethod
    def malformedPath() -> 'WriteError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        CONFLICT = 'CONFLICT'
        DISALLOWED_NAME = 'DISALLOWED_NAME'
        INSUFFICIENT_SPACE = 'INSUFFICIENT_SPACE'
        MALFORMED_PATH = 'MALFORMED_PATH'
        NO_WRITE_PERMISSION = 'NO_WRITE_PERMISSION'
        OPERATION_SUPPRESSED = 'OPERATION_SUPPRESSED'
        OTHER = 'OTHER'
        TEAM_FOLDER = 'TEAM_FOLDER'
        TOO_MANY_WRITE_OPERATIONS = 'TOO_MANY_WRITE_OPERATIONS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class WriteMode:
    ADD = '"add"'
    OVERWRITE = '"overwrite"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getUpdateValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isAdd(self) -> bool: ...
    
    def isOverwrite(self) -> bool: ...
    
    def isUpdate(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def update(s: str) -> 'WriteMode': ...
    
    
    class Tag:
        ADD = 'ADD'
        OVERWRITE = 'OVERWRITE'
        UPDATE = 'UPDATE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
