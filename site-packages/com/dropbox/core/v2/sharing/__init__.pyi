import typing
import com.dropbox.core.v2
import com.dropbox.core.v2.async
import com.dropbox.core.v2.files
import com.dropbox.core.v2.seenstate
import com.dropbox.core.v2.teamcommon
import com.dropbox.core.v2.users
import java.lang
import java.util


class AccessInheritance(java.lang.Enum):
    INHERIT = 'INHERIT'
    NO_INHERIT = 'NO_INHERIT'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'AccessInheritance': ...
    
    @staticmethod
    def values() -> typing.List['AccessInheritance']: ...
    
    
class AccessLevel(java.lang.Enum):
    EDITOR = 'EDITOR'
    OTHER = 'OTHER'
    OWNER = 'OWNER'
    VIEWER = 'VIEWER'
    VIEWER_NO_COMMENT = 'VIEWER_NO_COMMENT'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'AccessLevel': ...
    
    @staticmethod
    def values() -> typing.List['AccessLevel']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.sharing.AccessLevel.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class AclUpdatePolicy(java.lang.Enum):
    EDITORS = 'EDITORS'
    OTHER = 'OTHER'
    OWNER = 'OWNER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'AclUpdatePolicy': ...
    
    @staticmethod
    def values() -> typing.List['AclUpdatePolicy']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.sharing.AclUpdatePolicy.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class AddFileMemberBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> typing.List['FileMemberActionResult']: ...
    
    def withAccessLevel(self, accessLevel: AccessLevel) -> 'AddFileMemberBuilder': ...
    
    def withAddMessageAsComment(self, b: bool) -> 'AddFileMemberBuilder': ...
    
    def withCustomMessage(self, s: str) -> 'AddFileMemberBuilder': ...
    
    def withQuiet(self, b: bool) -> 'AddFileMemberBuilder': ...
    
    
class AddFileMemberError:
    INVALID_COMMENT = '"invalid_comment"'
    OTHER = '"other"'
    RATE_LIMIT = '"rate_limit"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharingFileAccessError: 'SharingFileAccessError') -> 'AddFileMemberError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharingFileAccessError': ...
    
    def getUserErrorValue(self) -> 'SharingUserError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isInvalidComment(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isRateLimit(self) -> bool: ...
    
    def isUserError(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def userError(sharingUserError: 'SharingUserError') -> 'AddFileMemberError': ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        INVALID_COMMENT = 'INVALID_COMMENT'
        OTHER = 'OTHER'
        RATE_LIMIT = 'RATE_LIMIT'
        USER_ERROR = 'USER_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class AddFileMemberErrorException('com.dropbox.core.DbxApiException'):
    errorValue: AddFileMemberError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', addFileMemberError: AddFileMemberError) -> None: ...
    
    
class AddFolderMemberBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> None: ...
    
    def withCustomMessage(self, s: str) -> 'AddFolderMemberBuilder': ...
    
    def withQuiet(self, b: bool) -> 'AddFolderMemberBuilder': ...
    
    
class AddFolderMemberError:
    BANNED_MEMBER = '"banned_member"'
    CANT_SHARE_OUTSIDE_TEAM = '"cant_share_outside_team"'
    EMAIL_UNVERIFIED = '"email_unverified"'
    INSUFFICIENT_PLAN = '"insufficient_plan"'
    INVALID_SHARED_FOLDER = '"invalid_shared_folder"'
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    RATE_LIMIT = '"rate_limit"'
    TEAM_FOLDER = '"team_folder"'
    TOO_MANY_INVITEES = '"too_many_invitees"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharedFolderAccessError: 'SharedFolderAccessError') -> 'AddFolderMemberError': ...
    
    @staticmethod
    def badMember(addMemberSelectorError: 'AddMemberSelectorError') -> 'AddFolderMemberError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharedFolderAccessError': ...
    
    def getBadMemberValue(self) -> 'AddMemberSelectorError': ...
    
    def getTooManyMembersValue(self) -> int: ...
    
    def getTooManyPendingInvitesValue(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isBadMember(self) -> bool: ...
    
    def isBannedMember(self) -> bool: ...
    
    def isCantShareOutsideTeam(self) -> bool: ...
    
    def isEmailUnverified(self) -> bool: ...
    
    def isInsufficientPlan(self) -> bool: ...
    
    def isInvalidSharedFolder(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isRateLimit(self) -> bool: ...
    
    def isTeamFolder(self) -> bool: ...
    
    def isTooManyInvitees(self) -> bool: ...
    
    def isTooManyMembers(self) -> bool: ...
    
    def isTooManyPendingInvites(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def tooManyMembers(i: int) -> 'AddFolderMemberError': ...
    
    @staticmethod
    def tooManyPendingInvites(i: int) -> 'AddFolderMemberError': ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        BAD_MEMBER = 'BAD_MEMBER'
        BANNED_MEMBER = 'BANNED_MEMBER'
        CANT_SHARE_OUTSIDE_TEAM = 'CANT_SHARE_OUTSIDE_TEAM'
        EMAIL_UNVERIFIED = 'EMAIL_UNVERIFIED'
        INSUFFICIENT_PLAN = 'INSUFFICIENT_PLAN'
        INVALID_SHARED_FOLDER = 'INVALID_SHARED_FOLDER'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        RATE_LIMIT = 'RATE_LIMIT'
        TEAM_FOLDER = 'TEAM_FOLDER'
        TOO_MANY_INVITEES = 'TOO_MANY_INVITEES'
        TOO_MANY_MEMBERS = 'TOO_MANY_MEMBERS'
        TOO_MANY_PENDING_INVITES = 'TOO_MANY_PENDING_INVITES'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class AddFolderMemberErrorException('com.dropbox.core.DbxApiException'):
    errorValue: AddFolderMemberError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', addFolderMemberError: AddFolderMemberError) -> None: ...
    
    
class AddMember:
    def __init__(self, memberSelector: 'MemberSelector') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessLevel(self) -> AccessLevel: ...
    
    def getMember(self) -> 'MemberSelector': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class AddMemberSelectorError:
    AUTOMATIC_GROUP = '"automatic_group"'
    GROUP_DELETED = '"group_deleted"'
    GROUP_NOT_ON_TEAM = '"group_not_on_team"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getInvalidDropboxIdValue(self) -> str: ...
    
    def getInvalidEmailValue(self) -> str: ...
    
    def getUnverifiedDropboxIdValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def invalidDropboxId(s: str) -> 'AddMemberSelectorError': ...
    
    @staticmethod
    def invalidEmail(s: str) -> 'AddMemberSelectorError': ...
    
    def isAutomaticGroup(self) -> bool: ...
    
    def isGroupDeleted(self) -> bool: ...
    
    def isGroupNotOnTeam(self) -> bool: ...
    
    def isInvalidDropboxId(self) -> bool: ...
    
    def isInvalidEmail(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isUnverifiedDropboxId(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def unverifiedDropboxId(s: str) -> 'AddMemberSelectorError': ...
    
    
    class Tag:
        AUTOMATIC_GROUP = 'AUTOMATIC_GROUP'
        GROUP_DELETED = 'GROUP_DELETED'
        GROUP_NOT_ON_TEAM = 'GROUP_NOT_ON_TEAM'
        INVALID_DROPBOX_ID = 'INVALID_DROPBOX_ID'
        INVALID_EMAIL = 'INVALID_EMAIL'
        OTHER = 'OTHER'
        UNVERIFIED_DROPBOX_ID = 'UNVERIFIED_DROPBOX_ID'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class AudienceExceptionContentInfo:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getName(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class AudienceExceptions:
    def __init__(self, i: int, t: typing.List[AudienceExceptionContentInfo]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCount(self) -> int: ...
    
    def getExceptions(self) -> typing.List[AudienceExceptionContentInfo]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class AudienceRestrictingSharedFolder:
    def __init__(self, s: str, s2: str, linkAudience: 'LinkAudience') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAudience(self) -> 'LinkAudience': ...
    
    def getName(self) -> str: ...
    
    def getSharedFolderId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class LinkMetadata:
    def __init__(self, s: str, visibility: 'Visibility') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getExpires(self) -> java.util.Date: ...
    
    def getUrl(self) -> str: ...
    
    def getVisibility(self) -> 'Visibility': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class CollectionLinkMetadata(LinkMetadata):
    def __init__(self, s: str, visibility: 'Visibility') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getExpires(self) -> java.util.Date: ...
    
    def getUrl(self) -> str: ...
    
    def getVisibility(self) -> 'Visibility': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class CreateSharedLinkBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'PathLinkMetadata': ...
    
    def withPendingUpload(self, pendingUploadMode: 'PendingUploadMode') -> 'CreateSharedLinkBuilder': ...
    
    def withShortUrl(self, b: bool) -> 'CreateSharedLinkBuilder': ...
    
    
class CreateSharedLinkError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> com.dropbox.core.v2.files.LookupError: ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    @staticmethod
    def path(c: com.dropbox.core.v2.files.LookupError) -> 'CreateSharedLinkError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class CreateSharedLinkErrorException('com.dropbox.core.DbxApiException'):
    errorValue: CreateSharedLinkError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', createSharedLinkError: CreateSharedLinkError) -> None: ...
    
    
class CreateSharedLinkWithSettingsError:
    ACCESS_DENIED = '"access_denied"'
    EMAIL_NOT_VERIFIED = '"email_not_verified"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> com.dropbox.core.v2.files.LookupError: ...
    
    def getSettingsErrorValue(self) -> 'SharedLinkSettingsError': ...
    
    def getSharedLinkAlreadyExistsValue(self) -> 'SharedLinkAlreadyExistsMetadata': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessDenied(self) -> bool: ...
    
    def isEmailNotVerified(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isSettingsError(self) -> bool: ...
    
    def isSharedLinkAlreadyExists(self) -> bool: ...
    
    @staticmethod
    def path(c: com.dropbox.core.v2.files.LookupError) -> 'CreateSharedLinkWithSettingsError': ...
    
    @staticmethod
    def settingsError(sharedLinkSettingsError: 'SharedLinkSettingsError') -> 'CreateSharedLinkWithSettingsError': ...
    
    @staticmethod
    def sharedLinkAlreadyExists() -> 'CreateSharedLinkWithSettingsError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_DENIED = 'ACCESS_DENIED'
        EMAIL_NOT_VERIFIED = 'EMAIL_NOT_VERIFIED'
        PATH = 'PATH'
        SETTINGS_ERROR = 'SETTINGS_ERROR'
        SHARED_LINK_ALREADY_EXISTS = 'SHARED_LINK_ALREADY_EXISTS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class CreateSharedLinkWithSettingsErrorException('com.dropbox.core.DbxApiException'):
    errorValue: CreateSharedLinkWithSettingsError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', createSharedLinkWithSettingsError: CreateSharedLinkWithSettingsError) -> None: ...
    
    
class DbxUserSharingRequests:
    def __init__(self, c: com.dropbox.core.v2.DbxRawClientV2) -> None: ...
    
    def addFileMember(self, s: str, t: typing.List['MemberSelector']) -> typing.List['FileMemberActionResult']: ...
    
    def addFileMemberBuilder(self, s: str, t: typing.List['MemberSelector']) -> AddFileMemberBuilder: ...
    
    def addFolderMember(self, s: str, t: typing.List[AddMember]) -> None: ...
    
    def addFolderMemberBuilder(self, s: str, t: typing.List[AddMember]) -> AddFolderMemberBuilder: ...
    
    def changeFileMemberAccess(self, s: str, memberSelector: 'MemberSelector', accessLevel: AccessLevel) -> 'FileMemberActionResult': ...
    
    def checkJobStatus(self, s: str) -> 'JobStatus': ...
    
    def checkRemoveMemberJobStatus(self, s: str) -> 'RemoveMemberJobStatus': ...
    
    def checkShareJobStatus(self, s: str) -> 'ShareFolderJobStatus': ...
    
    def createSharedLink(self, s: str) -> 'PathLinkMetadata': ...
    
    def createSharedLinkBuilder(self, s: str) -> CreateSharedLinkBuilder: ...
    
    def createSharedLinkWithSettings(self, s: str) -> 'SharedLinkMetadata': ...
    
    def getFileMetadata(self, s: str) -> 'SharedFileMetadata': ...
    
    def getFileMetadataBatch(self, t: typing.List[str]) -> typing.List['GetFileMetadataBatchResult']: ...
    
    def getFolderMetadata(self, s: str) -> 'SharedFolderMetadata': ...
    
    def getSharedLinkFile(self, s: str) -> typing.Any: ...
    
    def getSharedLinkFileBuilder(self, s: str) -> 'GetSharedLinkFileBuilder': ...
    
    def getSharedLinkMetadata(self, s: str) -> 'SharedLinkMetadata': ...
    
    def getSharedLinkMetadataBuilder(self, s: str) -> 'GetSharedLinkMetadataBuilder': ...
    
    def getSharedLinks(self) -> 'GetSharedLinksResult': ...
    
    def listFileMembers(self, s: str) -> 'SharedFileMembers': ...
    
    def listFileMembersBatch(self, t: typing.List[str]) -> typing.List['ListFileMembersBatchResult']: ...
    
    def listFileMembersBuilder(self, s: str) -> 'ListFileMembersBuilder': ...
    
    def listFileMembersContinue(self, s: str) -> 'SharedFileMembers': ...
    
    def listFolderMembers(self, s: str) -> 'SharedFolderMembers': ...
    
    def listFolderMembersBuilder(self, s: str) -> 'ListFolderMembersBuilder': ...
    
    def listFolderMembersContinue(self, s: str) -> 'SharedFolderMembers': ...
    
    def listFolders(self) -> 'ListFoldersResult': ...
    
    def listFoldersBuilder(self) -> 'ListFoldersBuilder': ...
    
    def listFoldersContinue(self, s: str) -> 'ListFoldersResult': ...
    
    def listMountableFolders(self) -> 'ListFoldersResult': ...
    
    def listMountableFoldersBuilder(self) -> 'ListMountableFoldersBuilder': ...
    
    def listMountableFoldersContinue(self, s: str) -> 'ListFoldersResult': ...
    
    def listReceivedFiles(self) -> 'ListFilesResult': ...
    
    def listReceivedFilesBuilder(self) -> 'ListReceivedFilesBuilder': ...
    
    def listReceivedFilesContinue(self, s: str) -> 'ListFilesResult': ...
    
    def listSharedLinks(self) -> 'ListSharedLinksResult': ...
    
    def listSharedLinksBuilder(self) -> 'ListSharedLinksBuilder': ...
    
    def modifySharedLinkSettings(self, s: str, sharedLinkSettings: 'SharedLinkSettings') -> 'SharedLinkMetadata': ...
    
    def mountFolder(self, s: str) -> 'SharedFolderMetadata': ...
    
    def relinquishFileMembership(self, s: str) -> None: ...
    
    def relinquishFolderMembership(self, s: str) -> com.dropbox.core.v2.async.LaunchEmptyResult: ...
    
    def removeFileMember(self, s: str, memberSelector: 'MemberSelector') -> 'FileMemberActionIndividualResult': ...
    
    def removeFileMember2(self, s: str, memberSelector: 'MemberSelector') -> 'FileMemberRemoveActionResult': ...
    
    def removeFolderMember(self, s: str, memberSelector: 'MemberSelector', b: bool) -> com.dropbox.core.v2.async.LaunchResultBase: ...
    
    def revokeSharedLink(self, s: str) -> None: ...
    
    def setAccessInheritance(self, s: str) -> 'ShareFolderLaunch': ...
    
    def shareFolder(self, s: str) -> 'ShareFolderLaunch': ...
    
    def shareFolderBuilder(self, s: str) -> 'ShareFolderBuilder': ...
    
    def transferFolder(self, s: str, s2: str) -> None: ...
    
    def unmountFolder(self, s: str) -> None: ...
    
    def unshareFile(self, s: str) -> None: ...
    
    def unshareFolder(self, s: str) -> com.dropbox.core.v2.async.LaunchEmptyResult: ...
    
    def updateFileMember(self, s: str, memberSelector: 'MemberSelector', accessLevel: AccessLevel) -> 'MemberAccessLevelResult': ...
    
    def updateFolderMember(self, s: str, memberSelector: 'MemberSelector', accessLevel: AccessLevel) -> 'MemberAccessLevelResult': ...
    
    def updateFolderPolicy(self, s: str) -> 'SharedFolderMetadata': ...
    
    def updateFolderPolicyBuilder(self, s: str) -> 'UpdateFolderPolicyBuilder': ...
    
    
class SharedContentLinkMetadataBase:
    def __init__(self, t: typing.List['LinkAudience'], linkAudience: 'LinkAudience', t2: typing.List['LinkPermission'], b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessLevel(self) -> AccessLevel: ...
    
    def getAudienceOptions(self) -> typing.List['LinkAudience']: ...
    
    def getAudienceRestrictingSharedFolder(self) -> AudienceRestrictingSharedFolder: ...
    
    def getCurrentAudience(self) -> 'LinkAudience': ...
    
    def getExpiry(self) -> java.util.Date: ...
    
    def getLinkPermissions(self) -> typing.List['LinkPermission']: ...
    
    def getPasswordProtected(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(t: typing.List['LinkAudience'], linkAudience: 'LinkAudience', t2: typing.List['LinkPermission'], b: bool) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'SharedContentLinkMetadataBase': ...
        
        def withAccessLevel(self, accessLevel: AccessLevel) -> str: ...
        
        def withAudienceRestrictingSharedFolder(self, audienceRestrictingSharedFolder: AudienceRestrictingSharedFolder) -> str: ...
        
        def withExpiry(self, j: java.util.Date) -> str: ...
        
        
    
class ExpectedSharedContentLinkMetadata(SharedContentLinkMetadataBase):
    def __init__(self, t: typing.List['LinkAudience'], linkAudience: 'LinkAudience', t2: typing.List['LinkPermission'], b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessLevel(self) -> AccessLevel: ...
    
    def getAudienceOptions(self) -> typing.List['LinkAudience']: ...
    
    def getAudienceRestrictingSharedFolder(self) -> AudienceRestrictingSharedFolder: ...
    
    def getCurrentAudience(self) -> 'LinkAudience': ...
    
    def getExpiry(self) -> java.util.Date: ...
    
    def getLinkPermissions(self) -> typing.List['LinkPermission']: ...
    
    def getPasswordProtected(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(t: typing.List['LinkAudience'], linkAudience: 'LinkAudience', t2: typing.List['LinkPermission'], b: bool) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> SharedContentLinkMetadataBase: ...
        
        def withAccessLevel(self, accessLevel: AccessLevel) -> str: ...
        
        def withAudienceRestrictingSharedFolder(self, audienceRestrictingSharedFolder: AudienceRestrictingSharedFolder) -> str: ...
        
        def withExpiry(self, j: java.util.Date) -> str: ...
        
        
    
class FileAction(java.lang.Enum):
    CREATE_EDIT_LINK = 'CREATE_EDIT_LINK'
    CREATE_LINK = 'CREATE_LINK'
    CREATE_VIEW_LINK = 'CREATE_VIEW_LINK'
    DISABLE_VIEWER_INFO = 'DISABLE_VIEWER_INFO'
    EDIT_CONTENTS = 'EDIT_CONTENTS'
    ENABLE_VIEWER_INFO = 'ENABLE_VIEWER_INFO'
    INVITE_EDITOR = 'INVITE_EDITOR'
    INVITE_VIEWER = 'INVITE_VIEWER'
    INVITE_VIEWER_NO_COMMENT = 'INVITE_VIEWER_NO_COMMENT'
    OTHER = 'OTHER'
    RELINQUISH_MEMBERSHIP = 'RELINQUISH_MEMBERSHIP'
    SHARE_LINK = 'SHARE_LINK'
    UNSHARE = 'UNSHARE'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'FileAction': ...
    
    @staticmethod
    def values() -> typing.List['FileAction']: ...
    
    
class SharedLinkMetadata:
    def __init__(self, s: str, s2: str, linkPermissions: 'LinkPermissions') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getContentOwnerTeamInfo(self) -> com.dropbox.core.v2.users.Team: ...
    
    def getExpires(self) -> java.util.Date: ...
    
    def getId(self) -> str: ...
    
    def getLinkPermissions(self) -> 'LinkPermissions': ...
    
    def getName(self) -> str: ...
    
    def getPathLower(self) -> str: ...
    
    def getTeamMemberInfo(self) -> 'TeamMemberInfo': ...
    
    def getUrl(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str, s2: str, linkPermissions: 'LinkPermissions') -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'SharedLinkMetadata': ...
        
        def withContentOwnerTeamInfo(self, c: com.dropbox.core.v2.users.Team) -> str: ...
        
        def withExpires(self, j: java.util.Date) -> str: ...
        
        def withId(self, s: str) -> str: ...
        
        def withPathLower(self, s: str) -> str: ...
        
        def withTeamMemberInfo(self, teamMemberInfo: 'TeamMemberInfo') -> str: ...
        
        
    
class FileLinkMetadata(SharedLinkMetadata):
    def __init__(self, s: str, s2: str, linkPermissions: 'LinkPermissions', j: java.util.Date, j2: java.util.Date, s3: str, i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getClientModified(self) -> java.util.Date: ...
    
    def getContentOwnerTeamInfo(self) -> com.dropbox.core.v2.users.Team: ...
    
    def getExpires(self) -> java.util.Date: ...
    
    def getId(self) -> str: ...
    
    def getLinkPermissions(self) -> 'LinkPermissions': ...
    
    def getName(self) -> str: ...
    
    def getPathLower(self) -> str: ...
    
    def getRev(self) -> str: ...
    
    def getServerModified(self) -> java.util.Date: ...
    
    def getSize(self) -> int: ...
    
    def getTeamMemberInfo(self) -> 'TeamMemberInfo': ...
    
    def getUrl(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> SharedLinkMetadata: ...
        
        def withContentOwnerTeamInfo(self, c: com.dropbox.core.v2.users.Team) -> str: ...
        
        def withExpires(self, j: java.util.Date) -> str: ...
        
        def withId(self, s: str) -> str: ...
        
        def withPathLower(self, s: str) -> str: ...
        
        def withTeamMemberInfo(self, teamMemberInfo: 'TeamMemberInfo') -> str: ...
        
        
    
class FileMemberActionError:
    INVALID_MEMBER = '"invalid_member"'
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharingFileAccessError: 'SharingFileAccessError') -> 'FileMemberActionError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharingFileAccessError': ...
    
    def getNoExplicitAccessValue(self) -> 'MemberAccessLevelResult': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isInvalidMember(self) -> bool: ...
    
    def isNoExplicitAccess(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    @staticmethod
    def noExplicitAccess(memberAccessLevelResult: 'MemberAccessLevelResult') -> 'FileMemberActionError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        INVALID_MEMBER = 'INVALID_MEMBER'
        NO_EXPLICIT_ACCESS = 'NO_EXPLICIT_ACCESS'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class FileMemberActionErrorException('com.dropbox.core.DbxApiException'):
    errorValue: FileMemberActionError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', fileMemberActionError: FileMemberActionError) -> None: ...
    
    
class FileMemberActionIndividualResult:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMemberErrorValue(self) -> FileMemberActionError: ...
    
    def getSuccessValue(self) -> AccessLevel: ...
    
    def hashCode(self) -> int: ...
    
    def isMemberError(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def memberError(fileMemberActionError: FileMemberActionError) -> 'FileMemberActionIndividualResult': ...
    
    @staticmethod
    def success() -> 'FileMemberActionIndividualResult': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        MEMBER_ERROR = 'MEMBER_ERROR'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class FileMemberActionResult:
    def __init__(self, memberSelector: 'MemberSelector', fileMemberActionIndividualResult: FileMemberActionIndividualResult) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMember(self) -> 'MemberSelector': ...
    
    def getResult(self) -> FileMemberActionIndividualResult: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class FileMemberRemoveActionResult:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMemberErrorValue(self) -> FileMemberActionError: ...
    
    def getSuccessValue(self) -> 'MemberAccessLevelResult': ...
    
    def hashCode(self) -> int: ...
    
    def isMemberError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def memberError(fileMemberActionError: FileMemberActionError) -> 'FileMemberRemoveActionResult': ...
    
    @staticmethod
    def success(memberAccessLevelResult: 'MemberAccessLevelResult') -> 'FileMemberRemoveActionResult': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        MEMBER_ERROR = 'MEMBER_ERROR'
        OTHER = 'OTHER'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class FilePermission:
    def __init__(self, fileAction: FileAction, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAction(self) -> FileAction: ...
    
    def getAllow(self) -> bool: ...
    
    def getReason(self) -> 'PermissionDeniedReason': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class FolderAction(java.lang.Enum):
    CHANGE_OPTIONS = 'CHANGE_OPTIONS'
    CREATE_LINK = 'CREATE_LINK'
    DISABLE_VIEWER_INFO = 'DISABLE_VIEWER_INFO'
    EDIT_CONTENTS = 'EDIT_CONTENTS'
    ENABLE_VIEWER_INFO = 'ENABLE_VIEWER_INFO'
    INVITE_EDITOR = 'INVITE_EDITOR'
    INVITE_VIEWER = 'INVITE_VIEWER'
    INVITE_VIEWER_NO_COMMENT = 'INVITE_VIEWER_NO_COMMENT'
    LEAVE_A_COPY = 'LEAVE_A_COPY'
    OTHER = 'OTHER'
    RELINQUISH_MEMBERSHIP = 'RELINQUISH_MEMBERSHIP'
    SET_ACCESS_INHERITANCE = 'SET_ACCESS_INHERITANCE'
    SHARE_LINK = 'SHARE_LINK'
    UNMOUNT = 'UNMOUNT'
    UNSHARE = 'UNSHARE'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'FolderAction': ...
    
    @staticmethod
    def values() -> typing.List['FolderAction']: ...
    
    
class FolderLinkMetadata(SharedLinkMetadata):
    def __init__(self, s: str, s2: str, linkPermissions: 'LinkPermissions') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getContentOwnerTeamInfo(self) -> com.dropbox.core.v2.users.Team: ...
    
    def getExpires(self) -> java.util.Date: ...
    
    def getId(self) -> str: ...
    
    def getLinkPermissions(self) -> 'LinkPermissions': ...
    
    def getName(self) -> str: ...
    
    def getPathLower(self) -> str: ...
    
    def getTeamMemberInfo(self) -> 'TeamMemberInfo': ...
    
    def getUrl(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str, s2: str, linkPermissions: 'LinkPermissions') -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> SharedLinkMetadata: ...
        
        def withContentOwnerTeamInfo(self, c: com.dropbox.core.v2.users.Team) -> str: ...
        
        def withExpires(self, j: java.util.Date) -> str: ...
        
        def withId(self, s: str) -> str: ...
        
        def withPathLower(self, s: str) -> str: ...
        
        def withTeamMemberInfo(self, teamMemberInfo: 'TeamMemberInfo') -> str: ...
        
        
    
class FolderPermission:
    def __init__(self, folderAction: FolderAction, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAction(self) -> FolderAction: ...
    
    def getAllow(self) -> bool: ...
    
    def getReason(self) -> 'PermissionDeniedReason': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class FolderPolicy:
    def __init__(self, aclUpdatePolicy: AclUpdatePolicy, sharedLinkPolicy: 'SharedLinkPolicy') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAclUpdatePolicy(self) -> AclUpdatePolicy: ...
    
    def getMemberPolicy(self) -> 'MemberPolicy': ...
    
    def getResolvedMemberPolicy(self) -> 'MemberPolicy': ...
    
    def getSharedLinkPolicy(self) -> 'SharedLinkPolicy': ...
    
    def getViewerInfoPolicy(self) -> 'ViewerInfoPolicy': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(aclUpdatePolicy: AclUpdatePolicy, sharedLinkPolicy: 'SharedLinkPolicy') -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'FolderPolicy': ...
        
        def withMemberPolicy(self, memberPolicy: 'MemberPolicy') -> str: ...
        
        def withResolvedMemberPolicy(self, memberPolicy: 'MemberPolicy') -> str: ...
        
        def withViewerInfoPolicy(self, viewerInfoPolicy: 'ViewerInfoPolicy') -> str: ...
        
        
    
class GetFileMetadataBatchResult:
    def __init__(self, s: str, getFileMetadataIndividualResult: 'GetFileMetadataIndividualResult') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFile(self) -> str: ...
    
    def getResult(self) -> 'GetFileMetadataIndividualResult': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GetFileMetadataError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharingFileAccessError: 'SharingFileAccessError') -> 'GetFileMetadataError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharingFileAccessError': ...
    
    def getUserErrorValue(self) -> 'SharingUserError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isUserError(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def userError(sharingUserError: 'SharingUserError') -> 'GetFileMetadataError': ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        OTHER = 'OTHER'
        USER_ERROR = 'USER_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GetFileMetadataErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GetFileMetadataError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', getFileMetadataError: GetFileMetadataError) -> None: ...
    
    
class GetFileMetadataIndividualResult:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharingFileAccessError: 'SharingFileAccessError') -> 'GetFileMetadataIndividualResult': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharingFileAccessError': ...
    
    def getMetadataValue(self) -> 'SharedFileMetadata': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isMetadata(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    @staticmethod
    def metadata(sharedFileMetadata: 'SharedFileMetadata') -> 'GetFileMetadataIndividualResult': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        METADATA = 'METADATA'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GetSharedLinkFileBuilder(com.dropbox.core.v2.DbxDownloadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> typing.Any: ...
    
    def withLinkPassword(self, s: str) -> 'GetSharedLinkFileBuilder': ...
    
    def withPath(self, s: str) -> 'GetSharedLinkFileBuilder': ...
    
    
class GetSharedLinkFileError(java.lang.Enum):
    OTHER = 'OTHER'
    SHARED_LINK_ACCESS_DENIED = 'SHARED_LINK_ACCESS_DENIED'
    SHARED_LINK_IS_DIRECTORY = 'SHARED_LINK_IS_DIRECTORY'
    SHARED_LINK_NOT_FOUND = 'SHARED_LINK_NOT_FOUND'
    UNSUPPORTED_LINK_TYPE = 'UNSUPPORTED_LINK_TYPE'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GetSharedLinkFileError': ...
    
    @staticmethod
    def values() -> typing.List['GetSharedLinkFileError']: ...
    
    
class GetSharedLinkFileErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GetSharedLinkFileError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', getSharedLinkFileError: GetSharedLinkFileError) -> None: ...
    
    
class GetSharedLinkMetadataBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> SharedLinkMetadata: ...
    
    def withLinkPassword(self, s: str) -> 'GetSharedLinkMetadataBuilder': ...
    
    def withPath(self, s: str) -> 'GetSharedLinkMetadataBuilder': ...
    
    
class GetSharedLinksError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    @staticmethod
    def path() -> 'GetSharedLinksError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GetSharedLinksErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GetSharedLinksError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', getSharedLinksError: GetSharedLinksError) -> None: ...
    
    
class GetSharedLinksResult:
    def __init__(self, t: typing.List[LinkMetadata]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLinks(self) -> typing.List[LinkMetadata]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GroupInfo(com.dropbox.core.v2.teamcommon.GroupSummary):
    def __init__(self, s: str, s2: str, c: com.dropbox.core.v2.teamcommon.GroupManagementType, c2: com.dropbox.core.v2.teamcommon.GroupType, b: bool, b2: bool, b3: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getGroupExternalId(self) -> str: ...
    
    def getGroupId(self) -> str: ...
    
    def getGroupManagementType(self) -> com.dropbox.core.v2.teamcommon.GroupManagementType: ...
    
    def getGroupName(self) -> str: ...
    
    def getGroupType(self) -> com.dropbox.core.v2.teamcommon.GroupType: ...
    
    def getIsMember(self) -> bool: ...
    
    def getIsOwner(self) -> bool: ...
    
    def getMemberCount(self) -> int: ...
    
    def getSameTeam(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> com.dropbox.core.v2.teamcommon.GroupSummary: ...
        
        def withGroupExternalId(self, s: str) -> str: ...
        
        def withMemberCount(self, i: int) -> str: ...
        
        
    
class MembershipInfo:
    def __init__(self, accessLevel: AccessLevel) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessType(self) -> AccessLevel: ...
    
    def getInitials(self) -> str: ...
    
    def getIsInherited(self) -> bool: ...
    
    def getPermissions(self) -> typing.List['MemberPermission']: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(accessLevel: AccessLevel) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'MembershipInfo': ...
        
        def withInitials(self, s: str) -> str: ...
        
        def withIsInherited(self, b: bool) -> str: ...
        
        def withPermissions(self, t: typing.List['MemberPermission']) -> str: ...
        
        
    
class GroupMembershipInfo(MembershipInfo):
    def __init__(self, accessLevel: AccessLevel, groupInfo: GroupInfo) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessType(self) -> AccessLevel: ...
    
    def getGroup(self) -> GroupInfo: ...
    
    def getInitials(self) -> str: ...
    
    def getIsInherited(self) -> bool: ...
    
    def getPermissions(self) -> typing.List['MemberPermission']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> MembershipInfo: ...
        
        def withInitials(self, s: str) -> str: ...
        
        def withIsInherited(self, b: bool) -> str: ...
        
        def withPermissions(self, l: list) -> str: ...
        
        
    
class InsufficientPlan:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMessage(self) -> str: ...
    
    def getUpsellUrl(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class InsufficientQuotaAmounts:
    def __init__(self, i: int, i2: int, i3: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getSpaceLeft(self) -> int: ...
    
    def getSpaceNeeded(self) -> int: ...
    
    def getSpaceShortage(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class InviteeInfo:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def email(s: str) -> 'InviteeInfo': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEmailValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isEmail(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.sharing.InviteeInfo.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        EMAIL = 'EMAIL'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class InviteeMembershipInfo(MembershipInfo):
    def __init__(self, accessLevel: AccessLevel, inviteeInfo: InviteeInfo) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessType(self) -> AccessLevel: ...
    
    def getInitials(self) -> str: ...
    
    def getInvitee(self) -> InviteeInfo: ...
    
    def getIsInherited(self) -> bool: ...
    
    def getPermissions(self) -> typing.List['MemberPermission']: ...
    
    def getUser(self) -> 'UserInfo': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> MembershipInfo: ...
        
        def withInitials(self, s: str) -> str: ...
        
        def withIsInherited(self, b: bool) -> str: ...
        
        def withPermissions(self, t: typing.List['MemberPermission']) -> str: ...
        
        def withUser(self, userInfo: 'UserInfo') -> str: ...
        
        
    
class JobError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getRelinquishFolderMembershipErrorValue(self) -> 'RelinquishFolderMembershipError': ...
    
    def getRemoveFolderMemberErrorValue(self) -> 'RemoveFolderMemberError': ...
    
    def getUnshareFolderErrorValue(self) -> 'UnshareFolderError': ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isRelinquishFolderMembershipError(self) -> bool: ...
    
    def isRemoveFolderMemberError(self) -> bool: ...
    
    def isUnshareFolderError(self) -> bool: ...
    
    @staticmethod
    def relinquishFolderMembershipError(relinquishFolderMembershipError: 'RelinquishFolderMembershipError') -> 'JobError': ...
    
    @staticmethod
    def removeFolderMemberError(removeFolderMemberError: 'RemoveFolderMemberError') -> 'JobError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def unshareFolderError(unshareFolderError: 'UnshareFolderError') -> 'JobError': ...
    
    
    class Tag:
        OTHER = 'OTHER'
        RELINQUISH_FOLDER_MEMBERSHIP_ERROR = 'RELINQUISH_FOLDER_MEMBERSHIP_ERROR'
        REMOVE_FOLDER_MEMBER_ERROR = 'REMOVE_FOLDER_MEMBER_ERROR'
        UNSHARE_FOLDER_ERROR = 'UNSHARE_FOLDER_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class JobStatus:
    COMPLETE = '"complete"'
    IN_PROGRESS = '"in_progress"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failed(jobError: JobError) -> 'JobStatus': ...
    
    def getFailedValue(self) -> JobError: ...
    
    def hashCode(self) -> int: ...
    
    def isComplete(self) -> bool: ...
    
    def isFailed(self) -> bool: ...
    
    def isInProgress(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        COMPLETE = 'COMPLETE'
        FAILED = 'FAILED'
        IN_PROGRESS = 'IN_PROGRESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class LinkAccessLevel(java.lang.Enum):
    EDITOR = 'EDITOR'
    OTHER = 'OTHER'
    VIEWER = 'VIEWER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LinkAccessLevel': ...
    
    @staticmethod
    def values() -> typing.List['LinkAccessLevel']: ...
    
    
class LinkAction(java.lang.Enum):
    CHANGE_ACCESS_LEVEL = 'CHANGE_ACCESS_LEVEL'
    CHANGE_AUDIENCE = 'CHANGE_AUDIENCE'
    OTHER = 'OTHER'
    REMOVE_EXPIRY = 'REMOVE_EXPIRY'
    REMOVE_PASSWORD = 'REMOVE_PASSWORD'
    SET_EXPIRY = 'SET_EXPIRY'
    SET_PASSWORD = 'SET_PASSWORD'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LinkAction': ...
    
    @staticmethod
    def values() -> typing.List['LinkAction']: ...
    
    
class LinkAudience(java.lang.Enum):
    MEMBERS = 'MEMBERS'
    NO_ONE = 'NO_ONE'
    OTHER = 'OTHER'
    PASSWORD = 'PASSWORD'
    PUBLIC = 'PUBLIC'
    TEAM = 'TEAM'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LinkAudience': ...
    
    @staticmethod
    def values() -> typing.List['LinkAudience']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.sharing.LinkAudience.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class LinkExpiry:
    OTHER = '"other"'
    REMOVE_EXPIRY = '"remove_expiry"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getSetExpiryValue(self) -> java.util.Date: ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isRemoveExpiry(self) -> bool: ...
    
    def isSetExpiry(self) -> bool: ...
    
    @staticmethod
    def setExpiry(j: java.util.Date) -> 'LinkExpiry': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        REMOVE_EXPIRY = 'REMOVE_EXPIRY'
        SET_EXPIRY = 'SET_EXPIRY'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class LinkPassword:
    OTHER = '"other"'
    REMOVE_PASSWORD = '"remove_password"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getSetPasswordValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isRemovePassword(self) -> bool: ...
    
    def isSetPassword(self) -> bool: ...
    
    @staticmethod
    def setPassword(s: str) -> 'LinkPassword': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        REMOVE_PASSWORD = 'REMOVE_PASSWORD'
        SET_PASSWORD = 'SET_PASSWORD'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class LinkPermission:
    def __init__(self, linkAction: LinkAction, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAction(self) -> LinkAction: ...
    
    def getAllow(self) -> bool: ...
    
    def getReason(self) -> 'PermissionDeniedReason': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class LinkPermissions:
    def __init__(self, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCanRevoke(self) -> bool: ...
    
    def getEffectiveAudience(self) -> LinkAudience: ...
    
    def getLinkAccessLevel(self) -> LinkAccessLevel: ...
    
    def getRequestedVisibility(self) -> 'RequestedVisibility': ...
    
    def getResolvedVisibility(self) -> 'ResolvedVisibility': ...
    
    def getRevokeFailureReason(self) -> 'SharedLinkAccessFailureReason': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(b: bool) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'LinkPermissions': ...
        
        def withEffectiveAudience(self, linkAudience: LinkAudience) -> str: ...
        
        def withLinkAccessLevel(self, linkAccessLevel: LinkAccessLevel) -> str: ...
        
        def withRequestedVisibility(self, requestedVisibility: 'RequestedVisibility') -> str: ...
        
        def withResolvedVisibility(self, resolvedVisibility: 'ResolvedVisibility') -> str: ...
        
        def withRevokeFailureReason(self, sharedLinkAccessFailureReason: 'SharedLinkAccessFailureReason') -> str: ...
        
        
    
class LinkSettings:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessLevel(self) -> AccessLevel: ...
    
    def getAudience(self) -> LinkAudience: ...
    
    def getExpiry(self) -> LinkExpiry: ...
    
    def getPassword(self) -> LinkPassword: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'LinkSettings': ...
        
        def withAccessLevel(self, accessLevel: AccessLevel) -> str: ...
        
        def withAudience(self, linkAudience: LinkAudience) -> str: ...
        
        def withExpiry(self, linkExpiry: LinkExpiry) -> str: ...
        
        def withPassword(self, linkPassword: LinkPassword) -> str: ...
        
        
    
class ListFileMembersBatchResult:
    def __init__(self, s: str, listFileMembersIndividualResult: 'ListFileMembersIndividualResult') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFile(self) -> str: ...
    
    def getResult(self) -> 'ListFileMembersIndividualResult': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListFileMembersBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'SharedFileMembers': ...
    
    def withActions(self, t: typing.List['MemberAction']) -> 'ListFileMembersBuilder': ...
    
    def withIncludeInherited(self, b: bool) -> 'ListFileMembersBuilder': ...
    
    def withLimit(self, i: int) -> 'ListFileMembersBuilder': ...
    
    
class ListFileMembersContinueError:
    INVALID_CURSOR = '"invalid_cursor"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharingFileAccessError: 'SharingFileAccessError') -> 'ListFileMembersContinueError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharingFileAccessError': ...
    
    def getUserErrorValue(self) -> 'SharingUserError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isInvalidCursor(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isUserError(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def userError(sharingUserError: 'SharingUserError') -> 'ListFileMembersContinueError': ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        INVALID_CURSOR = 'INVALID_CURSOR'
        OTHER = 'OTHER'
        USER_ERROR = 'USER_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ListFileMembersContinueErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListFileMembersContinueError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listFileMembersContinueError: ListFileMembersContinueError) -> None: ...
    
    
class ListFileMembersCountResult:
    def __init__(self, sharedFileMembers: 'SharedFileMembers', i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMemberCount(self) -> int: ...
    
    def getMembers(self) -> 'SharedFileMembers': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListFileMembersError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharingFileAccessError: 'SharingFileAccessError') -> 'ListFileMembersError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharingFileAccessError': ...
    
    def getUserErrorValue(self) -> 'SharingUserError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isUserError(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def userError(sharingUserError: 'SharingUserError') -> 'ListFileMembersError': ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        OTHER = 'OTHER'
        USER_ERROR = 'USER_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ListFileMembersErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListFileMembersError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listFileMembersError: ListFileMembersError) -> None: ...
    
    
class ListFileMembersIndividualResult:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharingFileAccessError: 'SharingFileAccessError') -> 'ListFileMembersIndividualResult': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharingFileAccessError': ...
    
    def getResultValue(self) -> ListFileMembersCountResult: ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isResult(self) -> bool: ...
    
    @staticmethod
    def result(listFileMembersCountResult: ListFileMembersCountResult) -> 'ListFileMembersIndividualResult': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        OTHER = 'OTHER'
        RESULT = 'RESULT'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ListFilesContinueError:
    INVALID_CURSOR = '"invalid_cursor"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getUserErrorValue(self) -> 'SharingUserError': ...
    
    def hashCode(self) -> int: ...
    
    def isInvalidCursor(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isUserError(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def userError(sharingUserError: 'SharingUserError') -> 'ListFilesContinueError': ...
    
    
    class Tag:
        INVALID_CURSOR = 'INVALID_CURSOR'
        OTHER = 'OTHER'
        USER_ERROR = 'USER_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ListFilesContinueErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListFilesContinueError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listFilesContinueError: ListFilesContinueError) -> None: ...
    
    
class ListFilesResult:
    def __init__(self, t: typing.List['SharedFileMetadata']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getEntries(self) -> typing.List['SharedFileMetadata']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListFolderMembersBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'SharedFolderMembers': ...
    
    def withActions(self, t: typing.List['MemberAction']) -> 'ListFolderMembersBuilder': ...
    
    def withLimit(self, i: int) -> 'ListFolderMembersBuilder': ...
    
    
class ListFolderMembersContinueError:
    INVALID_CURSOR = '"invalid_cursor"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharedFolderAccessError: 'SharedFolderAccessError') -> 'ListFolderMembersContinueError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharedFolderAccessError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isInvalidCursor(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        INVALID_CURSOR = 'INVALID_CURSOR'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ListFolderMembersContinueErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListFolderMembersContinueError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listFolderMembersContinueError: ListFolderMembersContinueError) -> None: ...
    
    
class ListFoldersBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'ListFoldersResult': ...
    
    def withActions(self, t: typing.List[FolderAction]) -> 'ListFoldersBuilder': ...
    
    def withLimit(self, i: int) -> 'ListFoldersBuilder': ...
    
    
class ListFoldersContinueError(java.lang.Enum):
    INVALID_CURSOR = 'INVALID_CURSOR'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ListFoldersContinueError': ...
    
    @staticmethod
    def values() -> typing.List['ListFoldersContinueError']: ...
    
    
class ListFoldersContinueErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListFoldersContinueError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listFoldersContinueError: ListFoldersContinueError) -> None: ...
    
    
class ListFoldersResult:
    def __init__(self, t: typing.List['SharedFolderMetadata']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getEntries(self) -> typing.List['SharedFolderMetadata']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListMountableFoldersBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> ListFoldersResult: ...
    
    def withActions(self, t: typing.List[FolderAction]) -> 'ListMountableFoldersBuilder': ...
    
    def withLimit(self, i: int) -> 'ListMountableFoldersBuilder': ...
    
    
class ListReceivedFilesBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> ListFilesResult: ...
    
    def withActions(self, t: typing.List[FileAction]) -> 'ListReceivedFilesBuilder': ...
    
    def withLimit(self, i: int) -> 'ListReceivedFilesBuilder': ...
    
    
class ListSharedLinksBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'ListSharedLinksResult': ...
    
    def withCursor(self, s: str) -> 'ListSharedLinksBuilder': ...
    
    def withDirectOnly(self, b: bool) -> 'ListSharedLinksBuilder': ...
    
    def withPath(self, s: str) -> 'ListSharedLinksBuilder': ...
    
    
class ListSharedLinksError:
    OTHER = '"other"'
    RESET = '"reset"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> com.dropbox.core.v2.files.LookupError: ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isReset(self) -> bool: ...
    
    @staticmethod
    def path(c: com.dropbox.core.v2.files.LookupError) -> 'ListSharedLinksError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        RESET = 'RESET'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ListSharedLinksErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListSharedLinksError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listSharedLinksError: ListSharedLinksError) -> None: ...
    
    
class ListSharedLinksResult:
    def __init__(self, t: typing.List[SharedLinkMetadata], b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getHasMore(self) -> bool: ...
    
    def getLinks(self) -> typing.List[SharedLinkMetadata]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class MemberAccessLevelResult:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessDetails(self) -> typing.List['ParentFolderAccessInfo']: ...
    
    def getAccessLevel(self) -> AccessLevel: ...
    
    def getWarning(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'MemberAccessLevelResult': ...
        
        def withAccessDetails(self, t: typing.List['ParentFolderAccessInfo']) -> str: ...
        
        def withAccessLevel(self, accessLevel: AccessLevel) -> str: ...
        
        def withWarning(self, s: str) -> str: ...
        
        
    
class MemberAction(java.lang.Enum):
    LEAVE_A_COPY = 'LEAVE_A_COPY'
    MAKE_EDITOR = 'MAKE_EDITOR'
    MAKE_OWNER = 'MAKE_OWNER'
    MAKE_VIEWER = 'MAKE_VIEWER'
    MAKE_VIEWER_NO_COMMENT = 'MAKE_VIEWER_NO_COMMENT'
    OTHER = 'OTHER'
    REMOVE = 'REMOVE'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MemberAction': ...
    
    @staticmethod
    def values() -> typing.List['MemberAction']: ...
    
    
class MemberPermission:
    def __init__(self, memberAction: MemberAction, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAction(self) -> MemberAction: ...
    
    def getAllow(self) -> bool: ...
    
    def getReason(self) -> 'PermissionDeniedReason': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class MemberPolicy(java.lang.Enum):
    ANYONE = 'ANYONE'
    OTHER = 'OTHER'
    TEAM = 'TEAM'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MemberPolicy': ...
    
    @staticmethod
    def values() -> typing.List['MemberPolicy']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.sharing.MemberPolicy.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class MemberSelector:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def dropboxId(s: str) -> 'MemberSelector': ...
    
    @staticmethod
    def email(s: str) -> 'MemberSelector': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDropboxIdValue(self) -> str: ...
    
    def getEmailValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isDropboxId(self) -> bool: ...
    
    def isEmail(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.sharing.MemberSelector.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        DROPBOX_ID = 'DROPBOX_ID'
        EMAIL = 'EMAIL'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ModifySharedLinkSettingsError:
    EMAIL_NOT_VERIFIED = '"email_not_verified"'
    OTHER = '"other"'
    SHARED_LINK_ACCESS_DENIED = '"shared_link_access_denied"'
    SHARED_LINK_NOT_FOUND = '"shared_link_not_found"'
    UNSUPPORTED_LINK_TYPE = '"unsupported_link_type"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getSettingsErrorValue(self) -> 'SharedLinkSettingsError': ...
    
    def hashCode(self) -> int: ...
    
    def isEmailNotVerified(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isSettingsError(self) -> bool: ...
    
    def isSharedLinkAccessDenied(self) -> bool: ...
    
    def isSharedLinkNotFound(self) -> bool: ...
    
    def isUnsupportedLinkType(self) -> bool: ...
    
    @staticmethod
    def settingsError(sharedLinkSettingsError: 'SharedLinkSettingsError') -> 'ModifySharedLinkSettingsError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        EMAIL_NOT_VERIFIED = 'EMAIL_NOT_VERIFIED'
        OTHER = 'OTHER'
        SETTINGS_ERROR = 'SETTINGS_ERROR'
        SHARED_LINK_ACCESS_DENIED = 'SHARED_LINK_ACCESS_DENIED'
        SHARED_LINK_NOT_FOUND = 'SHARED_LINK_NOT_FOUND'
        UNSUPPORTED_LINK_TYPE = 'UNSUPPORTED_LINK_TYPE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ModifySharedLinkSettingsErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ModifySharedLinkSettingsError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', modifySharedLinkSettingsError: ModifySharedLinkSettingsError) -> None: ...
    
    
class MountFolderError:
    ALREADY_MOUNTED = '"already_mounted"'
    INSIDE_SHARED_FOLDER = '"inside_shared_folder"'
    NOT_MOUNTABLE = '"not_mountable"'
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharedFolderAccessError: 'SharedFolderAccessError') -> 'MountFolderError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharedFolderAccessError': ...
    
    def getInsufficientQuotaValue(self) -> InsufficientQuotaAmounts: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def insufficientQuota(insufficientQuotaAmounts: InsufficientQuotaAmounts) -> 'MountFolderError': ...
    
    def isAccessError(self) -> bool: ...
    
    def isAlreadyMounted(self) -> bool: ...
    
    def isInsideSharedFolder(self) -> bool: ...
    
    def isInsufficientQuota(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isNotMountable(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        ALREADY_MOUNTED = 'ALREADY_MOUNTED'
        INSIDE_SHARED_FOLDER = 'INSIDE_SHARED_FOLDER'
        INSUFFICIENT_QUOTA = 'INSUFFICIENT_QUOTA'
        NOT_MOUNTABLE = 'NOT_MOUNTABLE'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class MountFolderErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MountFolderError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', mountFolderError: MountFolderError) -> None: ...
    
    
class ParentFolderAccessInfo:
    def __init__(self, s: str, s2: str, t: typing.List[MemberPermission], s3: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFolderName(self) -> str: ...
    
    def getPath(self) -> str: ...
    
    def getPermissions(self) -> typing.List[MemberPermission]: ...
    
    def getSharedFolderId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class PathLinkMetadata(LinkMetadata):
    def __init__(self, s: str, visibility: 'Visibility', s2: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getExpires(self) -> java.util.Date: ...
    
    def getPath(self) -> str: ...
    
    def getUrl(self) -> str: ...
    
    def getVisibility(self) -> 'Visibility': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class PendingUploadMode(java.lang.Enum):
    FILE = 'FILE'
    FOLDER = 'FOLDER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'PendingUploadMode': ...
    
    @staticmethod
    def values() -> typing.List['PendingUploadMode']: ...
    
    
class PermissionDeniedReason:
    FOLDER_IS_INSIDE_SHARED_FOLDER = '"folder_is_inside_shared_folder"'
    FOLDER_IS_LIMITED_TEAM_FOLDER = '"folder_is_limited_team_folder"'
    OTHER = '"other"'
    OWNER_NOT_ON_TEAM = '"owner_not_on_team"'
    PERMISSION_DENIED = '"permission_denied"'
    RESTRICTED_BY_PARENT_FOLDER = '"restricted_by_parent_folder"'
    RESTRICTED_BY_TEAM = '"restricted_by_team"'
    TARGET_IS_INDIRECT_MEMBER = '"target_is_indirect_member"'
    TARGET_IS_OWNER = '"target_is_owner"'
    TARGET_IS_SELF = '"target_is_self"'
    TARGET_NOT_ACTIVE = '"target_not_active"'
    USER_ACCOUNT_TYPE = '"user_account_type"'
    USER_NOT_ALLOWED_BY_OWNER = '"user_not_allowed_by_owner"'
    USER_NOT_ON_TEAM = '"user_not_on_team"'
    USER_NOT_SAME_TEAM_AS_OWNER = '"user_not_same_team_as_owner"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getInsufficientPlanValue(self) -> InsufficientPlan: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def insufficientPlan(insufficientPlan: InsufficientPlan) -> 'PermissionDeniedReason': ...
    
    def isFolderIsInsideSharedFolder(self) -> bool: ...
    
    def isFolderIsLimitedTeamFolder(self) -> bool: ...
    
    def isInsufficientPlan(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isOwnerNotOnTeam(self) -> bool: ...
    
    def isPermissionDenied(self) -> bool: ...
    
    def isRestrictedByParentFolder(self) -> bool: ...
    
    def isRestrictedByTeam(self) -> bool: ...
    
    def isTargetIsIndirectMember(self) -> bool: ...
    
    def isTargetIsOwner(self) -> bool: ...
    
    def isTargetIsSelf(self) -> bool: ...
    
    def isTargetNotActive(self) -> bool: ...
    
    def isUserAccountType(self) -> bool: ...
    
    def isUserNotAllowedByOwner(self) -> bool: ...
    
    def isUserNotOnTeam(self) -> bool: ...
    
    def isUserNotSameTeamAsOwner(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        FOLDER_IS_INSIDE_SHARED_FOLDER = 'FOLDER_IS_INSIDE_SHARED_FOLDER'
        FOLDER_IS_LIMITED_TEAM_FOLDER = 'FOLDER_IS_LIMITED_TEAM_FOLDER'
        INSUFFICIENT_PLAN = 'INSUFFICIENT_PLAN'
        OTHER = 'OTHER'
        OWNER_NOT_ON_TEAM = 'OWNER_NOT_ON_TEAM'
        PERMISSION_DENIED = 'PERMISSION_DENIED'
        RESTRICTED_BY_PARENT_FOLDER = 'RESTRICTED_BY_PARENT_FOLDER'
        RESTRICTED_BY_TEAM = 'RESTRICTED_BY_TEAM'
        TARGET_IS_INDIRECT_MEMBER = 'TARGET_IS_INDIRECT_MEMBER'
        TARGET_IS_OWNER = 'TARGET_IS_OWNER'
        TARGET_IS_SELF = 'TARGET_IS_SELF'
        TARGET_NOT_ACTIVE = 'TARGET_NOT_ACTIVE'
        USER_ACCOUNT_TYPE = 'USER_ACCOUNT_TYPE'
        USER_NOT_ALLOWED_BY_OWNER = 'USER_NOT_ALLOWED_BY_OWNER'
        USER_NOT_ON_TEAM = 'USER_NOT_ON_TEAM'
        USER_NOT_SAME_TEAM_AS_OWNER = 'USER_NOT_SAME_TEAM_AS_OWNER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RelinquishFileMembershipError:
    GROUP_ACCESS = '"group_access"'
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharingFileAccessError: 'SharingFileAccessError') -> 'RelinquishFileMembershipError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharingFileAccessError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isGroupAccess(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        GROUP_ACCESS = 'GROUP_ACCESS'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RelinquishFileMembershipErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RelinquishFileMembershipError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', relinquishFileMembershipError: RelinquishFileMembershipError) -> None: ...
    
    
class RelinquishFolderMembershipError:
    FOLDER_OWNER = '"folder_owner"'
    GROUP_ACCESS = '"group_access"'
    MOUNTED = '"mounted"'
    NO_EXPLICIT_ACCESS = '"no_explicit_access"'
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    TEAM_FOLDER = '"team_folder"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharedFolderAccessError: 'SharedFolderAccessError') -> 'RelinquishFolderMembershipError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharedFolderAccessError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isFolderOwner(self) -> bool: ...
    
    def isGroupAccess(self) -> bool: ...
    
    def isMounted(self) -> bool: ...
    
    def isNoExplicitAccess(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isTeamFolder(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        FOLDER_OWNER = 'FOLDER_OWNER'
        GROUP_ACCESS = 'GROUP_ACCESS'
        MOUNTED = 'MOUNTED'
        NO_EXPLICIT_ACCESS = 'NO_EXPLICIT_ACCESS'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        TEAM_FOLDER = 'TEAM_FOLDER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RelinquishFolderMembershipErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RelinquishFolderMembershipError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', relinquishFolderMembershipError: RelinquishFolderMembershipError) -> None: ...
    
    
class RemoveFileMemberError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharingFileAccessError: 'SharingFileAccessError') -> 'RemoveFileMemberError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharingFileAccessError': ...
    
    def getNoExplicitAccessValue(self) -> MemberAccessLevelResult: ...
    
    def getUserErrorValue(self) -> 'SharingUserError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isNoExplicitAccess(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isUserError(self) -> bool: ...
    
    @staticmethod
    def noExplicitAccess(memberAccessLevelResult: MemberAccessLevelResult) -> 'RemoveFileMemberError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def userError(sharingUserError: 'SharingUserError') -> 'RemoveFileMemberError': ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        NO_EXPLICIT_ACCESS = 'NO_EXPLICIT_ACCESS'
        OTHER = 'OTHER'
        USER_ERROR = 'USER_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RemoveFileMemberErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RemoveFileMemberError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', removeFileMemberError: RemoveFileMemberError) -> None: ...
    
    
class RemoveFolderMemberError:
    FOLDER_OWNER = '"folder_owner"'
    GROUP_ACCESS = '"group_access"'
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    TEAM_FOLDER = '"team_folder"'
    TOO_MANY_FILES = '"too_many_files"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharedFolderAccessError: 'SharedFolderAccessError') -> 'RemoveFolderMemberError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharedFolderAccessError': ...
    
    def getMemberErrorValue(self) -> 'SharedFolderMemberError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isFolderOwner(self) -> bool: ...
    
    def isGroupAccess(self) -> bool: ...
    
    def isMemberError(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isTeamFolder(self) -> bool: ...
    
    def isTooManyFiles(self) -> bool: ...
    
    @staticmethod
    def memberError(sharedFolderMemberError: 'SharedFolderMemberError') -> 'RemoveFolderMemberError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        FOLDER_OWNER = 'FOLDER_OWNER'
        GROUP_ACCESS = 'GROUP_ACCESS'
        MEMBER_ERROR = 'MEMBER_ERROR'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        TEAM_FOLDER = 'TEAM_FOLDER'
        TOO_MANY_FILES = 'TOO_MANY_FILES'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RemoveFolderMemberErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RemoveFolderMemberError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', removeFolderMemberError: RemoveFolderMemberError) -> None: ...
    
    
class RemoveMemberJobStatus:
    IN_PROGRESS = '"in_progress"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def complete(memberAccessLevelResult: MemberAccessLevelResult) -> 'RemoveMemberJobStatus': ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failed(removeFolderMemberError: RemoveFolderMemberError) -> 'RemoveMemberJobStatus': ...
    
    def getCompleteValue(self) -> MemberAccessLevelResult: ...
    
    def getFailedValue(self) -> RemoveFolderMemberError: ...
    
    def hashCode(self) -> int: ...
    
    def isComplete(self) -> bool: ...
    
    def isFailed(self) -> bool: ...
    
    def isInProgress(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        COMPLETE = 'COMPLETE'
        FAILED = 'FAILED'
        IN_PROGRESS = 'IN_PROGRESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RequestedLinkAccessLevel(java.lang.Enum):
    EDITOR = 'EDITOR'
    MAX = 'MAX'
    OTHER = 'OTHER'
    VIEWER = 'VIEWER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'RequestedLinkAccessLevel': ...
    
    @staticmethod
    def values() -> typing.List['RequestedLinkAccessLevel']: ...
    
    
class RequestedVisibility(java.lang.Enum):
    PASSWORD = 'PASSWORD'
    PUBLIC = 'PUBLIC'
    TEAM_ONLY = 'TEAM_ONLY'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'RequestedVisibility': ...
    
    @staticmethod
    def values() -> typing.List['RequestedVisibility']: ...
    
    
class ResolvedVisibility(java.lang.Enum):
    OTHER = 'OTHER'
    PASSWORD = 'PASSWORD'
    PUBLIC = 'PUBLIC'
    SHARED_FOLDER_ONLY = 'SHARED_FOLDER_ONLY'
    TEAM_AND_PASSWORD = 'TEAM_AND_PASSWORD'
    TEAM_ONLY = 'TEAM_ONLY'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ResolvedVisibility': ...
    
    @staticmethod
    def values() -> typing.List['ResolvedVisibility']: ...
    
    
class RevokeSharedLinkError(java.lang.Enum):
    OTHER = 'OTHER'
    SHARED_LINK_ACCESS_DENIED = 'SHARED_LINK_ACCESS_DENIED'
    SHARED_LINK_MALFORMED = 'SHARED_LINK_MALFORMED'
    SHARED_LINK_NOT_FOUND = 'SHARED_LINK_NOT_FOUND'
    UNSUPPORTED_LINK_TYPE = 'UNSUPPORTED_LINK_TYPE'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'RevokeSharedLinkError': ...
    
    @staticmethod
    def values() -> typing.List['RevokeSharedLinkError']: ...
    
    
class RevokeSharedLinkErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RevokeSharedLinkError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', revokeSharedLinkError: RevokeSharedLinkError) -> None: ...
    
    
class SetAccessInheritanceError:
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharedFolderAccessError: 'SharedFolderAccessError') -> 'SetAccessInheritanceError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> 'SharedFolderAccessError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class SetAccessInheritanceErrorException('com.dropbox.core.DbxApiException'):
    errorValue: SetAccessInheritanceError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', setAccessInheritanceError: SetAccessInheritanceError) -> None: ...
    
    
class ShareFolderBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'ShareFolderLaunch': ...
    
    def withAccessInheritance(self, accessInheritance: AccessInheritance) -> 'ShareFolderBuilder': ...
    
    def withAclUpdatePolicy(self, aclUpdatePolicy: AclUpdatePolicy) -> 'ShareFolderBuilder': ...
    
    def withActions(self, t: typing.List[FolderAction]) -> 'ShareFolderBuilder': ...
    
    def withForceAsync(self, b: bool) -> 'ShareFolderBuilder': ...
    
    def withLinkSettings(self, linkSettings: LinkSettings) -> 'ShareFolderBuilder': ...
    
    def withMemberPolicy(self, memberPolicy: MemberPolicy) -> 'ShareFolderBuilder': ...
    
    def withSharedLinkPolicy(self, sharedLinkPolicy: 'SharedLinkPolicy') -> 'ShareFolderBuilder': ...
    
    def withViewerInfoPolicy(self, viewerInfoPolicy: 'ViewerInfoPolicy') -> 'ShareFolderBuilder': ...
    
    
class ShareFolderError:
    DISALLOWED_SHARED_LINK_POLICY = '"disallowed_shared_link_policy"'
    EMAIL_UNVERIFIED = '"email_unverified"'
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    TEAM_POLICY_DISALLOWS_MEMBER_POLICY = '"team_policy_disallows_member_policy"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def badPath(sharePathError: 'SharePathError') -> 'ShareFolderError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getBadPathValue(self) -> 'SharePathError': ...
    
    def hashCode(self) -> int: ...
    
    def isBadPath(self) -> bool: ...
    
    def isDisallowedSharedLinkPolicy(self) -> bool: ...
    
    def isEmailUnverified(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isTeamPolicyDisallowsMemberPolicy(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        BAD_PATH = 'BAD_PATH'
        DISALLOWED_SHARED_LINK_POLICY = 'DISALLOWED_SHARED_LINK_POLICY'
        EMAIL_UNVERIFIED = 'EMAIL_UNVERIFIED'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        TEAM_POLICY_DISALLOWS_MEMBER_POLICY = 'TEAM_POLICY_DISALLOWS_MEMBER_POLICY'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ShareFolderErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ShareFolderError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', shareFolderError: ShareFolderError) -> None: ...
    
    
class ShareFolderJobStatus:
    IN_PROGRESS = '"in_progress"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def complete(sharedFolderMetadata: 'SharedFolderMetadata') -> 'ShareFolderJobStatus': ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failed(shareFolderError: ShareFolderError) -> 'ShareFolderJobStatus': ...
    
    def getCompleteValue(self) -> 'SharedFolderMetadata': ...
    
    def getFailedValue(self) -> ShareFolderError: ...
    
    def hashCode(self) -> int: ...
    
    def isComplete(self) -> bool: ...
    
    def isFailed(self) -> bool: ...
    
    def isInProgress(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        COMPLETE = 'COMPLETE'
        FAILED = 'FAILED'
        IN_PROGRESS = 'IN_PROGRESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ShareFolderLaunch:
    def __init__(self) -> None: ...
    
    @staticmethod
    def asyncJobId(s: str) -> 'ShareFolderLaunch': ...
    
    @staticmethod
    def complete(sharedFolderMetadata: 'SharedFolderMetadata') -> 'ShareFolderLaunch': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAsyncJobIdValue(self) -> str: ...
    
    def getCompleteValue(self) -> 'SharedFolderMetadata': ...
    
    def hashCode(self) -> int: ...
    
    def isAsyncJobId(self) -> bool: ...
    
    def isComplete(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ASYNC_JOB_ID = 'ASYNC_JOB_ID'
        COMPLETE = 'COMPLETE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class SharePathError:
    CONTAINS_APP_FOLDER = '"contains_app_folder"'
    CONTAINS_SHARED_FOLDER = '"contains_shared_folder"'
    CONTAINS_TEAM_FOLDER = '"contains_team_folder"'
    INSIDE_APP_FOLDER = '"inside_app_folder"'
    INSIDE_OSX_PACKAGE = '"inside_osx_package"'
    INSIDE_PUBLIC_FOLDER = '"inside_public_folder"'
    INSIDE_SHARED_FOLDER = '"inside_shared_folder"'
    INVALID_PATH = '"invalid_path"'
    IS_APP_FOLDER = '"is_app_folder"'
    IS_FILE = '"is_file"'
    IS_OSX_PACKAGE = '"is_osx_package"'
    IS_PUBLIC_FOLDER = '"is_public_folder"'
    IS_VAULT = '"is_vault"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def alreadyShared(sharedFolderMetadata: 'SharedFolderMetadata') -> 'SharePathError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAlreadySharedValue(self) -> 'SharedFolderMetadata': ...
    
    def hashCode(self) -> int: ...
    
    def isAlreadyShared(self) -> bool: ...
    
    def isContainsAppFolder(self) -> bool: ...
    
    def isContainsSharedFolder(self) -> bool: ...
    
    def isContainsTeamFolder(self) -> bool: ...
    
    def isInsideAppFolder(self) -> bool: ...
    
    def isInsideOsxPackage(self) -> bool: ...
    
    def isInsidePublicFolder(self) -> bool: ...
    
    def isInsideSharedFolder(self) -> bool: ...
    
    def isInvalidPath(self) -> bool: ...
    
    def isIsAppFolder(self) -> bool: ...
    
    def isIsFile(self) -> bool: ...
    
    def isIsOsxPackage(self) -> bool: ...
    
    def isIsPublicFolder(self) -> bool: ...
    
    def isIsVault(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ALREADY_SHARED = 'ALREADY_SHARED'
        CONTAINS_APP_FOLDER = 'CONTAINS_APP_FOLDER'
        CONTAINS_SHARED_FOLDER = 'CONTAINS_SHARED_FOLDER'
        CONTAINS_TEAM_FOLDER = 'CONTAINS_TEAM_FOLDER'
        INSIDE_APP_FOLDER = 'INSIDE_APP_FOLDER'
        INSIDE_OSX_PACKAGE = 'INSIDE_OSX_PACKAGE'
        INSIDE_PUBLIC_FOLDER = 'INSIDE_PUBLIC_FOLDER'
        INSIDE_SHARED_FOLDER = 'INSIDE_SHARED_FOLDER'
        INVALID_PATH = 'INVALID_PATH'
        IS_APP_FOLDER = 'IS_APP_FOLDER'
        IS_FILE = 'IS_FILE'
        IS_OSX_PACKAGE = 'IS_OSX_PACKAGE'
        IS_PUBLIC_FOLDER = 'IS_PUBLIC_FOLDER'
        IS_VAULT = 'IS_VAULT'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class SharedContentLinkMetadata(SharedContentLinkMetadataBase):
    def __init__(self, t: typing.List[LinkAudience], linkAudience: LinkAudience, t2: typing.List[LinkPermission], b: bool, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessLevel(self) -> AccessLevel: ...
    
    def getAudienceExceptions(self) -> AudienceExceptions: ...
    
    def getAudienceOptions(self) -> typing.List[LinkAudience]: ...
    
    def getAudienceRestrictingSharedFolder(self) -> AudienceRestrictingSharedFolder: ...
    
    def getCurrentAudience(self) -> LinkAudience: ...
    
    def getExpiry(self) -> java.util.Date: ...
    
    def getLinkPermissions(self) -> typing.List[LinkPermission]: ...
    
    def getPasswordProtected(self) -> bool: ...
    
    def getUrl(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> SharedContentLinkMetadataBase: ...
        
        def withAccessLevel(self, accessLevel: AccessLevel) -> str: ...
        
        def withAudienceExceptions(self, audienceExceptions: AudienceExceptions) -> str: ...
        
        def withAudienceRestrictingSharedFolder(self, audienceRestrictingSharedFolder: AudienceRestrictingSharedFolder) -> str: ...
        
        def withExpiry(self, j: java.util.Date) -> str: ...
        
        
    
class SharedFileMembers:
    def __init__(self, t: typing.List['UserFileMembershipInfo'], t2: typing.List[GroupMembershipInfo], t3: typing.List[InviteeMembershipInfo]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getGroups(self) -> typing.List[GroupMembershipInfo]: ...
    
    def getInvitees(self) -> typing.List[InviteeMembershipInfo]: ...
    
    def getUsers(self) -> typing.List['UserFileMembershipInfo']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class SharedFileMetadata:
    def __init__(self, s: str, s2: str, folderPolicy: FolderPolicy, s3: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessType(self) -> AccessLevel: ...
    
    def getExpectedLinkMetadata(self) -> ExpectedSharedContentLinkMetadata: ...
    
    def getId(self) -> str: ...
    
    def getLinkMetadata(self) -> SharedContentLinkMetadata: ...
    
    def getName(self) -> str: ...
    
    def getOwnerDisplayNames(self) -> typing.List[str]: ...
    
    def getOwnerTeam(self) -> com.dropbox.core.v2.users.Team: ...
    
    def getParentSharedFolderId(self) -> str: ...
    
    def getPathDisplay(self) -> str: ...
    
    def getPathLower(self) -> str: ...
    
    def getPermissions(self) -> typing.List[FilePermission]: ...
    
    def getPolicy(self) -> FolderPolicy: ...
    
    def getPreviewUrl(self) -> str: ...
    
    def getTimeInvited(self) -> java.util.Date: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str, s2: str, folderPolicy: FolderPolicy, s3: str) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'SharedFileMetadata': ...
        
        def withAccessType(self, accessLevel: AccessLevel) -> str: ...
        
        def withExpectedLinkMetadata(self, expectedSharedContentLinkMetadata: ExpectedSharedContentLinkMetadata) -> str: ...
        
        def withLinkMetadata(self, sharedContentLinkMetadata: SharedContentLinkMetadata) -> str: ...
        
        def withOwnerDisplayNames(self, t: typing.List[str]) -> str: ...
        
        def withOwnerTeam(self, c: com.dropbox.core.v2.users.Team) -> str: ...
        
        def withParentSharedFolderId(self, s: str) -> str: ...
        
        def withPathDisplay(self, s: str) -> str: ...
        
        def withPathLower(self, s: str) -> str: ...
        
        def withPermissions(self, t: typing.List[FilePermission]) -> str: ...
        
        def withTimeInvited(self, j: java.util.Date) -> str: ...
        
        
    
class SharedFolderAccessError(java.lang.Enum):
    EMAIL_UNVERIFIED = 'EMAIL_UNVERIFIED'
    INVALID_ID = 'INVALID_ID'
    NOT_A_MEMBER = 'NOT_A_MEMBER'
    OTHER = 'OTHER'
    UNMOUNTED = 'UNMOUNTED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SharedFolderAccessError': ...
    
    @staticmethod
    def values() -> typing.List['SharedFolderAccessError']: ...
    
    
class SharedFolderAccessErrorException('com.dropbox.core.DbxApiException'):
    errorValue: SharedFolderAccessError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', sharedFolderAccessError: SharedFolderAccessError) -> None: ...
    
    
class SharedFolderMemberError:
    INVALID_DROPBOX_ID = '"invalid_dropbox_id"'
    NOT_A_MEMBER = '"not_a_member"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getNoExplicitAccessValue(self) -> MemberAccessLevelResult: ...
    
    def hashCode(self) -> int: ...
    
    def isInvalidDropboxId(self) -> bool: ...
    
    def isNoExplicitAccess(self) -> bool: ...
    
    def isNotAMember(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    @staticmethod
    def noExplicitAccess(memberAccessLevelResult: MemberAccessLevelResult) -> 'SharedFolderMemberError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        INVALID_DROPBOX_ID = 'INVALID_DROPBOX_ID'
        NOT_A_MEMBER = 'NOT_A_MEMBER'
        NO_EXPLICIT_ACCESS = 'NO_EXPLICIT_ACCESS'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class SharedFolderMembers:
    def __init__(self, t: typing.List['UserMembershipInfo'], t2: typing.List[GroupMembershipInfo], t3: typing.List[InviteeMembershipInfo]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getGroups(self) -> typing.List[GroupMembershipInfo]: ...
    
    def getInvitees(self) -> typing.List[InviteeMembershipInfo]: ...
    
    def getUsers(self) -> typing.List['UserMembershipInfo']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class SharedFolderMetadataBase:
    def __init__(self, accessLevel: AccessLevel, b: bool, b2: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessType(self) -> AccessLevel: ...
    
    def getIsInsideTeamFolder(self) -> bool: ...
    
    def getIsTeamFolder(self) -> bool: ...
    
    def getOwnerDisplayNames(self) -> typing.List[str]: ...
    
    def getOwnerTeam(self) -> com.dropbox.core.v2.users.Team: ...
    
    def getParentFolderName(self) -> str: ...
    
    def getParentSharedFolderId(self) -> str: ...
    
    def getPathLower(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(accessLevel: AccessLevel, b: bool, b2: bool) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'SharedFolderMetadataBase': ...
        
        def withOwnerDisplayNames(self, t: typing.List[str]) -> str: ...
        
        def withOwnerTeam(self, c: com.dropbox.core.v2.users.Team) -> str: ...
        
        def withParentFolderName(self, s: str) -> str: ...
        
        def withParentSharedFolderId(self, s: str) -> str: ...
        
        def withPathLower(self, s: str) -> str: ...
        
        
    
class SharedFolderMetadata(SharedFolderMetadataBase):
    def __init__(self, accessLevel: AccessLevel, b: bool, b2: bool, s: str, folderPolicy: FolderPolicy, s2: str, s3: str, j: java.util.Date) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessInheritance(self) -> AccessInheritance: ...
    
    def getAccessType(self) -> AccessLevel: ...
    
    def getIsInsideTeamFolder(self) -> bool: ...
    
    def getIsTeamFolder(self) -> bool: ...
    
    def getLinkMetadata(self) -> SharedContentLinkMetadata: ...
    
    def getName(self) -> str: ...
    
    def getOwnerDisplayNames(self) -> typing.List[str]: ...
    
    def getOwnerTeam(self) -> com.dropbox.core.v2.users.Team: ...
    
    def getParentFolderName(self) -> str: ...
    
    def getParentSharedFolderId(self) -> str: ...
    
    def getPathLower(self) -> str: ...
    
    def getPermissions(self) -> typing.List[FolderPermission]: ...
    
    def getPolicy(self) -> FolderPolicy: ...
    
    def getPreviewUrl(self) -> str: ...
    
    def getSharedFolderId(self) -> str: ...
    
    def getTimeInvited(self) -> java.util.Date: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> SharedFolderMetadataBase: ...
        
        def withAccessInheritance(self, accessInheritance: AccessInheritance) -> str: ...
        
        def withLinkMetadata(self, sharedContentLinkMetadata: SharedContentLinkMetadata) -> str: ...
        
        def withOwnerDisplayNames(self, l: list) -> str: ...
        
        def withOwnerTeam(self, c: com.dropbox.core.v2.users.Team) -> str: ...
        
        def withParentFolderName(self, s: str) -> str: ...
        
        def withParentSharedFolderId(self, s: str) -> str: ...
        
        def withPathLower(self, s: str) -> str: ...
        
        def withPermissions(self, t: typing.List[FolderPermission]) -> str: ...
        
        
    
class SharedLinkAccessFailureReason(java.lang.Enum):
    EMAIL_VERIFY_REQUIRED = 'EMAIL_VERIFY_REQUIRED'
    LOGIN_REQUIRED = 'LOGIN_REQUIRED'
    OTHER = 'OTHER'
    OWNER_ONLY = 'OWNER_ONLY'
    PASSWORD_REQUIRED = 'PASSWORD_REQUIRED'
    TEAM_ONLY = 'TEAM_ONLY'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SharedLinkAccessFailureReason': ...
    
    @staticmethod
    def values() -> typing.List['SharedLinkAccessFailureReason']: ...
    
    
class SharedLinkAlreadyExistsMetadata:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMetadataValue(self) -> SharedLinkMetadata: ...
    
    def hashCode(self) -> int: ...
    
    def isMetadata(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    @staticmethod
    def metadata(sharedLinkMetadata: SharedLinkMetadata) -> 'SharedLinkAlreadyExistsMetadata': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        METADATA = 'METADATA'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class SharedLinkError(java.lang.Enum):
    OTHER = 'OTHER'
    SHARED_LINK_ACCESS_DENIED = 'SHARED_LINK_ACCESS_DENIED'
    SHARED_LINK_NOT_FOUND = 'SHARED_LINK_NOT_FOUND'
    UNSUPPORTED_LINK_TYPE = 'UNSUPPORTED_LINK_TYPE'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SharedLinkError': ...
    
    @staticmethod
    def values() -> typing.List['SharedLinkError']: ...
    
    
class SharedLinkErrorException('com.dropbox.core.DbxApiException'):
    errorValue: SharedLinkError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', sharedLinkError: SharedLinkError) -> None: ...
    
    
class SharedLinkPolicy(java.lang.Enum):
    ANYONE = 'ANYONE'
    MEMBERS = 'MEMBERS'
    OTHER = 'OTHER'
    TEAM = 'TEAM'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SharedLinkPolicy': ...
    
    @staticmethod
    def values() -> typing.List['SharedLinkPolicy']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.sharing.SharedLinkPolicy.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class SharedLinkSettings:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccess(self) -> RequestedLinkAccessLevel: ...
    
    def getAudience(self) -> LinkAudience: ...
    
    def getExpires(self) -> java.util.Date: ...
    
    def getLinkPassword(self) -> str: ...
    
    def getRequestedVisibility(self) -> RequestedVisibility: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'SharedLinkSettings': ...
        
        def withAccess(self, requestedLinkAccessLevel: RequestedLinkAccessLevel) -> str: ...
        
        def withAudience(self, linkAudience: LinkAudience) -> str: ...
        
        def withExpires(self, j: java.util.Date) -> str: ...
        
        def withLinkPassword(self, s: str) -> str: ...
        
        def withRequestedVisibility(self, requestedVisibility: RequestedVisibility) -> str: ...
        
        
    
class SharedLinkSettingsError(java.lang.Enum):
    INVALID_SETTINGS = 'INVALID_SETTINGS'
    NOT_AUTHORIZED = 'NOT_AUTHORIZED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SharedLinkSettingsError': ...
    
    @staticmethod
    def values() -> typing.List['SharedLinkSettingsError']: ...
    
    
class SharingFileAccessError(java.lang.Enum):
    INSIDE_OSX_PACKAGE = 'INSIDE_OSX_PACKAGE'
    INSIDE_PUBLIC_FOLDER = 'INSIDE_PUBLIC_FOLDER'
    INVALID_FILE = 'INVALID_FILE'
    IS_FOLDER = 'IS_FOLDER'
    NO_PERMISSION = 'NO_PERMISSION'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SharingFileAccessError': ...
    
    @staticmethod
    def values() -> typing.List['SharingFileAccessError']: ...
    
    
class SharingUserError(java.lang.Enum):
    EMAIL_UNVERIFIED = 'EMAIL_UNVERIFIED'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SharingUserError': ...
    
    @staticmethod
    def values() -> typing.List['SharingUserError']: ...
    
    
class SharingUserErrorException('com.dropbox.core.DbxApiException'):
    errorValue: SharingUserError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', sharingUserError: SharingUserError) -> None: ...
    
    
class TeamMemberInfo:
    def __init__(self, c: com.dropbox.core.v2.users.Team, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDisplayName(self) -> str: ...
    
    def getMemberId(self) -> str: ...
    
    def getTeamInfo(self) -> com.dropbox.core.v2.users.Team: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class TransferFolderError:
    INVALID_DROPBOX_ID = '"invalid_dropbox_id"'
    NEW_OWNER_EMAIL_UNVERIFIED = '"new_owner_email_unverified"'
    NEW_OWNER_NOT_A_MEMBER = '"new_owner_not_a_member"'
    NEW_OWNER_UNMOUNTED = '"new_owner_unmounted"'
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    TEAM_FOLDER = '"team_folder"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharedFolderAccessError: SharedFolderAccessError) -> 'TransferFolderError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> SharedFolderAccessError: ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isInvalidDropboxId(self) -> bool: ...
    
    def isNewOwnerEmailUnverified(self) -> bool: ...
    
    def isNewOwnerNotAMember(self) -> bool: ...
    
    def isNewOwnerUnmounted(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isTeamFolder(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        INVALID_DROPBOX_ID = 'INVALID_DROPBOX_ID'
        NEW_OWNER_EMAIL_UNVERIFIED = 'NEW_OWNER_EMAIL_UNVERIFIED'
        NEW_OWNER_NOT_A_MEMBER = 'NEW_OWNER_NOT_A_MEMBER'
        NEW_OWNER_UNMOUNTED = 'NEW_OWNER_UNMOUNTED'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        TEAM_FOLDER = 'TEAM_FOLDER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TransferFolderErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TransferFolderError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', transferFolderError: TransferFolderError) -> None: ...
    
    
class UnmountFolderError:
    NOT_UNMOUNTABLE = '"not_unmountable"'
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharedFolderAccessError: SharedFolderAccessError) -> 'UnmountFolderError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> SharedFolderAccessError: ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isNotUnmountable(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        NOT_UNMOUNTABLE = 'NOT_UNMOUNTABLE'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UnmountFolderErrorException('com.dropbox.core.DbxApiException'):
    errorValue: UnmountFolderError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', unmountFolderError: UnmountFolderError) -> None: ...
    
    
class UnshareFileError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharingFileAccessError: SharingFileAccessError) -> 'UnshareFileError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> SharingFileAccessError: ...
    
    def getUserErrorValue(self) -> SharingUserError: ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isUserError(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def userError(sharingUserError: SharingUserError) -> 'UnshareFileError': ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        OTHER = 'OTHER'
        USER_ERROR = 'USER_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UnshareFileErrorException('com.dropbox.core.DbxApiException'):
    errorValue: UnshareFileError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', unshareFileError: UnshareFileError) -> None: ...
    
    
class UnshareFolderError:
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    TEAM_FOLDER = '"team_folder"'
    TOO_MANY_FILES = '"too_many_files"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharedFolderAccessError: SharedFolderAccessError) -> 'UnshareFolderError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> SharedFolderAccessError: ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isTeamFolder(self) -> bool: ...
    
    def isTooManyFiles(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        TEAM_FOLDER = 'TEAM_FOLDER'
        TOO_MANY_FILES = 'TOO_MANY_FILES'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UnshareFolderErrorException('com.dropbox.core.DbxApiException'):
    errorValue: UnshareFolderError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', unshareFolderError: UnshareFolderError) -> None: ...
    
    
class UpdateFolderMemberError:
    INSUFFICIENT_PLAN = '"insufficient_plan"'
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharedFolderAccessError: SharedFolderAccessError) -> 'UpdateFolderMemberError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> SharedFolderAccessError: ...
    
    def getMemberErrorValue(self) -> SharedFolderMemberError: ...
    
    def getNoExplicitAccessValue(self) -> AddFolderMemberError: ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isInsufficientPlan(self) -> bool: ...
    
    def isMemberError(self) -> bool: ...
    
    def isNoExplicitAccess(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    @staticmethod
    def memberError(sharedFolderMemberError: SharedFolderMemberError) -> 'UpdateFolderMemberError': ...
    
    @staticmethod
    def noExplicitAccess(addFolderMemberError: AddFolderMemberError) -> 'UpdateFolderMemberError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        INSUFFICIENT_PLAN = 'INSUFFICIENT_PLAN'
        MEMBER_ERROR = 'MEMBER_ERROR'
        NO_EXPLICIT_ACCESS = 'NO_EXPLICIT_ACCESS'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UpdateFolderMemberErrorException('com.dropbox.core.DbxApiException'):
    errorValue: UpdateFolderMemberError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', updateFolderMemberError: UpdateFolderMemberError) -> None: ...
    
    
class UpdateFolderPolicyBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> SharedFolderMetadata: ...
    
    def withAclUpdatePolicy(self, aclUpdatePolicy: AclUpdatePolicy) -> 'UpdateFolderPolicyBuilder': ...
    
    def withActions(self, t: typing.List[FolderAction]) -> 'UpdateFolderPolicyBuilder': ...
    
    def withLinkSettings(self, linkSettings: LinkSettings) -> 'UpdateFolderPolicyBuilder': ...
    
    def withMemberPolicy(self, memberPolicy: MemberPolicy) -> 'UpdateFolderPolicyBuilder': ...
    
    def withSharedLinkPolicy(self, sharedLinkPolicy: SharedLinkPolicy) -> 'UpdateFolderPolicyBuilder': ...
    
    def withViewerInfoPolicy(self, viewerInfoPolicy: 'ViewerInfoPolicy') -> 'UpdateFolderPolicyBuilder': ...
    
    
class UpdateFolderPolicyError:
    DISALLOWED_SHARED_LINK_POLICY = '"disallowed_shared_link_policy"'
    NOT_ON_TEAM = '"not_on_team"'
    NO_PERMISSION = '"no_permission"'
    OTHER = '"other"'
    TEAM_FOLDER = '"team_folder"'
    TEAM_POLICY_DISALLOWS_MEMBER_POLICY = '"team_policy_disallows_member_policy"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(sharedFolderAccessError: SharedFolderAccessError) -> 'UpdateFolderPolicyError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> SharedFolderAccessError: ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isDisallowedSharedLinkPolicy(self) -> bool: ...
    
    def isNoPermission(self) -> bool: ...
    
    def isNotOnTeam(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isTeamFolder(self) -> bool: ...
    
    def isTeamPolicyDisallowsMemberPolicy(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        DISALLOWED_SHARED_LINK_POLICY = 'DISALLOWED_SHARED_LINK_POLICY'
        NOT_ON_TEAM = 'NOT_ON_TEAM'
        NO_PERMISSION = 'NO_PERMISSION'
        OTHER = 'OTHER'
        TEAM_FOLDER = 'TEAM_FOLDER'
        TEAM_POLICY_DISALLOWS_MEMBER_POLICY = 'TEAM_POLICY_DISALLOWS_MEMBER_POLICY'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UpdateFolderPolicyErrorException('com.dropbox.core.DbxApiException'):
    errorValue: UpdateFolderPolicyError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', updateFolderPolicyError: UpdateFolderPolicyError) -> None: ...
    
    
class UserMembershipInfo(MembershipInfo):
    def __init__(self, accessLevel: AccessLevel, userInfo: 'UserInfo') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessType(self) -> AccessLevel: ...
    
    def getInitials(self) -> str: ...
    
    def getIsInherited(self) -> bool: ...
    
    def getPermissions(self) -> typing.List[MemberPermission]: ...
    
    def getUser(self) -> 'UserInfo': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> MembershipInfo: ...
        
        def withInitials(self, s: str) -> str: ...
        
        def withIsInherited(self, b: bool) -> str: ...
        
        def withPermissions(self, l: list) -> str: ...
        
        
    
class UserFileMembershipInfo(UserMembershipInfo):
    def __init__(self, accessLevel: AccessLevel, userInfo: 'UserInfo') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessType(self) -> AccessLevel: ...
    
    def getInitials(self) -> str: ...
    
    def getIsInherited(self) -> bool: ...
    
    def getPermissions(self) -> typing.List[MemberPermission]: ...
    
    def getPlatformType(self) -> com.dropbox.core.v2.seenstate.PlatformType: ...
    
    def getTimeLastSeen(self) -> java.util.Date: ...
    
    def getUser(self) -> 'UserInfo': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> MembershipInfo: ...
        
        def withInitials(self, s: str) -> str: ...
        
        def withIsInherited(self, b: bool) -> str: ...
        
        def withPermissions(self, l: list) -> str: ...
        
        def withPlatformType(self, c: com.dropbox.core.v2.seenstate.PlatformType) -> str: ...
        
        def withTimeLastSeen(self, j: java.util.Date) -> str: ...
        
        
    
class UserInfo:
    def __init__(self, s: str, s2: str, s3: str, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccountId(self) -> str: ...
    
    def getDisplayName(self) -> str: ...
    
    def getEmail(self) -> str: ...
    
    def getSameTeam(self) -> bool: ...
    
    def getTeamMemberId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.sharing.UserInfo.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class ViewerInfoPolicy(java.lang.Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ViewerInfoPolicy': ...
    
    @staticmethod
    def values() -> typing.List['ViewerInfoPolicy']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.sharing.ViewerInfoPolicy.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class Visibility(java.lang.Enum):
    OTHER = 'OTHER'
    PASSWORD = 'PASSWORD'
    PUBLIC = 'PUBLIC'
    SHARED_FOLDER_ONLY = 'SHARED_FOLDER_ONLY'
    TEAM_AND_PASSWORD = 'TEAM_AND_PASSWORD'
    TEAM_ONLY = 'TEAM_ONLY'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'Visibility': ...
    
    @staticmethod
    def values() -> typing.List['Visibility']: ...
    
    
