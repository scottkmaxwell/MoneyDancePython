import typing
import com.dropbox.core.v2
import java.lang


class AccessError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getInvalidAccountTypeValue(self) -> 'InvalidAccountTypeError': ...
    
    def getPaperAccessDeniedValue(self) -> 'PaperAccessError': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def invalidAccountType(invalidAccountTypeError: 'InvalidAccountTypeError') -> 'AccessError': ...
    
    def isInvalidAccountType(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPaperAccessDenied(self) -> bool: ...
    
    @staticmethod
    def paperAccessDenied(paperAccessError: 'PaperAccessError') -> 'AccessError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.auth.AccessError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        INVALID_ACCOUNT_TYPE = 'INVALID_ACCOUNT_TYPE'
        OTHER = 'OTHER'
        PAPER_ACCESS_DENIED = 'PAPER_ACCESS_DENIED'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class AuthError:
    EXPIRED_ACCESS_TOKEN = '"expired_access_token"'
    INVALID_ACCESS_TOKEN = '"invalid_access_token"'
    INVALID_SELECT_ADMIN = '"invalid_select_admin"'
    INVALID_SELECT_USER = '"invalid_select_user"'
    OTHER = '"other"'
    ROUTE_ACCESS_DENIED = '"route_access_denied"'
    USER_SUSPENDED = '"user_suspended"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMissingScopeValue(self) -> 'TokenScopeError': ...
    
    def hashCode(self) -> int: ...
    
    def isExpiredAccessToken(self) -> bool: ...
    
    def isInvalidAccessToken(self) -> bool: ...
    
    def isInvalidSelectAdmin(self) -> bool: ...
    
    def isInvalidSelectUser(self) -> bool: ...
    
    def isMissingScope(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isRouteAccessDenied(self) -> bool: ...
    
    def isUserSuspended(self) -> bool: ...
    
    @staticmethod
    def missingScope(tokenScopeError: 'TokenScopeError') -> 'AuthError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.auth.AuthError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        EXPIRED_ACCESS_TOKEN = 'EXPIRED_ACCESS_TOKEN'
        INVALID_ACCESS_TOKEN = 'INVALID_ACCESS_TOKEN'
        INVALID_SELECT_ADMIN = 'INVALID_SELECT_ADMIN'
        INVALID_SELECT_USER = 'INVALID_SELECT_USER'
        MISSING_SCOPE = 'MISSING_SCOPE'
        OTHER = 'OTHER'
        ROUTE_ACCESS_DENIED = 'ROUTE_ACCESS_DENIED'
        USER_SUSPENDED = 'USER_SUSPENDED'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class DbxAppAuthRequests:
    def __init__(self, c: com.dropbox.core.v2.DbxRawClientV2) -> None: ...
    
    def tokenFromOauth1(self, s: str, s2: str) -> 'TokenFromOAuth1Result': ...
    
    
class DbxUserAuthRequests:
    def __init__(self, c: com.dropbox.core.v2.DbxRawClientV2) -> None: ...
    
    def tokenRevoke(self) -> None: ...
    
    
class InvalidAccountTypeError(java.lang.Enum):
    ENDPOINT = 'ENDPOINT'
    FEATURE = 'FEATURE'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'InvalidAccountTypeError': ...
    
    @staticmethod
    def values() -> typing.List['InvalidAccountTypeError']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.auth.InvalidAccountTypeError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class PaperAccessError(java.lang.Enum):
    NOT_PAPER_USER = 'NOT_PAPER_USER'
    OTHER = 'OTHER'
    PAPER_DISABLED = 'PAPER_DISABLED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'PaperAccessError': ...
    
    @staticmethod
    def values() -> typing.List['PaperAccessError']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.auth.PaperAccessError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class RateLimitError:
    def __init__(self, rateLimitReason: 'RateLimitReason') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getReason(self) -> 'RateLimitReason': ...
    
    def getRetryAfter(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.auth.RateLimitError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class RateLimitReason(java.lang.Enum):
    OTHER = 'OTHER'
    TOO_MANY_REQUESTS = 'TOO_MANY_REQUESTS'
    TOO_MANY_WRITE_OPERATIONS = 'TOO_MANY_WRITE_OPERATIONS'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'RateLimitReason': ...
    
    @staticmethod
    def values() -> typing.List['RateLimitReason']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.auth.RateLimitReason.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class TokenFromOAuth1Error(java.lang.Enum):
    APP_ID_MISMATCH = 'APP_ID_MISMATCH'
    INVALID_OAUTH1_TOKEN_INFO = 'INVALID_OAUTH1_TOKEN_INFO'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'TokenFromOAuth1Error': ...
    
    @staticmethod
    def values() -> typing.List['TokenFromOAuth1Error']: ...
    
    
class TokenFromOAuth1ErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TokenFromOAuth1Error
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', tokenFromOAuth1Error: TokenFromOAuth1Error) -> None: ...
    
    
class TokenFromOAuth1Result:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getOauth2Token(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class TokenScopeError:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getRequiredScope(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.auth.TokenScopeError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
