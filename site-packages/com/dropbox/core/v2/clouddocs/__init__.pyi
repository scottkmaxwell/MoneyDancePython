import typing
import com.dropbox.core.v2
import java.lang


class CloudDocsAccessError(java.lang.Enum):
    INVALID_DOC_ID = 'INVALID_DOC_ID'
    NOT_FOUND = 'NOT_FOUND'
    OTHER = 'OTHER'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'CloudDocsAccessError': ...
    
    @staticmethod
    def values() -> typing.List['CloudDocsAccessError']: ...
    
    
class CloudDocsAccessErrorException('com.dropbox.core.DbxApiException'):
    errorValue: CloudDocsAccessError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', cloudDocsAccessError: CloudDocsAccessError) -> None: ...
    
    
class Content:
    def __init__(self, contentPurpose: 'ContentPurpose', s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getContentKey(self) -> str: ...
    
    def getPurpose(self) -> 'ContentPurpose': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ContentPurpose(java.lang.Enum):
    OTHER = 'OTHER'
    PREVIEW = 'PREVIEW'
    SEARCH = 'SEARCH'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ContentPurpose': ...
    
    @staticmethod
    def values() -> typing.List['ContentPurpose']: ...
    
    
class DbxUserCloudDocsRequests:
    def __init__(self, c: com.dropbox.core.v2.DbxRawClientV2) -> None: ...
    
    def getContent(self, s: str) -> typing.Any: ...
    
    def getContentBuilder(self, s: str) -> 'GetContentBuilder': ...
    
    def getMetadata(self) -> 'GetMetadataResult': ...
    
    def lock(self) -> 'LockResult': ...
    
    def rename(self) -> 'RenameResult': ...
    
    def renameBuilder(self) -> 'RenameBuilder': ...
    
    def unlock(self) -> 'UnlockResult': ...
    
    def updateContent(self, s: str, t: typing.List[str]) -> 'UpdateContentUploader': ...
    
    
class GenericErrorTag(java.lang.Enum):
    DOC_NOT_FOUND = 'DOC_NOT_FOUND'
    INVALID_ARGUMENT = 'INVALID_ARGUMENT'
    OTHER = 'OTHER'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    UNAUTHENTICATED = 'UNAUTHENTICATED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GenericErrorTag': ...
    
    @staticmethod
    def values() -> typing.List['GenericErrorTag']: ...
    
    
class GetContentBuilder(com.dropbox.core.v2.DbxDownloadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> typing.Any: ...
    
    
class GetMetadataError:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getGetMetadataErrorTag(self) -> 'GetMetadataErrorTagUnion': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GetMetadataErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GetMetadataError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', getMetadataError: GetMetadataError) -> None: ...
    
    
class GetMetadataErrorTagUnion:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def genericError(genericErrorTag: GenericErrorTag) -> 'GetMetadataErrorTagUnion': ...
    
    def getGenericErrorValue(self) -> GenericErrorTag: ...
    
    def hashCode(self) -> int: ...
    
    def isGenericError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        GENERIC_ERROR = 'GENERIC_ERROR'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GetMetadataResult:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFileId(self) -> str: ...
    
    def getIsDeleted(self) -> bool: ...
    
    def getMimeType(self) -> str: ...
    
    def getProviderVersion(self) -> str: ...
    
    def getTitle(self) -> str: ...
    
    def getUser(self) -> 'UserInfo': ...
    
    def getUserPermissions(self) -> 'UserPermissions': ...
    
    def getVersion(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'GetMetadataResult': ...
        
        def withFileId(self, s: str) -> str: ...
        
        def withIsDeleted(self, b: bool) -> str: ...
        
        def withMimeType(self, s: str) -> str: ...
        
        def withProviderVersion(self, s: str) -> str: ...
        
        def withTitle(self, s: str) -> str: ...
        
        def withUser(self, userInfo: 'UserInfo') -> str: ...
        
        def withUserPermissions(self, userPermissions: 'UserPermissions') -> str: ...
        
        def withVersion(self, s: str) -> str: ...
        
        
    
class LockResult:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getExpiresAt(self) -> int: ...
    
    def getFileId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'LockResult': ...
        
        def withExpiresAt(self, i: int) -> str: ...
        
        def withFileId(self, s: str) -> str: ...
        
        
    
class LockingError:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLockingErrorTag(self) -> 'LockingErrorTagUnion': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class LockingErrorException('com.dropbox.core.DbxApiException'):
    errorValue: LockingError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', lockingError: LockingError) -> None: ...
    
    
class LockingErrorTag(java.lang.Enum):
    CONFLICT = 'CONFLICT'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LockingErrorTag': ...
    
    @staticmethod
    def values() -> typing.List['LockingErrorTag']: ...
    
    
class LockingErrorTagUnion:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def genericError(genericErrorTag: GenericErrorTag) -> 'LockingErrorTagUnion': ...
    
    def getGenericErrorValue(self) -> GenericErrorTag: ...
    
    def getLockingErrorValue(self) -> LockingErrorTag: ...
    
    def hashCode(self) -> int: ...
    
    def isGenericError(self) -> bool: ...
    
    def isLockingError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    @staticmethod
    def lockingError(lockingErrorTag: LockingErrorTag) -> 'LockingErrorTagUnion': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        GENERIC_ERROR = 'GENERIC_ERROR'
        LOCKING_ERROR = 'LOCKING_ERROR'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RenameBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'RenameResult': ...
    
    def withFileId(self, s: str) -> 'RenameBuilder': ...
    
    def withTitle(self, s: str) -> 'RenameBuilder': ...
    
    
class RenameError:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getRenameErrorTag(self) -> 'RenameErrorTagUnion': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class RenameErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RenameError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', renameError: RenameError) -> None: ...
    
    
class RenameErrorTag(java.lang.Enum):
    INVALID_TITLE = 'INVALID_TITLE'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'RenameErrorTag': ...
    
    @staticmethod
    def values() -> typing.List['RenameErrorTag']: ...
    
    
class RenameErrorTagUnion:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def genericError(genericErrorTag: GenericErrorTag) -> 'RenameErrorTagUnion': ...
    
    def getGenericErrorValue(self) -> GenericErrorTag: ...
    
    def getLockingErrorValue(self) -> LockingErrorTag: ...
    
    def getRenameErrorValue(self) -> RenameErrorTag: ...
    
    def hashCode(self) -> int: ...
    
    def isGenericError(self) -> bool: ...
    
    def isLockingError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isRenameError(self) -> bool: ...
    
    @staticmethod
    def lockingError(lockingErrorTag: LockingErrorTag) -> 'RenameErrorTagUnion': ...
    
    @staticmethod
    def renameError(renameErrorTag: RenameErrorTag) -> 'RenameErrorTagUnion': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        GENERIC_ERROR = 'GENERIC_ERROR'
        LOCKING_ERROR = 'LOCKING_ERROR'
        OTHER = 'OTHER'
        RENAME_ERROR = 'RENAME_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RenameResult:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getTitle(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UnlockResult:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UpdateContentError(java.lang.Enum):
    CONFLICT = 'CONFLICT'
    INVALID_DOC_ID = 'INVALID_DOC_ID'
    NOT_FOUND = 'NOT_FOUND'
    OTHER = 'OTHER'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    UNLOCKED = 'UNLOCKED'
    UPLOAD_SIZE_TOO_LARGE = 'UPLOAD_SIZE_TOO_LARGE'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'UpdateContentError': ...
    
    @staticmethod
    def values() -> typing.List['UpdateContentError']: ...
    
    
class UpdateContentErrorException('com.dropbox.core.DbxApiException'):
    errorValue: UpdateContentError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', updateContentError: UpdateContentError) -> None: ...
    
    
class UpdateContentResult:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getVersion(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UpdateContentUploader('com.dropbox.core.DbxUploader'):
    def __init__(self, s: str, s2: str) -> None: ...
    
    
class UserInfo:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEmail(self) -> str: ...
    
    def getId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'UserInfo': ...
        
        def withEmail(self, s: str) -> str: ...
        
        def withId(self, s: str) -> str: ...
        
        
    
class UserPermissions:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCanComment(self) -> bool: ...
    
    def getCanDownload(self) -> bool: ...
    
    def getCanEdit(self) -> bool: ...
    
    def getCanRename(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'UserPermissions': ...
        
        def withCanComment(self, b: bool) -> str: ...
        
        def withCanDownload(self, b: bool) -> str: ...
        
        def withCanEdit(self, b: bool) -> str: ...
        
        def withCanRename(self, b: bool) -> str: ...
        
        
    
