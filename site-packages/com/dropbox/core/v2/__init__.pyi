import typing
import account
import auth
import check
import clouddocs
import common
import contacts
import fileproperties
import filerequests
import files
import java.io
import paper
import sharing
import team
import teamlog
import users

R = typing.TypeVar("R")


class DbxAppClientV2Base:
    def __init__(self) -> None: ...
    
    def auth(self) -> auth.DbxAppAuthRequests: ...
    
    def check(self) -> check.DbxAppCheckRequests: ...
    
    def files(self) -> files.DbxAppFilesRequests: ...
    
    
class DbxAppClientV2(DbxAppClientV2Base):
    def __init__(self, c: 'com.dropbox.core.DbxRequestConfig', s: str, s2: str) -> None: ...
    
    
class DbxClientV2Base:
    def __init__(self) -> None: ...
    
    def account(self) -> account.DbxUserAccountRequests: ...
    
    def auth(self) -> auth.DbxUserAuthRequests: ...
    
    def check(self) -> check.DbxUserCheckRequests: ...
    
    def cloudDocs(self) -> clouddocs.DbxUserCloudDocsRequests: ...
    
    def contacts(self) -> contacts.DbxUserContactsRequests: ...
    
    def fileProperties(self) -> fileproperties.DbxUserFilePropertiesRequests: ...
    
    def fileRequests(self) -> filerequests.DbxUserFileRequestsRequests: ...
    
    def files(self) -> files.DbxUserFilesRequests: ...
    
    def paper(self) -> paper.DbxUserPaperRequests: ...
    
    def sharing(self) -> sharing.DbxUserSharingRequests: ...
    
    def users(self) -> users.DbxUserUsersRequests: ...
    
    
class DbxClientV2(DbxClientV2Base):
    def __init__(self, c: 'com.dropbox.core.DbxRequestConfig', s: str) -> None: ...
    
    def refreshAccessToken(self) -> 'com.dropbox.core.oauth.DbxRefreshResult': ...
    
    def withPathRoot(self, c: common.PathRoot) -> 'DbxClientV2': ...
    
    
class DbxDownloadStyleBuilder:
    def __init__(self) -> None: ...
    
    def download(self, j: java.io.OutputStream) -> 'R': ...
    
    def range(self, i: int) -> typing.Any: ...
    
    def start(self) -> typing.Any: ...
    
    
class DbxPathV2:
    def __init__(self) -> None: ...
    
    @staticmethod
    def findError(s: str) -> str: ...
    
    @staticmethod
    def getName(s: str) -> str: ...
    
    @staticmethod
    def getParent(s: str) -> str: ...
    
    @staticmethod
    def isValid(s: str) -> bool: ...
    
    @staticmethod
    def split(s: str) -> typing.List[str]: ...
    
    
class DbxRawClientV2:
    USER_AGENT_ID = u'OfficialDropboxJavaSDKv2'
    
    def __init__(self) -> None: ...
    
    def downloadStyle(self, s: str, s2: str, argT: 'ArgT', b: bool, t: typing.List[str], t2: typing.Any, t3: typing.Any, t4: typing.Any) -> typing.Any: ...
    
    def getHost(self) -> 'com.dropbox.core.DbxHost': ...
    
    def getRequestConfig(self) -> 'com.dropbox.core.DbxRequestConfig': ...
    
    def getUserId(self) -> str: ...
    
    def refreshAccessToken(self) -> 'com.dropbox.core.oauth.DbxRefreshResult': ...
    
    def rpcStyle(self, s: str, s2: str, argT: 'ArgT', b: bool, t: typing.Any, t2: typing.Any, t3: typing.Any) -> 'ResT': ...
    
    def uploadStyle(self, s: str, s2: str, argT: 'ArgT', b: bool, t: typing.Any) -> str: ...
    
    
class DbxTeamClientV2Base:
    def __init__(self) -> None: ...
    
    def fileProperties(self) -> fileproperties.DbxTeamFilePropertiesRequests: ...
    
    def team(self) -> team.DbxTeamTeamRequests: ...
    
    def teamLog(self) -> teamlog.DbxTeamTeamLogRequests: ...
    
    
class DbxTeamClientV2(DbxTeamClientV2Base):
    def __init__(self, c: 'com.dropbox.core.DbxRequestConfig', s: str) -> None: ...
    
    def asAdmin(self, s: str) -> DbxClientV2: ...
    
    def asMember(self, s: str) -> DbxClientV2: ...
    
    def refreshAccessToken(self) -> 'com.dropbox.core.oauth.DbxRefreshResult': ...
    
    
class DbxUploadStyleBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> typing.Any: ...
    
    def uploadAndFinish(self, j: java.io.InputStream) -> 'R': ...
    
    
