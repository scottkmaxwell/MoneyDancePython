import typing
import java.lang
import java.util


class GroupManagementType(java.lang.Enum):
    COMPANY_MANAGED = 'COMPANY_MANAGED'
    OTHER = 'OTHER'
    SYSTEM_MANAGED = 'SYSTEM_MANAGED'
    USER_MANAGED = 'USER_MANAGED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GroupManagementType': ...
    
    @staticmethod
    def values() -> typing.List['GroupManagementType']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.teamcommon.GroupManagementType.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class GroupSummary:
    def __init__(self, s: str, s2: str, groupManagementType: GroupManagementType) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getGroupExternalId(self) -> str: ...
    
    def getGroupId(self) -> str: ...
    
    def getGroupManagementType(self) -> GroupManagementType: ...
    
    def getGroupName(self) -> str: ...
    
    def getMemberCount(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str, s2: str, groupManagementType: GroupManagementType) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'GroupSummary': ...
        
        def withGroupExternalId(self, s: str) -> str: ...
        
        def withMemberCount(self, i: int) -> str: ...
        
        
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.teamcommon.GroupSummary.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class GroupType(java.lang.Enum):
    OTHER = 'OTHER'
    TEAM = 'TEAM'
    USER_MANAGED = 'USER_MANAGED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GroupType': ...
    
    @staticmethod
    def values() -> typing.List['GroupType']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.teamcommon.GroupType.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class MemberSpaceLimitType(java.lang.Enum):
    ALERT_ONLY = 'ALERT_ONLY'
    OFF = 'OFF'
    OTHER = 'OTHER'
    STOP_SYNC = 'STOP_SYNC'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MemberSpaceLimitType': ...
    
    @staticmethod
    def values() -> typing.List['MemberSpaceLimitType']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.teamcommon.MemberSpaceLimitType.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class TimeRange:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEndTime(self) -> java.util.Date: ...
    
    def getStartTime(self) -> java.util.Date: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'TimeRange': ...
        
        def withEndTime(self, j: java.util.Date) -> str: ...
        
        def withStartTime(self, j: java.util.Date) -> str: ...
        
        
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.teamcommon.TimeRange.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
