import typing
import com.dropbox.core.v2
import java.lang


class DbxUserOpenidRequests:
    def __init__(self, c: com.dropbox.core.v2.DbxRawClientV2) -> None: ...
    
    def userinfo(self) -> 'UserInfoResult': ...
    
    
class OpenIdError(java.lang.Enum):
    INCORRECT_OPENID_SCOPES = 'INCORRECT_OPENID_SCOPES'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'OpenIdError': ...
    
    @staticmethod
    def values() -> typing.List['OpenIdError']: ...
    
    
class UserInfoError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getOpenidErrorValue(self) -> OpenIdError: ...
    
    def hashCode(self) -> int: ...
    
    def isOpenidError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    @staticmethod
    def openidError(openIdError: OpenIdError) -> 'UserInfoError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OPENID_ERROR = 'OPENID_ERROR'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UserInfoErrorException('com.dropbox.core.DbxApiException'):
    errorValue: UserInfoError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', userInfoError: UserInfoError) -> None: ...
    
    
class UserInfoResult:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEmail(self) -> str: ...
    
    def getEmailVerified(self) -> bool: ...
    
    def getFamilyName(self) -> str: ...
    
    def getGivenName(self) -> str: ...
    
    def getIss(self) -> str: ...
    
    def getSub(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'UserInfoResult': ...
        
        def withEmail(self, s: str) -> str: ...
        
        def withEmailVerified(self, b: bool) -> str: ...
        
        def withFamilyName(self, s: str) -> str: ...
        
        def withGivenName(self, s: str) -> str: ...
        
        def withIss(self, s: str) -> str: ...
        
        def withSub(self, s: str) -> str: ...
        
        
    
