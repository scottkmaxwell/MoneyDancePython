import typing
import com.dropbox.core.v2
import com.dropbox.core.v2.sharing
import java.lang
import java.util


class AddMember:
    def __init__(self, c: com.dropbox.core.v2.sharing.MemberSelector) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMember(self) -> com.dropbox.core.v2.sharing.MemberSelector: ...
    
    def getPermissionLevel(self) -> 'PaperDocPermissionLevel': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class AddPaperDocUserMemberResult:
    def __init__(self, c: com.dropbox.core.v2.sharing.MemberSelector, addPaperDocUserResult: 'AddPaperDocUserResult') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMember(self) -> com.dropbox.core.v2.sharing.MemberSelector: ...
    
    def getResult(self) -> 'AddPaperDocUserResult': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class AddPaperDocUserResult(java.lang.Enum):
    DAILY_LIMIT_REACHED = 'DAILY_LIMIT_REACHED'
    FAILED_USER_DATA_RETRIEVAL = 'FAILED_USER_DATA_RETRIEVAL'
    OTHER = 'OTHER'
    PERMISSION_ALREADY_GRANTED = 'PERMISSION_ALREADY_GRANTED'
    SHARING_OUTSIDE_TEAM_DISABLED = 'SHARING_OUTSIDE_TEAM_DISABLED'
    SUCCESS = 'SUCCESS'
    UNKNOWN_ERROR = 'UNKNOWN_ERROR'
    USER_IS_OWNER = 'USER_IS_OWNER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'AddPaperDocUserResult': ...
    
    @staticmethod
    def values() -> typing.List['AddPaperDocUserResult']: ...
    
    
class Cursor:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getExpiration(self) -> java.util.Date: ...
    
    def getValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class DbxUserPaperRequests:
    def __init__(self, c: com.dropbox.core.v2.DbxRawClientV2) -> None: ...
    
    def docsArchive(self, s: str) -> None: ...
    
    def docsCreate(self, importFormat: 'ImportFormat') -> 'DocsCreateUploader': ...
    
    def docsDownload(self, s: str, exportFormat: 'ExportFormat') -> typing.Any: ...
    
    def docsDownloadBuilder(self, s: str, exportFormat: 'ExportFormat') -> 'DocsDownloadBuilder': ...
    
    def docsFolderUsersList(self, s: str) -> 'ListUsersOnFolderResponse': ...
    
    def docsFolderUsersListContinue(self, s: str, s2: str) -> 'ListUsersOnFolderResponse': ...
    
    def docsGetFolderInfo(self, s: str) -> 'FoldersContainingPaperDoc': ...
    
    def docsList(self) -> 'ListPaperDocsResponse': ...
    
    def docsListBuilder(self) -> 'DocsListBuilder': ...
    
    def docsListContinue(self, s: str) -> 'ListPaperDocsResponse': ...
    
    def docsPermanentlyDelete(self, s: str) -> None: ...
    
    def docsSharingPolicyGet(self, s: str) -> 'SharingPolicy': ...
    
    def docsSharingPolicySet(self, s: str, sharingPolicy: 'SharingPolicy') -> None: ...
    
    def docsUpdate(self, s: str, paperDocUpdatePolicy: 'PaperDocUpdatePolicy', i: int, importFormat: 'ImportFormat') -> 'DocsUpdateUploader': ...
    
    def docsUsersAdd(self, s: str, t: typing.List[AddMember]) -> typing.List[AddPaperDocUserMemberResult]: ...
    
    def docsUsersAddBuilder(self, s: str, t: typing.List[AddMember]) -> 'DocsUsersAddBuilder': ...
    
    def docsUsersList(self, s: str) -> 'ListUsersOnPaperDocResponse': ...
    
    def docsUsersListBuilder(self, s: str) -> 'DocsUsersListBuilder': ...
    
    def docsUsersListContinue(self, s: str, s2: str) -> 'ListUsersOnPaperDocResponse': ...
    
    def docsUsersRemove(self, s: str, c: com.dropbox.core.v2.sharing.MemberSelector) -> None: ...
    
    def foldersCreate(self, s: str) -> 'PaperFolderCreateResult': ...
    
    def foldersCreateBuilder(self, s: str) -> 'FoldersCreateBuilder': ...
    
    
class DocLookupError(java.lang.Enum):
    DOC_NOT_FOUND = 'DOC_NOT_FOUND'
    INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'DocLookupError': ...
    
    @staticmethod
    def values() -> typing.List['DocLookupError']: ...
    
    
class DocLookupErrorException('com.dropbox.core.DbxApiException'):
    errorValue: DocLookupError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', docLookupError: DocLookupError) -> None: ...
    
    
class DocsCreateUploader('com.dropbox.core.DbxUploader'):
    def __init__(self, s: str, s2: str) -> None: ...
    
    
class DocsDownloadBuilder(com.dropbox.core.v2.DbxDownloadStyleBuilder):
    def __init__(self) -> None: ...
    
    def start(self) -> typing.Any: ...
    
    
class DocsListBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'ListPaperDocsResponse': ...
    
    def withFilterBy(self, listPaperDocsFilterBy: 'ListPaperDocsFilterBy') -> 'DocsListBuilder': ...
    
    def withLimit(self, i: int) -> 'DocsListBuilder': ...
    
    def withSortBy(self, listPaperDocsSortBy: 'ListPaperDocsSortBy') -> 'DocsListBuilder': ...
    
    def withSortOrder(self, listPaperDocsSortOrder: 'ListPaperDocsSortOrder') -> 'DocsListBuilder': ...
    
    
class DocsUpdateUploader('com.dropbox.core.DbxUploader'):
    def __init__(self, s: str, s2: str) -> None: ...
    
    
class DocsUsersAddBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> typing.List[AddPaperDocUserMemberResult]: ...
    
    def withCustomMessage(self, s: str) -> 'DocsUsersAddBuilder': ...
    
    def withQuiet(self, b: bool) -> 'DocsUsersAddBuilder': ...
    
    
class DocsUsersListBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'ListUsersOnPaperDocResponse': ...
    
    def withFilterBy(self, userOnPaperDocFilter: 'UserOnPaperDocFilter') -> 'DocsUsersListBuilder': ...
    
    def withLimit(self, i: int) -> 'DocsUsersListBuilder': ...
    
    
class ExportFormat(java.lang.Enum):
    HTML = 'HTML'
    MARKDOWN = 'MARKDOWN'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ExportFormat': ...
    
    @staticmethod
    def values() -> typing.List['ExportFormat']: ...
    
    
class Folder:
    def __init__(self, s: str, s2: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getId(self) -> str: ...
    
    def getName(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class FolderSharingPolicyType(java.lang.Enum):
    INVITE_ONLY = 'INVITE_ONLY'
    TEAM = 'TEAM'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'FolderSharingPolicyType': ...
    
    @staticmethod
    def values() -> typing.List['FolderSharingPolicyType']: ...
    
    
class FoldersContainingPaperDoc:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFolderSharingPolicyType(self) -> FolderSharingPolicyType: ...
    
    def getFolders(self) -> typing.List[Folder]: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'FoldersContainingPaperDoc': ...
        
        def withFolderSharingPolicyType(self, folderSharingPolicyType: FolderSharingPolicyType) -> str: ...
        
        def withFolders(self, t: typing.List[Folder]) -> str: ...
        
        
    
class FoldersCreateBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'PaperFolderCreateResult': ...
    
    def withIsTeamFolder(self, b: bool) -> 'FoldersCreateBuilder': ...
    
    def withParentFolderId(self, s: str) -> 'FoldersCreateBuilder': ...
    
    
class ImportFormat(java.lang.Enum):
    HTML = 'HTML'
    MARKDOWN = 'MARKDOWN'
    OTHER = 'OTHER'
    PLAIN_TEXT = 'PLAIN_TEXT'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ImportFormat': ...
    
    @staticmethod
    def values() -> typing.List['ImportFormat']: ...
    
    
class InviteeInfoWithPermissionLevel:
    def __init__(self, c: com.dropbox.core.v2.sharing.InviteeInfo, paperDocPermissionLevel: 'PaperDocPermissionLevel') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getInvitee(self) -> com.dropbox.core.v2.sharing.InviteeInfo: ...
    
    def getPermissionLevel(self) -> 'PaperDocPermissionLevel': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListDocsCursorError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def cursorError(paperApiCursorError: 'PaperApiCursorError') -> 'ListDocsCursorError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursorErrorValue(self) -> 'PaperApiCursorError': ...
    
    def hashCode(self) -> int: ...
    
    def isCursorError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        CURSOR_ERROR = 'CURSOR_ERROR'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ListDocsCursorErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListDocsCursorError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listDocsCursorError: ListDocsCursorError) -> None: ...
    
    
class ListPaperDocsFilterBy(java.lang.Enum):
    DOCS_ACCESSED = 'DOCS_ACCESSED'
    DOCS_CREATED = 'DOCS_CREATED'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ListPaperDocsFilterBy': ...
    
    @staticmethod
    def values() -> typing.List['ListPaperDocsFilterBy']: ...
    
    
class ListPaperDocsResponse:
    def __init__(self, t: typing.List[str], cursor: Cursor, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> Cursor: ...
    
    def getDocIds(self) -> typing.List[str]: ...
    
    def getHasMore(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListPaperDocsSortBy(java.lang.Enum):
    ACCESSED = 'ACCESSED'
    CREATED = 'CREATED'
    MODIFIED = 'MODIFIED'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ListPaperDocsSortBy': ...
    
    @staticmethod
    def values() -> typing.List['ListPaperDocsSortBy']: ...
    
    
class ListPaperDocsSortOrder(java.lang.Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ListPaperDocsSortOrder': ...
    
    @staticmethod
    def values() -> typing.List['ListPaperDocsSortOrder']: ...
    
    
class ListUsersCursorError:
    DOC_NOT_FOUND = '"doc_not_found"'
    INSUFFICIENT_PERMISSIONS = '"insufficient_permissions"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def cursorError(paperApiCursorError: 'PaperApiCursorError') -> 'ListUsersCursorError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursorErrorValue(self) -> 'PaperApiCursorError': ...
    
    def hashCode(self) -> int: ...
    
    def isCursorError(self) -> bool: ...
    
    def isDocNotFound(self) -> bool: ...
    
    def isInsufficientPermissions(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        CURSOR_ERROR = 'CURSOR_ERROR'
        DOC_NOT_FOUND = 'DOC_NOT_FOUND'
        INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ListUsersCursorErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListUsersCursorError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listUsersCursorError: ListUsersCursorError) -> None: ...
    
    
class ListUsersOnFolderResponse:
    def __init__(self, t: typing.List[com.dropbox.core.v2.sharing.InviteeInfo], t2: typing.List[com.dropbox.core.v2.sharing.UserInfo], cursor: Cursor, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> Cursor: ...
    
    def getHasMore(self) -> bool: ...
    
    def getInvitees(self) -> typing.List[com.dropbox.core.v2.sharing.InviteeInfo]: ...
    
    def getUsers(self) -> typing.List[com.dropbox.core.v2.sharing.UserInfo]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListUsersOnPaperDocResponse:
    def __init__(self, t: typing.List[InviteeInfoWithPermissionLevel], t2: typing.List['UserInfoWithPermissionLevel'], c: com.dropbox.core.v2.sharing.UserInfo, cursor: Cursor, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> Cursor: ...
    
    def getDocOwner(self) -> com.dropbox.core.v2.sharing.UserInfo: ...
    
    def getHasMore(self) -> bool: ...
    
    def getInvitees(self) -> typing.List[InviteeInfoWithPermissionLevel]: ...
    
    def getUsers(self) -> typing.List['UserInfoWithPermissionLevel']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class PaperApiCursorError(java.lang.Enum):
    EXPIRED_CURSOR = 'EXPIRED_CURSOR'
    INVALID_CURSOR = 'INVALID_CURSOR'
    OTHER = 'OTHER'
    RESET = 'RESET'
    WRONG_USER_IN_CURSOR = 'WRONG_USER_IN_CURSOR'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'PaperApiCursorError': ...
    
    @staticmethod
    def values() -> typing.List['PaperApiCursorError']: ...
    
    
class PaperDocCreateError(java.lang.Enum):
    CONTENT_MALFORMED = 'CONTENT_MALFORMED'
    DOC_LENGTH_EXCEEDED = 'DOC_LENGTH_EXCEEDED'
    FOLDER_NOT_FOUND = 'FOLDER_NOT_FOUND'
    IMAGE_SIZE_EXCEEDED = 'IMAGE_SIZE_EXCEEDED'
    INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'PaperDocCreateError': ...
    
    @staticmethod
    def values() -> typing.List['PaperDocCreateError']: ...
    
    
class PaperDocCreateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: PaperDocCreateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', paperDocCreateError: PaperDocCreateError) -> None: ...
    
    
class PaperDocCreateUpdateResult:
    def __init__(self, s: str, i: int, s2: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDocId(self) -> str: ...
    
    def getRevision(self) -> int: ...
    
    def getTitle(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class PaperDocExportResult:
    def __init__(self, s: str, s2: str, i: int, s3: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMimeType(self) -> str: ...
    
    def getOwner(self) -> str: ...
    
    def getRevision(self) -> int: ...
    
    def getTitle(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class PaperDocPermissionLevel(java.lang.Enum):
    EDIT = 'EDIT'
    OTHER = 'OTHER'
    VIEW_AND_COMMENT = 'VIEW_AND_COMMENT'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'PaperDocPermissionLevel': ...
    
    @staticmethod
    def values() -> typing.List['PaperDocPermissionLevel']: ...
    
    
class PaperDocUpdateError(java.lang.Enum):
    CONTENT_MALFORMED = 'CONTENT_MALFORMED'
    DOC_ARCHIVED = 'DOC_ARCHIVED'
    DOC_DELETED = 'DOC_DELETED'
    DOC_LENGTH_EXCEEDED = 'DOC_LENGTH_EXCEEDED'
    DOC_NOT_FOUND = 'DOC_NOT_FOUND'
    IMAGE_SIZE_EXCEEDED = 'IMAGE_SIZE_EXCEEDED'
    INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'
    OTHER = 'OTHER'
    REVISION_MISMATCH = 'REVISION_MISMATCH'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'PaperDocUpdateError': ...
    
    @staticmethod
    def values() -> typing.List['PaperDocUpdateError']: ...
    
    
class PaperDocUpdateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: PaperDocUpdateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', paperDocUpdateError: PaperDocUpdateError) -> None: ...
    
    
class PaperDocUpdatePolicy(java.lang.Enum):
    APPEND = 'APPEND'
    OTHER = 'OTHER'
    OVERWRITE_ALL = 'OVERWRITE_ALL'
    PREPEND = 'PREPEND'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'PaperDocUpdatePolicy': ...
    
    @staticmethod
    def values() -> typing.List['PaperDocUpdatePolicy']: ...
    
    
class PaperFolderCreateError(java.lang.Enum):
    FOLDER_NOT_FOUND = 'FOLDER_NOT_FOUND'
    INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'
    INVALID_FOLDER_ID = 'INVALID_FOLDER_ID'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'PaperFolderCreateError': ...
    
    @staticmethod
    def values() -> typing.List['PaperFolderCreateError']: ...
    
    
class PaperFolderCreateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: PaperFolderCreateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', paperFolderCreateError: PaperFolderCreateError) -> None: ...
    
    
class PaperFolderCreateResult:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFolderId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class SharingPolicy:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPublicSharingPolicy(self) -> 'SharingPublicPolicyType': ...
    
    def getTeamSharingPolicy(self) -> 'SharingTeamPolicyType': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'SharingPolicy': ...
        
        def withPublicSharingPolicy(self, sharingPublicPolicyType: 'SharingPublicPolicyType') -> str: ...
        
        def withTeamSharingPolicy(self, sharingTeamPolicyType: 'SharingTeamPolicyType') -> str: ...
        
        
    
class SharingPublicPolicyType(java.lang.Enum):
    DISABLED = 'DISABLED'
    INVITE_ONLY = 'INVITE_ONLY'
    PEOPLE_WITH_LINK_CAN_EDIT = 'PEOPLE_WITH_LINK_CAN_EDIT'
    PEOPLE_WITH_LINK_CAN_VIEW_AND_COMMENT = 'PEOPLE_WITH_LINK_CAN_VIEW_AND_COMMENT'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SharingPublicPolicyType': ...
    
    @staticmethod
    def values() -> typing.List['SharingPublicPolicyType']: ...
    
    
class SharingTeamPolicyType(java.lang.Enum):
    INVITE_ONLY = 'INVITE_ONLY'
    PEOPLE_WITH_LINK_CAN_EDIT = 'PEOPLE_WITH_LINK_CAN_EDIT'
    PEOPLE_WITH_LINK_CAN_VIEW_AND_COMMENT = 'PEOPLE_WITH_LINK_CAN_VIEW_AND_COMMENT'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SharingTeamPolicyType': ...
    
    @staticmethod
    def values() -> typing.List['SharingTeamPolicyType']: ...
    
    
class UserInfoWithPermissionLevel:
    def __init__(self, c: com.dropbox.core.v2.sharing.UserInfo, paperDocPermissionLevel: PaperDocPermissionLevel) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPermissionLevel(self) -> PaperDocPermissionLevel: ...
    
    def getUser(self) -> com.dropbox.core.v2.sharing.UserInfo: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UserOnPaperDocFilter(java.lang.Enum):
    OTHER = 'OTHER'
    SHARED = 'SHARED'
    VISITED = 'VISITED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'UserOnPaperDocFilter': ...
    
    @staticmethod
    def values() -> typing.List['UserOnPaperDocFilter']: ...
    
    
