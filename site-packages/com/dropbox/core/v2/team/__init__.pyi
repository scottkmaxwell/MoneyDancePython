import typing
import com.dropbox.core.v2
import com.dropbox.core.v2.account
import com.dropbox.core.v2.async
import com.dropbox.core.v2.fileproperties
import com.dropbox.core.v2.files
import com.dropbox.core.v2.secondaryemails
import com.dropbox.core.v2.teamcommon
import com.dropbox.core.v2.teampolicies
import com.dropbox.core.v2.users
import java.lang
import java.util


class DeviceSession:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCountry(self) -> str: ...
    
    def getCreated(self) -> java.util.Date: ...
    
    def getIpAddress(self) -> str: ...
    
    def getSessionId(self) -> str: ...
    
    def getUpdated(self) -> java.util.Date: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'DeviceSession': ...
        
        def withCountry(self, s: str) -> str: ...
        
        def withCreated(self, j: java.util.Date) -> str: ...
        
        def withIpAddress(self, s: str) -> str: ...
        
        def withUpdated(self, j: java.util.Date) -> str: ...
        
        
    
class ActiveWebSession(DeviceSession):
    def __init__(self, s: str, s2: str, s3: str, s4: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getBrowser(self) -> str: ...
    
    def getCountry(self) -> str: ...
    
    def getCreated(self) -> java.util.Date: ...
    
    def getExpires(self) -> java.util.Date: ...
    
    def getIpAddress(self) -> str: ...
    
    def getOs(self) -> str: ...
    
    def getSessionId(self) -> str: ...
    
    def getUpdated(self) -> java.util.Date: ...
    
    def getUserAgent(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> DeviceSession: ...
        
        def withCountry(self, s: str) -> str: ...
        
        def withCreated(self, j: java.util.Date) -> str: ...
        
        def withExpires(self, j: java.util.Date) -> str: ...
        
        def withIpAddress(self, s: str) -> str: ...
        
        def withUpdated(self, j: java.util.Date) -> str: ...
        
        
    
class AddSecondaryEmailResult:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def alreadyOwnedByUser(s: str) -> 'AddSecondaryEmailResult': ...
    
    @staticmethod
    def alreadyPending(s: str) -> 'AddSecondaryEmailResult': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAlreadyOwnedByUserValue(self) -> str: ...
    
    def getAlreadyPendingValue(self) -> str: ...
    
    def getRateLimitedValue(self) -> str: ...
    
    def getReachedLimitValue(self) -> str: ...
    
    def getSuccessValue(self) -> com.dropbox.core.v2.secondaryemails.SecondaryEmail: ...
    
    def getTooManyUpdatesValue(self) -> str: ...
    
    def getTransientErrorValue(self) -> str: ...
    
    def getUnavailableValue(self) -> str: ...
    
    def getUnknownErrorValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isAlreadyOwnedByUser(self) -> bool: ...
    
    def isAlreadyPending(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isRateLimited(self) -> bool: ...
    
    def isReachedLimit(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    def isTooManyUpdates(self) -> bool: ...
    
    def isTransientError(self) -> bool: ...
    
    def isUnavailable(self) -> bool: ...
    
    def isUnknownError(self) -> bool: ...
    
    @staticmethod
    def rateLimited(s: str) -> 'AddSecondaryEmailResult': ...
    
    @staticmethod
    def reachedLimit(s: str) -> 'AddSecondaryEmailResult': ...
    
    @staticmethod
    def success(c: com.dropbox.core.v2.secondaryemails.SecondaryEmail) -> 'AddSecondaryEmailResult': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def tooManyUpdates(s: str) -> 'AddSecondaryEmailResult': ...
    
    @staticmethod
    def transientError(s: str) -> 'AddSecondaryEmailResult': ...
    
    @staticmethod
    def unavailable(s: str) -> 'AddSecondaryEmailResult': ...
    
    @staticmethod
    def unknownError(s: str) -> 'AddSecondaryEmailResult': ...
    
    
    class Tag:
        ALREADY_OWNED_BY_USER = 'ALREADY_OWNED_BY_USER'
        ALREADY_PENDING = 'ALREADY_PENDING'
        OTHER = 'OTHER'
        RATE_LIMITED = 'RATE_LIMITED'
        REACHED_LIMIT = 'REACHED_LIMIT'
        SUCCESS = 'SUCCESS'
        TOO_MANY_UPDATES = 'TOO_MANY_UPDATES'
        TRANSIENT_ERROR = 'TRANSIENT_ERROR'
        UNAVAILABLE = 'UNAVAILABLE'
        UNKNOWN_ERROR = 'UNKNOWN_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class AddSecondaryEmailsError(java.lang.Enum):
    OTHER = 'OTHER'
    SECONDARY_EMAILS_DISABLED = 'SECONDARY_EMAILS_DISABLED'
    TOO_MANY_EMAILS = 'TOO_MANY_EMAILS'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'AddSecondaryEmailsError': ...
    
    @staticmethod
    def values() -> typing.List['AddSecondaryEmailsError']: ...
    
    
class AddSecondaryEmailsErrorException('com.dropbox.core.DbxApiException'):
    errorValue: AddSecondaryEmailsError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', addSecondaryEmailsError: AddSecondaryEmailsError) -> None: ...
    
    
class AddSecondaryEmailsResult:
    def __init__(self, t: typing.List['UserAddResult']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getResults(self) -> typing.List['UserAddResult']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class AdminTier(java.lang.Enum):
    MEMBER_ONLY = 'MEMBER_ONLY'
    SUPPORT_ADMIN = 'SUPPORT_ADMIN'
    TEAM_ADMIN = 'TEAM_ADMIN'
    USER_MANAGEMENT_ADMIN = 'USER_MANAGEMENT_ADMIN'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'AdminTier': ...
    
    @staticmethod
    def values() -> typing.List['AdminTier']: ...
    
    
class ApiApp:
    def __init__(self, s: str, s2: str, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAppId(self) -> str: ...
    
    def getAppName(self) -> str: ...
    
    def getIsAppFolder(self) -> bool: ...
    
    def getLinked(self) -> java.util.Date: ...
    
    def getPublisher(self) -> str: ...
    
    def getPublisherUrl(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str, s2: str, b: bool) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'ApiApp': ...
        
        def withLinked(self, j: java.util.Date) -> str: ...
        
        def withPublisher(self, s: str) -> str: ...
        
        def withPublisherUrl(self, s: str) -> str: ...
        
        
    
class BaseDfbReport:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getStartDate(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class CustomQuotaError(java.lang.Enum):
    OTHER = 'OTHER'
    TOO_MANY_USERS = 'TOO_MANY_USERS'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'CustomQuotaError': ...
    
    @staticmethod
    def values() -> typing.List['CustomQuotaError']: ...
    
    
class CustomQuotaErrorException('com.dropbox.core.DbxApiException'):
    errorValue: CustomQuotaError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', customQuotaError: CustomQuotaError) -> None: ...
    
    
class CustomQuotaResult:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getInvalidUserValue(self) -> 'UserSelectorArg': ...
    
    def getSuccessValue(self) -> 'UserCustomQuotaResult': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def invalidUser(userSelectorArg: 'UserSelectorArg') -> 'CustomQuotaResult': ...
    
    def isInvalidUser(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def success(userCustomQuotaResult: 'UserCustomQuotaResult') -> 'CustomQuotaResult': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        INVALID_USER = 'INVALID_USER'
        OTHER = 'OTHER'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class DateRangeError(java.lang.Enum):
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'DateRangeError': ...
    
    @staticmethod
    def values() -> typing.List['DateRangeError']: ...
    
    
class DateRangeErrorException('com.dropbox.core.DbxApiException'):
    errorValue: DateRangeError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', dateRangeError: DateRangeError) -> None: ...
    
    
class DbxTeamTeamRequests:
    def __init__(self, c: com.dropbox.core.v2.DbxRawClientV2) -> None: ...
    
    def devicesListMemberDevices(self, s: str) -> 'ListMemberDevicesResult': ...
    
    def devicesListMemberDevicesBuilder(self, s: str) -> 'DevicesListMemberDevicesBuilder': ...
    
    def devicesListMembersDevices(self) -> 'ListMembersDevicesResult': ...
    
    def devicesListMembersDevicesBuilder(self) -> 'DevicesListMembersDevicesBuilder': ...
    
    def devicesListTeamDevices(self) -> 'ListTeamDevicesResult': ...
    
    def devicesListTeamDevicesBuilder(self) -> 'DevicesListTeamDevicesBuilder': ...
    
    def devicesRevokeDeviceSession(self, revokeDeviceSessionArg: 'RevokeDeviceSessionArg') -> None: ...
    
    def devicesRevokeDeviceSessionBatch(self, t: typing.List['RevokeDeviceSessionArg']) -> 'RevokeDeviceSessionBatchResult': ...
    
    def featuresGetValues(self, t: typing.List['Feature']) -> 'FeaturesGetValuesBatchResult': ...
    
    def getInfo(self) -> 'TeamGetInfoResult': ...
    
    def groupsCreate(self, s: str) -> 'GroupFullInfo': ...
    
    def groupsCreateBuilder(self, s: str) -> 'GroupsCreateBuilder': ...
    
    def groupsDelete(self, groupSelector: 'GroupSelector') -> com.dropbox.core.v2.async.LaunchEmptyResult: ...
    
    def groupsGetInfo(self, groupsSelector: 'GroupsSelector') -> typing.List['GroupsGetInfoItem']: ...
    
    def groupsJobStatusGet(self, s: str) -> com.dropbox.core.v2.async.PollEmptyResult: ...
    
    def groupsList(self) -> 'GroupsListResult': ...
    
    def groupsListContinue(self, s: str) -> 'GroupsListResult': ...
    
    def groupsMembersAdd(self, groupSelector: 'GroupSelector', t: typing.List['MemberAccess']) -> 'GroupMembersChangeResult': ...
    
    def groupsMembersList(self, groupSelector: 'GroupSelector') -> 'GroupsMembersListResult': ...
    
    def groupsMembersListContinue(self, s: str) -> 'GroupsMembersListResult': ...
    
    def groupsMembersRemove(self, groupSelector: 'GroupSelector', t: typing.List['UserSelectorArg']) -> 'GroupMembersChangeResult': ...
    
    def groupsMembersSetAccessType(self, groupSelector: 'GroupSelector', userSelectorArg: 'UserSelectorArg', groupAccessType: 'GroupAccessType') -> typing.List['GroupsGetInfoItem']: ...
    
    def groupsUpdate(self, groupSelector: 'GroupSelector') -> 'GroupFullInfo': ...
    
    def groupsUpdateBuilder(self, groupSelector: 'GroupSelector') -> 'GroupsUpdateBuilder': ...
    
    def legalHoldsCreatePolicy(self, s: str, t: typing.List[str]) -> 'LegalHoldPolicy': ...
    
    def legalHoldsCreatePolicyBuilder(self, s: str, t: typing.List[str]) -> 'LegalHoldsCreatePolicyBuilder': ...
    
    def legalHoldsGetPolicy(self, s: str) -> 'LegalHoldPolicy': ...
    
    def legalHoldsListHeldRevisions(self, s: str) -> 'LegalHoldsListHeldRevisionResult': ...
    
    def legalHoldsListHeldRevisionsContinue(self, s: str) -> 'LegalHoldsListHeldRevisionResult': ...
    
    def legalHoldsListPolicies(self) -> 'LegalHoldsListPoliciesResult': ...
    
    def legalHoldsReleasePolicy(self, s: str) -> None: ...
    
    def legalHoldsUpdatePolicy(self, s: str) -> 'LegalHoldPolicy': ...
    
    def legalHoldsUpdatePolicyBuilder(self, s: str) -> 'LegalHoldsUpdatePolicyBuilder': ...
    
    def linkedAppsListMemberLinkedApps(self, s: str) -> 'ListMemberAppsResult': ...
    
    def linkedAppsListMembersLinkedApps(self) -> 'ListMembersAppsResult': ...
    
    def linkedAppsListTeamLinkedApps(self) -> 'ListTeamAppsResult': ...
    
    def linkedAppsRevokeLinkedApp(self, s: str, s2: str) -> None: ...
    
    def linkedAppsRevokeLinkedAppBatch(self, t: typing.List['RevokeLinkedApiAppArg']) -> 'RevokeLinkedAppBatchResult': ...
    
    def memberSpaceLimitsExcludedUsersAdd(self) -> 'ExcludedUsersUpdateResult': ...
    
    def memberSpaceLimitsExcludedUsersList(self) -> 'ExcludedUsersListResult': ...
    
    def memberSpaceLimitsExcludedUsersListContinue(self, s: str) -> 'ExcludedUsersListResult': ...
    
    def memberSpaceLimitsExcludedUsersRemove(self) -> 'ExcludedUsersUpdateResult': ...
    
    def memberSpaceLimitsGetCustomQuota(self, t: typing.List['UserSelectorArg']) -> typing.List[CustomQuotaResult]: ...
    
    def memberSpaceLimitsRemoveCustomQuota(self, t: typing.List['UserSelectorArg']) -> typing.List['RemoveCustomQuotaResult']: ...
    
    def memberSpaceLimitsSetCustomQuota(self, t: typing.List['UserCustomQuotaArg']) -> typing.List[CustomQuotaResult]: ...
    
    def membersAdd(self, t: typing.List['MemberAddArg']) -> 'MembersAddLaunch': ...
    
    def membersAddJobStatusGet(self, s: str) -> 'MembersAddJobStatus': ...
    
    def membersDeleteProfilePhoto(self, userSelectorArg: 'UserSelectorArg') -> 'TeamMemberInfo': ...
    
    def membersGetInfo(self, t: typing.List['UserSelectorArg']) -> typing.List['MembersGetInfoItem']: ...
    
    def membersList(self) -> 'MembersListResult': ...
    
    def membersListBuilder(self) -> 'MembersListBuilder': ...
    
    def membersListContinue(self, s: str) -> 'MembersListResult': ...
    
    def membersMoveFormerMemberFiles(self, userSelectorArg: 'UserSelectorArg', userSelectorArg2: 'UserSelectorArg', userSelectorArg3: 'UserSelectorArg') -> com.dropbox.core.v2.async.LaunchEmptyResult: ...
    
    def membersMoveFormerMemberFilesJobStatusCheck(self, s: str) -> com.dropbox.core.v2.async.PollEmptyResult: ...
    
    def membersRecover(self, userSelectorArg: 'UserSelectorArg') -> None: ...
    
    def membersRemove(self, userSelectorArg: 'UserSelectorArg') -> com.dropbox.core.v2.async.LaunchEmptyResult: ...
    
    def membersRemoveBuilder(self, userSelectorArg: 'UserSelectorArg') -> 'MembersRemoveBuilder': ...
    
    def membersRemoveJobStatusGet(self, s: str) -> com.dropbox.core.v2.async.PollEmptyResult: ...
    
    def membersSecondaryEmailsAdd(self, t: typing.List['UserSecondaryEmailsArg']) -> AddSecondaryEmailsResult: ...
    
    def membersSecondaryEmailsDelete(self, t: typing.List['UserSecondaryEmailsArg']) -> 'DeleteSecondaryEmailsResult': ...
    
    def membersSecondaryEmailsResendVerificationEmails(self, t: typing.List['UserSecondaryEmailsArg']) -> 'ResendVerificationEmailResult': ...
    
    def membersSendWelcomeEmail(self, userSelectorArg: 'UserSelectorArg') -> None: ...
    
    def membersSetAdminPermissions(self, userSelectorArg: 'UserSelectorArg', adminTier: AdminTier) -> 'MembersSetPermissionsResult': ...
    
    def membersSetProfile(self, userSelectorArg: 'UserSelectorArg') -> 'TeamMemberInfo': ...
    
    def membersSetProfileBuilder(self, userSelectorArg: 'UserSelectorArg') -> 'MembersSetProfileBuilder': ...
    
    def membersSetProfilePhoto(self, userSelectorArg: 'UserSelectorArg', c: com.dropbox.core.v2.account.PhotoSourceArg) -> 'TeamMemberInfo': ...
    
    def membersSuspend(self, userSelectorArg: 'UserSelectorArg') -> None: ...
    
    def membersUnsuspend(self, userSelectorArg: 'UserSelectorArg') -> None: ...
    
    def namespacesList(self) -> 'TeamNamespacesListResult': ...
    
    def namespacesListContinue(self, s: str) -> 'TeamNamespacesListResult': ...
    
    def propertiesTemplateAdd(self, s: str, s2: str, t: typing.List[com.dropbox.core.v2.fileproperties.PropertyFieldTemplate]) -> com.dropbox.core.v2.fileproperties.AddTemplateResult: ...
    
    def propertiesTemplateGet(self, s: str) -> com.dropbox.core.v2.fileproperties.GetTemplateResult: ...
    
    def propertiesTemplateList(self) -> com.dropbox.core.v2.fileproperties.ListTemplateResult: ...
    
    def propertiesTemplateUpdate(self, s: str) -> com.dropbox.core.v2.fileproperties.UpdateTemplateResult: ...
    
    def propertiesTemplateUpdateBuilder(self, s: str) -> 'PropertiesTemplateUpdateBuilder': ...
    
    def reportsGetActivity(self) -> 'GetActivityReport': ...
    
    def reportsGetActivityBuilder(self) -> 'ReportsGetActivityBuilder': ...
    
    def reportsGetDevices(self) -> 'GetDevicesReport': ...
    
    def reportsGetDevicesBuilder(self) -> 'ReportsGetDevicesBuilder': ...
    
    def reportsGetMembership(self) -> 'GetMembershipReport': ...
    
    def reportsGetMembershipBuilder(self) -> 'ReportsGetMembershipBuilder': ...
    
    def reportsGetStorage(self) -> 'GetStorageReport': ...
    
    def reportsGetStorageBuilder(self) -> 'ReportsGetStorageBuilder': ...
    
    def teamFolderActivate(self, s: str) -> 'TeamFolderMetadata': ...
    
    def teamFolderArchive(self, s: str) -> 'TeamFolderArchiveLaunch': ...
    
    def teamFolderArchiveCheck(self, s: str) -> 'TeamFolderArchiveJobStatus': ...
    
    def teamFolderCreate(self, s: str) -> 'TeamFolderMetadata': ...
    
    def teamFolderGetInfo(self, t: typing.List[str]) -> typing.List['TeamFolderGetInfoItem']: ...
    
    def teamFolderList(self) -> 'TeamFolderListResult': ...
    
    def teamFolderListContinue(self, s: str) -> 'TeamFolderListResult': ...
    
    def teamFolderPermanentlyDelete(self, s: str) -> None: ...
    
    def teamFolderRename(self, s: str, s2: str) -> 'TeamFolderMetadata': ...
    
    def teamFolderUpdateSyncSettings(self, s: str) -> 'TeamFolderMetadata': ...
    
    def teamFolderUpdateSyncSettingsBuilder(self, s: str) -> 'TeamFolderUpdateSyncSettingsBuilder': ...
    
    def tokenGetAuthenticatedAdmin(self) -> 'TokenGetAuthenticatedAdminResult': ...
    
    
class DeleteSecondaryEmailResult:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def cannotRemovePrimary(s: str) -> 'DeleteSecondaryEmailResult': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCannotRemovePrimaryValue(self) -> str: ...
    
    def getNotFoundValue(self) -> str: ...
    
    def getSuccessValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isCannotRemovePrimary(self) -> bool: ...
    
    def isNotFound(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def notFound(s: str) -> 'DeleteSecondaryEmailResult': ...
    
    @staticmethod
    def success(s: str) -> 'DeleteSecondaryEmailResult': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        CANNOT_REMOVE_PRIMARY = 'CANNOT_REMOVE_PRIMARY'
        NOT_FOUND = 'NOT_FOUND'
        OTHER = 'OTHER'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class DeleteSecondaryEmailsResult:
    def __init__(self, t: typing.List['UserDeleteResult']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getResults(self) -> typing.List['UserDeleteResult']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class DesktopClientSession(DeviceSession):
    def __init__(self, s: str, s2: str, desktopPlatform: 'DesktopPlatform', s3: str, s4: str, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getClientType(self) -> 'DesktopPlatform': ...
    
    def getClientVersion(self) -> str: ...
    
    def getCountry(self) -> str: ...
    
    def getCreated(self) -> java.util.Date: ...
    
    def getHostName(self) -> str: ...
    
    def getIpAddress(self) -> str: ...
    
    def getIsDeleteOnUnlinkSupported(self) -> bool: ...
    
    def getPlatform(self) -> str: ...
    
    def getSessionId(self) -> str: ...
    
    def getUpdated(self) -> java.util.Date: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> DeviceSession: ...
        
        def withCountry(self, s: str) -> str: ...
        
        def withCreated(self, j: java.util.Date) -> str: ...
        
        def withIpAddress(self, s: str) -> str: ...
        
        def withUpdated(self, j: java.util.Date) -> str: ...
        
        
    
class DesktopPlatform(java.lang.Enum):
    LINUX = 'LINUX'
    MAC = 'MAC'
    OTHER = 'OTHER'
    WINDOWS = 'WINDOWS'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'DesktopPlatform': ...
    
    @staticmethod
    def values() -> typing.List['DesktopPlatform']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.team.DesktopPlatform.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class DeviceSessionArg:
    def __init__(self, s: str, s2: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getSessionId(self) -> str: ...
    
    def getTeamMemberId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class DevicesActive:
    def __init__(self, t: typing.List[int], t2: typing.List[int], t3: typing.List[int], t4: typing.List[int], t5: typing.List[int], t6: typing.List[int], t7: typing.List[int]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAndroid(self) -> typing.List[int]: ...
    
    def getIos(self) -> typing.List[int]: ...
    
    def getLinux(self) -> typing.List[int]: ...
    
    def getMacos(self) -> typing.List[int]: ...
    
    def getOther(self) -> typing.List[int]: ...
    
    def getTotal(self) -> typing.List[int]: ...
    
    def getWindows(self) -> typing.List[int]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class DevicesListMemberDevicesBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'ListMemberDevicesResult': ...
    
    def withIncludeDesktopClients(self, b: bool) -> 'DevicesListMemberDevicesBuilder': ...
    
    def withIncludeMobileClients(self, b: bool) -> 'DevicesListMemberDevicesBuilder': ...
    
    def withIncludeWebSessions(self, b: bool) -> 'DevicesListMemberDevicesBuilder': ...
    
    
class DevicesListMembersDevicesBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'ListMembersDevicesResult': ...
    
    def withCursor(self, s: str) -> 'DevicesListMembersDevicesBuilder': ...
    
    def withIncludeDesktopClients(self, b: bool) -> 'DevicesListMembersDevicesBuilder': ...
    
    def withIncludeMobileClients(self, b: bool) -> 'DevicesListMembersDevicesBuilder': ...
    
    def withIncludeWebSessions(self, b: bool) -> 'DevicesListMembersDevicesBuilder': ...
    
    
class DevicesListTeamDevicesBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'ListTeamDevicesResult': ...
    
    def withCursor(self, s: str) -> 'DevicesListTeamDevicesBuilder': ...
    
    def withIncludeDesktopClients(self, b: bool) -> 'DevicesListTeamDevicesBuilder': ...
    
    def withIncludeMobileClients(self, b: bool) -> 'DevicesListTeamDevicesBuilder': ...
    
    def withIncludeWebSessions(self, b: bool) -> 'DevicesListTeamDevicesBuilder': ...
    
    
class ExcludedUsersListContinueError(java.lang.Enum):
    INVALID_CURSOR = 'INVALID_CURSOR'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ExcludedUsersListContinueError': ...
    
    @staticmethod
    def values() -> typing.List['ExcludedUsersListContinueError']: ...
    
    
class ExcludedUsersListContinueErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ExcludedUsersListContinueError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', excludedUsersListContinueError: ExcludedUsersListContinueError) -> None: ...
    
    
class ExcludedUsersListError(java.lang.Enum):
    LIST_ERROR = 'LIST_ERROR'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ExcludedUsersListError': ...
    
    @staticmethod
    def values() -> typing.List['ExcludedUsersListError']: ...
    
    
class ExcludedUsersListErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ExcludedUsersListError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', excludedUsersListError: ExcludedUsersListError) -> None: ...
    
    
class ExcludedUsersListResult:
    def __init__(self, t: typing.List['MemberProfile'], b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getHasMore(self) -> bool: ...
    
    def getUsers(self) -> typing.List['MemberProfile']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ExcludedUsersUpdateError(java.lang.Enum):
    OTHER = 'OTHER'
    TOO_MANY_USERS = 'TOO_MANY_USERS'
    USERS_NOT_IN_TEAM = 'USERS_NOT_IN_TEAM'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ExcludedUsersUpdateError': ...
    
    @staticmethod
    def values() -> typing.List['ExcludedUsersUpdateError']: ...
    
    
class ExcludedUsersUpdateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ExcludedUsersUpdateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', excludedUsersUpdateError: ExcludedUsersUpdateError) -> None: ...
    
    
class ExcludedUsersUpdateResult:
    def __init__(self, excludedUsersUpdateStatus: 'ExcludedUsersUpdateStatus') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getStatus(self) -> 'ExcludedUsersUpdateStatus': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ExcludedUsersUpdateStatus(java.lang.Enum):
    OTHER = 'OTHER'
    SUCCESS = 'SUCCESS'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ExcludedUsersUpdateStatus': ...
    
    @staticmethod
    def values() -> typing.List['ExcludedUsersUpdateStatus']: ...
    
    
class Feature(java.lang.Enum):
    HAS_TEAM_FILE_EVENTS = 'HAS_TEAM_FILE_EVENTS'
    HAS_TEAM_SELECTIVE_SYNC = 'HAS_TEAM_SELECTIVE_SYNC'
    HAS_TEAM_SHARED_DROPBOX = 'HAS_TEAM_SHARED_DROPBOX'
    OTHER = 'OTHER'
    UPLOAD_API_RATE_LIMIT = 'UPLOAD_API_RATE_LIMIT'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'Feature': ...
    
    @staticmethod
    def values() -> typing.List['Feature']: ...
    
    
class FeatureValue:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getHasTeamFileEventsValue(self) -> 'HasTeamFileEventsValue': ...
    
    def getHasTeamSelectiveSyncValue(self) -> 'HasTeamSelectiveSyncValue': ...
    
    def getHasTeamSharedDropboxValue(self) -> 'HasTeamSharedDropboxValue': ...
    
    def getUploadApiRateLimitValue(self) -> 'UploadApiRateLimitValue': ...
    
    @staticmethod
    def hasTeamFileEvents(hasTeamFileEventsValue: 'HasTeamFileEventsValue') -> 'FeatureValue': ...
    
    @staticmethod
    def hasTeamSelectiveSync(hasTeamSelectiveSyncValue: 'HasTeamSelectiveSyncValue') -> 'FeatureValue': ...
    
    @staticmethod
    def hasTeamSharedDropbox(hasTeamSharedDropboxValue: 'HasTeamSharedDropboxValue') -> 'FeatureValue': ...
    
    def hashCode(self) -> int: ...
    
    def isHasTeamFileEvents(self) -> bool: ...
    
    def isHasTeamSelectiveSync(self) -> bool: ...
    
    def isHasTeamSharedDropbox(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isUploadApiRateLimit(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def uploadApiRateLimit(uploadApiRateLimitValue: 'UploadApiRateLimitValue') -> 'FeatureValue': ...
    
    
    class Tag:
        HAS_TEAM_FILE_EVENTS = 'HAS_TEAM_FILE_EVENTS'
        HAS_TEAM_SELECTIVE_SYNC = 'HAS_TEAM_SELECTIVE_SYNC'
        HAS_TEAM_SHARED_DROPBOX = 'HAS_TEAM_SHARED_DROPBOX'
        OTHER = 'OTHER'
        UPLOAD_API_RATE_LIMIT = 'UPLOAD_API_RATE_LIMIT'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class FeaturesGetValuesBatchError(java.lang.Enum):
    EMPTY_FEATURES_LIST = 'EMPTY_FEATURES_LIST'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'FeaturesGetValuesBatchError': ...
    
    @staticmethod
    def values() -> typing.List['FeaturesGetValuesBatchError']: ...
    
    
class FeaturesGetValuesBatchErrorException('com.dropbox.core.DbxApiException'):
    errorValue: FeaturesGetValuesBatchError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', featuresGetValuesBatchError: FeaturesGetValuesBatchError) -> None: ...
    
    
class FeaturesGetValuesBatchResult:
    def __init__(self, t: typing.List[FeatureValue]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getValues(self) -> typing.List[FeatureValue]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GetActivityReport(BaseDfbReport):
    def __init__(self, s: str, t: typing.List[int], t2: typing.List[int], t3: typing.List[int], t4: typing.List[int], t5: typing.List[int], t6: typing.List[int], t7: typing.List[int], t8: typing.List[int], t9: typing.List[int], t10: typing.List[int], t11: typing.List[int], t12: typing.List[int], t13: typing.List[int], t14: typing.List[int]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getActiveSharedFolders1Day(self) -> typing.List[int]: ...
    
    def getActiveSharedFolders28Day(self) -> typing.List[int]: ...
    
    def getActiveSharedFolders7Day(self) -> typing.List[int]: ...
    
    def getActiveUsers1Day(self) -> typing.List[int]: ...
    
    def getActiveUsers28Day(self) -> typing.List[int]: ...
    
    def getActiveUsers7Day(self) -> typing.List[int]: ...
    
    def getAdds(self) -> typing.List[int]: ...
    
    def getDeletes(self) -> typing.List[int]: ...
    
    def getEdits(self) -> typing.List[int]: ...
    
    def getSharedLinksCreated(self) -> typing.List[int]: ...
    
    def getSharedLinksViewedByNotLoggedIn(self) -> typing.List[int]: ...
    
    def getSharedLinksViewedByOutsideUser(self) -> typing.List[int]: ...
    
    def getSharedLinksViewedByTeam(self) -> typing.List[int]: ...
    
    def getSharedLinksViewedTotal(self) -> typing.List[int]: ...
    
    def getStartDate(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GetDevicesReport(BaseDfbReport):
    def __init__(self, s: str, devicesActive: DevicesActive, devicesActive2: DevicesActive, devicesActive3: DevicesActive) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getActive1Day(self) -> DevicesActive: ...
    
    def getActive28Day(self) -> DevicesActive: ...
    
    def getActive7Day(self) -> DevicesActive: ...
    
    def getStartDate(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GetMembershipReport(BaseDfbReport):
    def __init__(self, s: str, t: typing.List[int], t2: typing.List[int], t3: typing.List[int], t4: typing.List[int], t5: typing.List[int]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLicenses(self) -> typing.List[int]: ...
    
    def getMembersJoined(self) -> typing.List[int]: ...
    
    def getPendingInvites(self) -> typing.List[int]: ...
    
    def getStartDate(self) -> str: ...
    
    def getSuspendedMembers(self) -> typing.List[int]: ...
    
    def getTeamSize(self) -> typing.List[int]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GetStorageReport(BaseDfbReport):
    def __init__(self, s: str, t: typing.List[int], t2: typing.List[int], t3: typing.List[int], t4: typing.List[int], t5: typing.List[typing.List['StorageBucket']]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMemberStorageMap(self) -> typing.List[typing.List['StorageBucket']]: ...
    
    def getSharedFolders(self) -> typing.List[int]: ...
    
    def getSharedUsage(self) -> typing.List[int]: ...
    
    def getStartDate(self) -> str: ...
    
    def getTotalUsage(self) -> typing.List[int]: ...
    
    def getUnsharedUsage(self) -> typing.List[int]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GroupAccessType(java.lang.Enum):
    MEMBER = 'MEMBER'
    OWNER = 'OWNER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GroupAccessType': ...
    
    @staticmethod
    def values() -> typing.List['GroupAccessType']: ...
    
    
class GroupCreateError(java.lang.Enum):
    EXTERNAL_ID_ALREADY_IN_USE = 'EXTERNAL_ID_ALREADY_IN_USE'
    GROUP_NAME_ALREADY_USED = 'GROUP_NAME_ALREADY_USED'
    GROUP_NAME_INVALID = 'GROUP_NAME_INVALID'
    OTHER = 'OTHER'
    SYSTEM_MANAGED_GROUP_DISALLOWED = 'SYSTEM_MANAGED_GROUP_DISALLOWED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GroupCreateError': ...
    
    @staticmethod
    def values() -> typing.List['GroupCreateError']: ...
    
    
class GroupCreateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GroupCreateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', groupCreateError: GroupCreateError) -> None: ...
    
    
class GroupDeleteError(java.lang.Enum):
    GROUP_ALREADY_DELETED = 'GROUP_ALREADY_DELETED'
    GROUP_NOT_FOUND = 'GROUP_NOT_FOUND'
    OTHER = 'OTHER'
    SYSTEM_MANAGED_GROUP_DISALLOWED = 'SYSTEM_MANAGED_GROUP_DISALLOWED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GroupDeleteError': ...
    
    @staticmethod
    def values() -> typing.List['GroupDeleteError']: ...
    
    
class GroupDeleteErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GroupDeleteError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', groupDeleteError: GroupDeleteError) -> None: ...
    
    
class GroupFullInfo(com.dropbox.core.v2.teamcommon.GroupSummary):
    def __init__(self, s: str, s2: str, c: com.dropbox.core.v2.teamcommon.GroupManagementType, i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCreated(self) -> int: ...
    
    def getGroupExternalId(self) -> str: ...
    
    def getGroupId(self) -> str: ...
    
    def getGroupManagementType(self) -> com.dropbox.core.v2.teamcommon.GroupManagementType: ...
    
    def getGroupName(self) -> str: ...
    
    def getMemberCount(self) -> int: ...
    
    def getMembers(self) -> typing.List['GroupMemberInfo']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> com.dropbox.core.v2.teamcommon.GroupSummary: ...
        
        def withGroupExternalId(self, s: str) -> str: ...
        
        def withMemberCount(self, i: int) -> str: ...
        
        def withMembers(self, t: typing.List['GroupMemberInfo']) -> str: ...
        
        
    
class GroupMemberInfo:
    def __init__(self, memberProfile: 'MemberProfile', groupAccessType: GroupAccessType) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessType(self) -> GroupAccessType: ...
    
    def getProfile(self) -> 'MemberProfile': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GroupMemberSetAccessTypeError(java.lang.Enum):
    GROUP_NOT_FOUND = 'GROUP_NOT_FOUND'
    MEMBER_NOT_IN_GROUP = 'MEMBER_NOT_IN_GROUP'
    OTHER = 'OTHER'
    SYSTEM_MANAGED_GROUP_DISALLOWED = 'SYSTEM_MANAGED_GROUP_DISALLOWED'
    USER_CANNOT_BE_MANAGER_OF_COMPANY_MANAGED_GROUP = 'USER_CANNOT_BE_MANAGER_OF_COMPANY_MANAGED_GROUP'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GroupMemberSetAccessTypeError': ...
    
    @staticmethod
    def values() -> typing.List['GroupMemberSetAccessTypeError']: ...
    
    
class GroupMemberSetAccessTypeErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GroupMemberSetAccessTypeError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', groupMemberSetAccessTypeError: GroupMemberSetAccessTypeError) -> None: ...
    
    
class GroupMembersAddError:
    DUPLICATE_USER = '"duplicate_user"'
    GROUP_NOT_FOUND = '"group_not_found"'
    GROUP_NOT_IN_TEAM = '"group_not_in_team"'
    OTHER = '"other"'
    SYSTEM_MANAGED_GROUP_DISALLOWED = '"system_managed_group_disallowed"'
    USER_MUST_BE_ACTIVE_TO_BE_OWNER = '"user_must_be_active_to_be_owner"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMembersNotInTeamValue(self) -> typing.List[str]: ...
    
    def getUserCannotBeManagerOfCompanyManagedGroupValue(self) -> typing.List[str]: ...
    
    def getUsersNotFoundValue(self) -> typing.List[str]: ...
    
    def hashCode(self) -> int: ...
    
    def isDuplicateUser(self) -> bool: ...
    
    def isGroupNotFound(self) -> bool: ...
    
    def isGroupNotInTeam(self) -> bool: ...
    
    def isMembersNotInTeam(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isSystemManagedGroupDisallowed(self) -> bool: ...
    
    def isUserCannotBeManagerOfCompanyManagedGroup(self) -> bool: ...
    
    def isUserMustBeActiveToBeOwner(self) -> bool: ...
    
    def isUsersNotFound(self) -> bool: ...
    
    @staticmethod
    def membersNotInTeam(t: typing.List[str]) -> 'GroupMembersAddError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def userCannotBeManagerOfCompanyManagedGroup(t: typing.List[str]) -> 'GroupMembersAddError': ...
    
    @staticmethod
    def usersNotFound(t: typing.List[str]) -> 'GroupMembersAddError': ...
    
    
    class Tag:
        DUPLICATE_USER = 'DUPLICATE_USER'
        GROUP_NOT_FOUND = 'GROUP_NOT_FOUND'
        GROUP_NOT_IN_TEAM = 'GROUP_NOT_IN_TEAM'
        MEMBERS_NOT_IN_TEAM = 'MEMBERS_NOT_IN_TEAM'
        OTHER = 'OTHER'
        SYSTEM_MANAGED_GROUP_DISALLOWED = 'SYSTEM_MANAGED_GROUP_DISALLOWED'
        USERS_NOT_FOUND = 'USERS_NOT_FOUND'
        USER_CANNOT_BE_MANAGER_OF_COMPANY_MANAGED_GROUP = 'USER_CANNOT_BE_MANAGER_OF_COMPANY_MANAGED_GROUP'
        USER_MUST_BE_ACTIVE_TO_BE_OWNER = 'USER_MUST_BE_ACTIVE_TO_BE_OWNER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GroupMembersAddErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GroupMembersAddError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', groupMembersAddError: GroupMembersAddError) -> None: ...
    
    
class GroupMembersChangeResult:
    def __init__(self, groupFullInfo: GroupFullInfo, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAsyncJobId(self) -> str: ...
    
    def getGroupInfo(self) -> GroupFullInfo: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GroupMembersRemoveError:
    GROUP_NOT_FOUND = '"group_not_found"'
    GROUP_NOT_IN_TEAM = '"group_not_in_team"'
    MEMBER_NOT_IN_GROUP = '"member_not_in_group"'
    OTHER = '"other"'
    SYSTEM_MANAGED_GROUP_DISALLOWED = '"system_managed_group_disallowed"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMembersNotInTeamValue(self) -> typing.List[str]: ...
    
    def getUsersNotFoundValue(self) -> typing.List[str]: ...
    
    def hashCode(self) -> int: ...
    
    def isGroupNotFound(self) -> bool: ...
    
    def isGroupNotInTeam(self) -> bool: ...
    
    def isMemberNotInGroup(self) -> bool: ...
    
    def isMembersNotInTeam(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isSystemManagedGroupDisallowed(self) -> bool: ...
    
    def isUsersNotFound(self) -> bool: ...
    
    @staticmethod
    def membersNotInTeam(t: typing.List[str]) -> 'GroupMembersRemoveError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def usersNotFound(t: typing.List[str]) -> 'GroupMembersRemoveError': ...
    
    
    class Tag:
        GROUP_NOT_FOUND = 'GROUP_NOT_FOUND'
        GROUP_NOT_IN_TEAM = 'GROUP_NOT_IN_TEAM'
        MEMBERS_NOT_IN_TEAM = 'MEMBERS_NOT_IN_TEAM'
        MEMBER_NOT_IN_GROUP = 'MEMBER_NOT_IN_GROUP'
        OTHER = 'OTHER'
        SYSTEM_MANAGED_GROUP_DISALLOWED = 'SYSTEM_MANAGED_GROUP_DISALLOWED'
        USERS_NOT_FOUND = 'USERS_NOT_FOUND'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GroupMembersRemoveErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GroupMembersRemoveError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', groupMembersRemoveError: GroupMembersRemoveError) -> None: ...
    
    
class GroupSelector:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getGroupExternalIdValue(self) -> str: ...
    
    def getGroupIdValue(self) -> str: ...
    
    @staticmethod
    def groupExternalId(s: str) -> 'GroupSelector': ...
    
    @staticmethod
    def groupId(s: str) -> 'GroupSelector': ...
    
    def hashCode(self) -> int: ...
    
    def isGroupExternalId(self) -> bool: ...
    
    def isGroupId(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        GROUP_EXTERNAL_ID = 'GROUP_EXTERNAL_ID'
        GROUP_ID = 'GROUP_ID'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GroupSelectorError(java.lang.Enum):
    GROUP_NOT_FOUND = 'GROUP_NOT_FOUND'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GroupSelectorError': ...
    
    @staticmethod
    def values() -> typing.List['GroupSelectorError']: ...
    
    
class GroupSelectorErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GroupSelectorError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', groupSelectorError: GroupSelectorError) -> None: ...
    
    
class GroupUpdateError(java.lang.Enum):
    EXTERNAL_ID_ALREADY_IN_USE = 'EXTERNAL_ID_ALREADY_IN_USE'
    GROUP_NAME_ALREADY_USED = 'GROUP_NAME_ALREADY_USED'
    GROUP_NAME_INVALID = 'GROUP_NAME_INVALID'
    GROUP_NOT_FOUND = 'GROUP_NOT_FOUND'
    OTHER = 'OTHER'
    SYSTEM_MANAGED_GROUP_DISALLOWED = 'SYSTEM_MANAGED_GROUP_DISALLOWED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GroupUpdateError': ...
    
    @staticmethod
    def values() -> typing.List['GroupUpdateError']: ...
    
    
class GroupUpdateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GroupUpdateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', groupUpdateError: GroupUpdateError) -> None: ...
    
    
class GroupsCreateBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> GroupFullInfo: ...
    
    def withAddCreatorAsOwner(self, b: bool) -> 'GroupsCreateBuilder': ...
    
    def withGroupExternalId(self, s: str) -> 'GroupsCreateBuilder': ...
    
    def withGroupManagementType(self, c: com.dropbox.core.v2.teamcommon.GroupManagementType) -> 'GroupsCreateBuilder': ...
    
    
class GroupsGetInfoError(java.lang.Enum):
    GROUP_NOT_ON_TEAM = 'GROUP_NOT_ON_TEAM'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GroupsGetInfoError': ...
    
    @staticmethod
    def values() -> typing.List['GroupsGetInfoError']: ...
    
    
class GroupsGetInfoErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GroupsGetInfoError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', groupsGetInfoError: GroupsGetInfoError) -> None: ...
    
    
class GroupsGetInfoItem:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getGroupInfoValue(self) -> GroupFullInfo: ...
    
    def getIdNotFoundValue(self) -> str: ...
    
    @staticmethod
    def groupInfo(groupFullInfo: GroupFullInfo) -> 'GroupsGetInfoItem': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def idNotFound(s: str) -> 'GroupsGetInfoItem': ...
    
    def isGroupInfo(self) -> bool: ...
    
    def isIdNotFound(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        GROUP_INFO = 'GROUP_INFO'
        ID_NOT_FOUND = 'ID_NOT_FOUND'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GroupsListContinueError(java.lang.Enum):
    INVALID_CURSOR = 'INVALID_CURSOR'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GroupsListContinueError': ...
    
    @staticmethod
    def values() -> typing.List['GroupsListContinueError']: ...
    
    
class GroupsListContinueErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GroupsListContinueError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', groupsListContinueError: GroupsListContinueError) -> None: ...
    
    
class GroupsListResult:
    def __init__(self, t: typing.List[com.dropbox.core.v2.teamcommon.GroupSummary], s: str, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getGroups(self) -> typing.List[com.dropbox.core.v2.teamcommon.GroupSummary]: ...
    
    def getHasMore(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GroupsMembersListContinueError(java.lang.Enum):
    INVALID_CURSOR = 'INVALID_CURSOR'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GroupsMembersListContinueError': ...
    
    @staticmethod
    def values() -> typing.List['GroupsMembersListContinueError']: ...
    
    
class GroupsMembersListContinueErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GroupsMembersListContinueError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', groupsMembersListContinueError: GroupsMembersListContinueError) -> None: ...
    
    
class GroupsMembersListResult:
    def __init__(self, t: typing.List[GroupMemberInfo], s: str, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getHasMore(self) -> bool: ...
    
    def getMembers(self) -> typing.List[GroupMemberInfo]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GroupsPollError(java.lang.Enum):
    ACCESS_DENIED = 'ACCESS_DENIED'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    INVALID_ASYNC_JOB_ID = 'INVALID_ASYNC_JOB_ID'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GroupsPollError': ...
    
    @staticmethod
    def values() -> typing.List['GroupsPollError']: ...
    
    
class GroupsPollErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GroupsPollError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', groupsPollError: GroupsPollError) -> None: ...
    
    
class GroupsSelector:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getGroupExternalIdsValue(self) -> typing.List[str]: ...
    
    def getGroupIdsValue(self) -> typing.List[str]: ...
    
    @staticmethod
    def groupExternalIds(t: typing.List[str]) -> 'GroupsSelector': ...
    
    @staticmethod
    def groupIds(t: typing.List[str]) -> 'GroupsSelector': ...
    
    def hashCode(self) -> int: ...
    
    def isGroupExternalIds(self) -> bool: ...
    
    def isGroupIds(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        GROUP_EXTERNAL_IDS = 'GROUP_EXTERNAL_IDS'
        GROUP_IDS = 'GROUP_IDS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GroupsUpdateBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> GroupFullInfo: ...
    
    def withNewGroupExternalId(self, s: str) -> 'GroupsUpdateBuilder': ...
    
    def withNewGroupManagementType(self, c: com.dropbox.core.v2.teamcommon.GroupManagementType) -> 'GroupsUpdateBuilder': ...
    
    def withNewGroupName(self, s: str) -> 'GroupsUpdateBuilder': ...
    
    def withReturnMembers(self, b: bool) -> 'GroupsUpdateBuilder': ...
    
    
class HasTeamFileEventsValue:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def enabled(b: bool) -> 'HasTeamFileEventsValue': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEnabledValue(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def isEnabled(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ENABLED = 'ENABLED'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class HasTeamSelectiveSyncValue:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getHasTeamSelectiveSyncValue(self) -> bool: ...
    
    @staticmethod
    def hasTeamSelectiveSync(b: bool) -> 'HasTeamSelectiveSyncValue': ...
    
    def hashCode(self) -> int: ...
    
    def isHasTeamSelectiveSync(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        HAS_TEAM_SELECTIVE_SYNC = 'HAS_TEAM_SELECTIVE_SYNC'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class HasTeamSharedDropboxValue:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getHasTeamSharedDropboxValue(self) -> bool: ...
    
    @staticmethod
    def hasTeamSharedDropbox(b: bool) -> 'HasTeamSharedDropboxValue': ...
    
    def hashCode(self) -> int: ...
    
    def isHasTeamSharedDropbox(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        HAS_TEAM_SHARED_DROPBOX = 'HAS_TEAM_SHARED_DROPBOX'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class LegalHoldHeldRevisionMetadata:
    def __init__(self, s: str, s2: str, s3: str, j: java.util.Date, s4: str, teamMemberStatus: 'TeamMemberStatus', s5: str, s6: str, i: int, s7: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAuthorEmail(self) -> str: ...
    
    def getAuthorMemberId(self) -> str: ...
    
    def getAuthorMemberStatus(self) -> 'TeamMemberStatus': ...
    
    def getContentHash(self) -> str: ...
    
    def getFileType(self) -> str: ...
    
    def getNewFilename(self) -> str: ...
    
    def getOriginalFilePath(self) -> str: ...
    
    def getOriginalRevisionId(self) -> str: ...
    
    def getServerModified(self) -> java.util.Date: ...
    
    def getSize(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class LegalHoldPolicy:
    def __init__(self, s: str, s2: str, membersInfo: 'MembersInfo', legalHoldStatus: 'LegalHoldStatus', j: java.util.Date) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getActivationTime(self) -> java.util.Date: ...
    
    def getDescription(self) -> str: ...
    
    def getEndDate(self) -> java.util.Date: ...
    
    def getId(self) -> str: ...
    
    def getMembers(self) -> 'MembersInfo': ...
    
    def getName(self) -> str: ...
    
    def getStartDate(self) -> java.util.Date: ...
    
    def getStatus(self) -> 'LegalHoldStatus': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str, s2: str, membersInfo: 'MembersInfo', legalHoldStatus: 'LegalHoldStatus', j: java.util.Date) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'LegalHoldPolicy': ...
        
        def withActivationTime(self, j: java.util.Date) -> str: ...
        
        def withDescription(self, s: str) -> str: ...
        
        def withEndDate(self, j: java.util.Date) -> str: ...
        
        
    
class LegalHoldStatus(java.lang.Enum):
    ACTIVATING = 'ACTIVATING'
    ACTIVE = 'ACTIVE'
    EXPORTING = 'EXPORTING'
    OTHER = 'OTHER'
    RELEASED = 'RELEASED'
    RELEASING = 'RELEASING'
    UPDATING = 'UPDATING'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LegalHoldStatus': ...
    
    @staticmethod
    def values() -> typing.List['LegalHoldStatus']: ...
    
    
class LegalHoldsCreatePolicyBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> LegalHoldPolicy: ...
    
    def withDescription(self, s: str) -> 'LegalHoldsCreatePolicyBuilder': ...
    
    def withEndDate(self, j: java.util.Date) -> 'LegalHoldsCreatePolicyBuilder': ...
    
    def withStartDate(self, j: java.util.Date) -> 'LegalHoldsCreatePolicyBuilder': ...
    
    
class LegalHoldsGetPolicyError(java.lang.Enum):
    INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'
    LEGAL_HOLD_POLICY_NOT_FOUND = 'LEGAL_HOLD_POLICY_NOT_FOUND'
    OTHER = 'OTHER'
    UNKNOWN_LEGAL_HOLD_ERROR = 'UNKNOWN_LEGAL_HOLD_ERROR'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LegalHoldsGetPolicyError': ...
    
    @staticmethod
    def values() -> typing.List['LegalHoldsGetPolicyError']: ...
    
    
class LegalHoldsGetPolicyErrorException('com.dropbox.core.DbxApiException'):
    errorValue: LegalHoldsGetPolicyError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', legalHoldsGetPolicyError: LegalHoldsGetPolicyError) -> None: ...
    
    
class LegalHoldsListHeldRevisionResult:
    def __init__(self, t: typing.List[LegalHoldHeldRevisionMetadata], b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getEntries(self) -> typing.List[LegalHoldHeldRevisionMetadata]: ...
    
    def getHasMore(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class LegalHoldsListHeldRevisionsError(java.lang.Enum):
    INACTIVE_LEGAL_HOLD = 'INACTIVE_LEGAL_HOLD'
    INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'
    LEGAL_HOLD_STILL_EMPTY = 'LEGAL_HOLD_STILL_EMPTY'
    OTHER = 'OTHER'
    TRANSIENT_ERROR = 'TRANSIENT_ERROR'
    UNKNOWN_LEGAL_HOLD_ERROR = 'UNKNOWN_LEGAL_HOLD_ERROR'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LegalHoldsListHeldRevisionsError': ...
    
    @staticmethod
    def values() -> typing.List['LegalHoldsListHeldRevisionsError']: ...
    
    
class LegalHoldsListHeldRevisionsErrorException('com.dropbox.core.DbxApiException'):
    errorValue: LegalHoldsListHeldRevisionsError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', legalHoldsListHeldRevisionsError: LegalHoldsListHeldRevisionsError) -> None: ...
    
    
class LegalHoldsListPoliciesError(java.lang.Enum):
    INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'
    OTHER = 'OTHER'
    TRANSIENT_ERROR = 'TRANSIENT_ERROR'
    UNKNOWN_LEGAL_HOLD_ERROR = 'UNKNOWN_LEGAL_HOLD_ERROR'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LegalHoldsListPoliciesError': ...
    
    @staticmethod
    def values() -> typing.List['LegalHoldsListPoliciesError']: ...
    
    
class LegalHoldsListPoliciesErrorException('com.dropbox.core.DbxApiException'):
    errorValue: LegalHoldsListPoliciesError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', legalHoldsListPoliciesError: LegalHoldsListPoliciesError) -> None: ...
    
    
class LegalHoldsListPoliciesResult:
    def __init__(self, t: typing.List[LegalHoldPolicy]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPolicies(self) -> typing.List[LegalHoldPolicy]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class LegalHoldsPolicyCreateError(java.lang.Enum):
    EMPTY_MEMBERS_LIST = 'EMPTY_MEMBERS_LIST'
    INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'
    INVALID_MEMBERS = 'INVALID_MEMBERS'
    NAME_MUST_BE_UNIQUE = 'NAME_MUST_BE_UNIQUE'
    NUMBER_OF_USERS_ON_HOLD_IS_GREATER_THAN_HOLD_LIMITATION = 'NUMBER_OF_USERS_ON_HOLD_IS_GREATER_THAN_HOLD_LIMITATION'
    OTHER = 'OTHER'
    START_DATE_IS_LATER_THAN_END_DATE = 'START_DATE_IS_LATER_THAN_END_DATE'
    TEAM_EXCEEDED_LEGAL_HOLD_QUOTA = 'TEAM_EXCEEDED_LEGAL_HOLD_QUOTA'
    TRANSIENT_ERROR = 'TRANSIENT_ERROR'
    UNKNOWN_LEGAL_HOLD_ERROR = 'UNKNOWN_LEGAL_HOLD_ERROR'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LegalHoldsPolicyCreateError': ...
    
    @staticmethod
    def values() -> typing.List['LegalHoldsPolicyCreateError']: ...
    
    
class LegalHoldsPolicyCreateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: LegalHoldsPolicyCreateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', legalHoldsPolicyCreateError: LegalHoldsPolicyCreateError) -> None: ...
    
    
class LegalHoldsPolicyReleaseError(java.lang.Enum):
    INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'
    LEGAL_HOLD_ALREADY_RELEASING = 'LEGAL_HOLD_ALREADY_RELEASING'
    LEGAL_HOLD_PERFORMING_ANOTHER_OPERATION = 'LEGAL_HOLD_PERFORMING_ANOTHER_OPERATION'
    LEGAL_HOLD_POLICY_NOT_FOUND = 'LEGAL_HOLD_POLICY_NOT_FOUND'
    OTHER = 'OTHER'
    UNKNOWN_LEGAL_HOLD_ERROR = 'UNKNOWN_LEGAL_HOLD_ERROR'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LegalHoldsPolicyReleaseError': ...
    
    @staticmethod
    def values() -> typing.List['LegalHoldsPolicyReleaseError']: ...
    
    
class LegalHoldsPolicyReleaseErrorException('com.dropbox.core.DbxApiException'):
    errorValue: LegalHoldsPolicyReleaseError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', legalHoldsPolicyReleaseError: LegalHoldsPolicyReleaseError) -> None: ...
    
    
class LegalHoldsPolicyUpdateError(java.lang.Enum):
    EMPTY_MEMBERS_LIST = 'EMPTY_MEMBERS_LIST'
    INACTIVE_LEGAL_HOLD = 'INACTIVE_LEGAL_HOLD'
    INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS'
    INVALID_MEMBERS = 'INVALID_MEMBERS'
    LEGAL_HOLD_PERFORMING_ANOTHER_OPERATION = 'LEGAL_HOLD_PERFORMING_ANOTHER_OPERATION'
    LEGAL_HOLD_POLICY_NOT_FOUND = 'LEGAL_HOLD_POLICY_NOT_FOUND'
    NAME_MUST_BE_UNIQUE = 'NAME_MUST_BE_UNIQUE'
    NUMBER_OF_USERS_ON_HOLD_IS_GREATER_THAN_HOLD_LIMITATION = 'NUMBER_OF_USERS_ON_HOLD_IS_GREATER_THAN_HOLD_LIMITATION'
    OTHER = 'OTHER'
    UNKNOWN_LEGAL_HOLD_ERROR = 'UNKNOWN_LEGAL_HOLD_ERROR'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LegalHoldsPolicyUpdateError': ...
    
    @staticmethod
    def values() -> typing.List['LegalHoldsPolicyUpdateError']: ...
    
    
class LegalHoldsPolicyUpdateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: LegalHoldsPolicyUpdateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', legalHoldsPolicyUpdateError: LegalHoldsPolicyUpdateError) -> None: ...
    
    
class LegalHoldsUpdatePolicyBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> LegalHoldPolicy: ...
    
    def withDescription(self, s: str) -> 'LegalHoldsUpdatePolicyBuilder': ...
    
    def withMembers(self, t: typing.List[str]) -> 'LegalHoldsUpdatePolicyBuilder': ...
    
    def withName(self, s: str) -> 'LegalHoldsUpdatePolicyBuilder': ...
    
    
class ListMemberAppsError(java.lang.Enum):
    MEMBER_NOT_FOUND = 'MEMBER_NOT_FOUND'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ListMemberAppsError': ...
    
    @staticmethod
    def values() -> typing.List['ListMemberAppsError']: ...
    
    
class ListMemberAppsErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListMemberAppsError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listMemberAppsError: ListMemberAppsError) -> None: ...
    
    
class ListMemberAppsResult:
    def __init__(self, t: typing.List[ApiApp]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLinkedApiApps(self) -> typing.List[ApiApp]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListMemberDevicesError(java.lang.Enum):
    MEMBER_NOT_FOUND = 'MEMBER_NOT_FOUND'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ListMemberDevicesError': ...
    
    @staticmethod
    def values() -> typing.List['ListMemberDevicesError']: ...
    
    
class ListMemberDevicesErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListMemberDevicesError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listMemberDevicesError: ListMemberDevicesError) -> None: ...
    
    
class ListMemberDevicesResult:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getActiveWebSessions(self) -> typing.List[ActiveWebSession]: ...
    
    def getDesktopClientSessions(self) -> typing.List[DesktopClientSession]: ...
    
    def getMobileClientSessions(self) -> typing.List['MobileClientSession']: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder() -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'ListMemberDevicesResult': ...
        
        def withActiveWebSessions(self, t: typing.List[ActiveWebSession]) -> str: ...
        
        def withDesktopClientSessions(self, t: typing.List[DesktopClientSession]) -> str: ...
        
        def withMobileClientSessions(self, t: typing.List['MobileClientSession']) -> str: ...
        
        
    
class ListMembersAppsError(java.lang.Enum):
    OTHER = 'OTHER'
    RESET = 'RESET'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ListMembersAppsError': ...
    
    @staticmethod
    def values() -> typing.List['ListMembersAppsError']: ...
    
    
class ListMembersAppsErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListMembersAppsError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listMembersAppsError: ListMembersAppsError) -> None: ...
    
    
class ListMembersAppsResult:
    def __init__(self, t: typing.List['MemberLinkedApps'], b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getApps(self) -> typing.List['MemberLinkedApps']: ...
    
    def getCursor(self) -> str: ...
    
    def getHasMore(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListMembersDevicesError(java.lang.Enum):
    OTHER = 'OTHER'
    RESET = 'RESET'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ListMembersDevicesError': ...
    
    @staticmethod
    def values() -> typing.List['ListMembersDevicesError']: ...
    
    
class ListMembersDevicesErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListMembersDevicesError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listMembersDevicesError: ListMembersDevicesError) -> None: ...
    
    
class ListMembersDevicesResult:
    def __init__(self, t: typing.List['MemberDevices'], b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getDevices(self) -> typing.List['MemberDevices']: ...
    
    def getHasMore(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListTeamAppsError(java.lang.Enum):
    OTHER = 'OTHER'
    RESET = 'RESET'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ListTeamAppsError': ...
    
    @staticmethod
    def values() -> typing.List['ListTeamAppsError']: ...
    
    
class ListTeamAppsErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListTeamAppsError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listTeamAppsError: ListTeamAppsError) -> None: ...
    
    
class ListTeamAppsResult:
    def __init__(self, t: typing.List['MemberLinkedApps'], b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getApps(self) -> typing.List['MemberLinkedApps']: ...
    
    def getCursor(self) -> str: ...
    
    def getHasMore(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ListTeamDevicesError(java.lang.Enum):
    OTHER = 'OTHER'
    RESET = 'RESET'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'ListTeamDevicesError': ...
    
    @staticmethod
    def values() -> typing.List['ListTeamDevicesError']: ...
    
    
class ListTeamDevicesErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ListTeamDevicesError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', listTeamDevicesError: ListTeamDevicesError) -> None: ...
    
    
class ListTeamDevicesResult:
    def __init__(self, t: typing.List['MemberDevices'], b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getDevices(self) -> typing.List['MemberDevices']: ...
    
    def getHasMore(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class MemberAccess:
    def __init__(self, userSelectorArg: 'UserSelectorArg', groupAccessType: GroupAccessType) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessType(self) -> GroupAccessType: ...
    
    def getUser(self) -> 'UserSelectorArg': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class MemberAddArg:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getIsDirectoryRestricted(self) -> bool: ...
    
    def getMemberEmail(self) -> str: ...
    
    def getMemberExternalId(self) -> str: ...
    
    def getMemberGivenName(self) -> str: ...
    
    def getMemberPersistentId(self) -> str: ...
    
    def getMemberSurname(self) -> str: ...
    
    def getRole(self) -> AdminTier: ...
    
    def getSendWelcomeEmail(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'MemberAddArg': ...
        
        def withIsDirectoryRestricted(self, b: bool) -> str: ...
        
        def withMemberExternalId(self, s: str) -> str: ...
        
        def withMemberGivenName(self, s: str) -> str: ...
        
        def withMemberPersistentId(self, s: str) -> str: ...
        
        def withMemberSurname(self, s: str) -> str: ...
        
        def withRole(self, adminTier: AdminTier) -> str: ...
        
        def withSendWelcomeEmail(self, b: bool) -> str: ...
        
        
    
class MemberAddResult:
    def __init__(self) -> None: ...
    
    @staticmethod
    def duplicateExternalMemberId(s: str) -> 'MemberAddResult': ...
    
    @staticmethod
    def duplicateMemberPersistentId(s: str) -> 'MemberAddResult': ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def freeTeamMemberLimitReached(s: str) -> 'MemberAddResult': ...
    
    def getDuplicateExternalMemberIdValue(self) -> str: ...
    
    def getDuplicateMemberPersistentIdValue(self) -> str: ...
    
    def getFreeTeamMemberLimitReachedValue(self) -> str: ...
    
    def getPersistentIdDisabledValue(self) -> str: ...
    
    def getSuccessValue(self) -> 'TeamMemberInfo': ...
    
    def getTeamLicenseLimitValue(self) -> str: ...
    
    def getUserAlreadyOnTeamValue(self) -> str: ...
    
    def getUserAlreadyPairedValue(self) -> str: ...
    
    def getUserCreationFailedValue(self) -> str: ...
    
    def getUserMigrationFailedValue(self) -> str: ...
    
    def getUserOnAnotherTeamValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isDuplicateExternalMemberId(self) -> bool: ...
    
    def isDuplicateMemberPersistentId(self) -> bool: ...
    
    def isFreeTeamMemberLimitReached(self) -> bool: ...
    
    def isPersistentIdDisabled(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    def isTeamLicenseLimit(self) -> bool: ...
    
    def isUserAlreadyOnTeam(self) -> bool: ...
    
    def isUserAlreadyPaired(self) -> bool: ...
    
    def isUserCreationFailed(self) -> bool: ...
    
    def isUserMigrationFailed(self) -> bool: ...
    
    def isUserOnAnotherTeam(self) -> bool: ...
    
    @staticmethod
    def persistentIdDisabled(s: str) -> 'MemberAddResult': ...
    
    @staticmethod
    def success(teamMemberInfo: 'TeamMemberInfo') -> 'MemberAddResult': ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def teamLicenseLimit(s: str) -> 'MemberAddResult': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def userAlreadyOnTeam(s: str) -> 'MemberAddResult': ...
    
    @staticmethod
    def userAlreadyPaired(s: str) -> 'MemberAddResult': ...
    
    @staticmethod
    def userCreationFailed(s: str) -> 'MemberAddResult': ...
    
    @staticmethod
    def userMigrationFailed(s: str) -> 'MemberAddResult': ...
    
    @staticmethod
    def userOnAnotherTeam(s: str) -> 'MemberAddResult': ...
    
    
    class Tag:
        DUPLICATE_EXTERNAL_MEMBER_ID = 'DUPLICATE_EXTERNAL_MEMBER_ID'
        DUPLICATE_MEMBER_PERSISTENT_ID = 'DUPLICATE_MEMBER_PERSISTENT_ID'
        FREE_TEAM_MEMBER_LIMIT_REACHED = 'FREE_TEAM_MEMBER_LIMIT_REACHED'
        PERSISTENT_ID_DISABLED = 'PERSISTENT_ID_DISABLED'
        SUCCESS = 'SUCCESS'
        TEAM_LICENSE_LIMIT = 'TEAM_LICENSE_LIMIT'
        USER_ALREADY_ON_TEAM = 'USER_ALREADY_ON_TEAM'
        USER_ALREADY_PAIRED = 'USER_ALREADY_PAIRED'
        USER_CREATION_FAILED = 'USER_CREATION_FAILED'
        USER_MIGRATION_FAILED = 'USER_MIGRATION_FAILED'
        USER_ON_ANOTHER_TEAM = 'USER_ON_ANOTHER_TEAM'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class MemberDevices:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDesktopClients(self) -> typing.List[DesktopClientSession]: ...
    
    def getMobileClients(self) -> typing.List['MobileClientSession']: ...
    
    def getTeamMemberId(self) -> str: ...
    
    def getWebSessions(self) -> typing.List[ActiveWebSession]: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'MemberDevices': ...
        
        def withDesktopClients(self, t: typing.List[DesktopClientSession]) -> str: ...
        
        def withMobileClients(self, t: typing.List['MobileClientSession']) -> str: ...
        
        def withWebSessions(self, t: typing.List[ActiveWebSession]) -> str: ...
        
        
    
class MemberLinkedApps:
    def __init__(self, s: str, t: typing.List[ApiApp]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLinkedApiApps(self) -> typing.List[ApiApp]: ...
    
    def getTeamMemberId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class MemberProfile:
    def __init__(self, s: str, s2: str, b: bool, teamMemberStatus: 'TeamMemberStatus', c: com.dropbox.core.v2.users.Name, teamMembershipType: 'TeamMembershipType') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccountId(self) -> str: ...
    
    def getEmail(self) -> str: ...
    
    def getEmailVerified(self) -> bool: ...
    
    def getExternalId(self) -> str: ...
    
    def getInvitedOn(self) -> java.util.Date: ...
    
    def getIsDirectoryRestricted(self) -> bool: ...
    
    def getJoinedOn(self) -> java.util.Date: ...
    
    def getMembershipType(self) -> 'TeamMembershipType': ...
    
    def getName(self) -> com.dropbox.core.v2.users.Name: ...
    
    def getPersistentId(self) -> str: ...
    
    def getProfilePhotoUrl(self) -> str: ...
    
    def getSecondaryEmails(self) -> typing.List[com.dropbox.core.v2.secondaryemails.SecondaryEmail]: ...
    
    def getStatus(self) -> 'TeamMemberStatus': ...
    
    def getSuspendedOn(self) -> java.util.Date: ...
    
    def getTeamMemberId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str, s2: str, b: bool, teamMemberStatus: 'TeamMemberStatus', c: com.dropbox.core.v2.users.Name, teamMembershipType: 'TeamMembershipType') -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'MemberProfile': ...
        
        def withAccountId(self, s: str) -> str: ...
        
        def withExternalId(self, s: str) -> str: ...
        
        def withInvitedOn(self, j: java.util.Date) -> str: ...
        
        def withIsDirectoryRestricted(self, b: bool) -> str: ...
        
        def withJoinedOn(self, j: java.util.Date) -> str: ...
        
        def withPersistentId(self, s: str) -> str: ...
        
        def withProfilePhotoUrl(self, s: str) -> str: ...
        
        def withSecondaryEmails(self, t: typing.List[com.dropbox.core.v2.secondaryemails.SecondaryEmail]) -> str: ...
        
        def withSuspendedOn(self, j: java.util.Date) -> str: ...
        
        
    
class MembersAddJobStatus:
    IN_PROGRESS = '"in_progress"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def complete(t: typing.List[MemberAddResult]) -> 'MembersAddJobStatus': ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failed(s: str) -> 'MembersAddJobStatus': ...
    
    def getCompleteValue(self) -> typing.List[MemberAddResult]: ...
    
    def getFailedValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isComplete(self) -> bool: ...
    
    def isFailed(self) -> bool: ...
    
    def isInProgress(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        COMPLETE = 'COMPLETE'
        FAILED = 'FAILED'
        IN_PROGRESS = 'IN_PROGRESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class MembersAddLaunch:
    def __init__(self) -> None: ...
    
    @staticmethod
    def asyncJobId(s: str) -> 'MembersAddLaunch': ...
    
    @staticmethod
    def complete(t: typing.List[MemberAddResult]) -> 'MembersAddLaunch': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAsyncJobIdValue(self) -> str: ...
    
    def getCompleteValue(self) -> typing.List[MemberAddResult]: ...
    
    def hashCode(self) -> int: ...
    
    def isAsyncJobId(self) -> bool: ...
    
    def isComplete(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ASYNC_JOB_ID = 'ASYNC_JOB_ID'
        COMPLETE = 'COMPLETE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class MembersDeleteProfilePhotoError(java.lang.Enum):
    OTHER = 'OTHER'
    SET_PROFILE_DISALLOWED = 'SET_PROFILE_DISALLOWED'
    USER_NOT_FOUND = 'USER_NOT_FOUND'
    USER_NOT_IN_TEAM = 'USER_NOT_IN_TEAM'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MembersDeleteProfilePhotoError': ...
    
    @staticmethod
    def values() -> typing.List['MembersDeleteProfilePhotoError']: ...
    
    
class MembersDeleteProfilePhotoErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MembersDeleteProfilePhotoError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', membersDeleteProfilePhotoError: MembersDeleteProfilePhotoError) -> None: ...
    
    
class MembersGetInfoError(java.lang.Enum):
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MembersGetInfoError': ...
    
    @staticmethod
    def values() -> typing.List['MembersGetInfoError']: ...
    
    
class MembersGetInfoErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MembersGetInfoError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', membersGetInfoError: MembersGetInfoError) -> None: ...
    
    
class MembersGetInfoItem:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getIdNotFoundValue(self) -> str: ...
    
    def getMemberInfoValue(self) -> 'TeamMemberInfo': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def idNotFound(s: str) -> 'MembersGetInfoItem': ...
    
    def isIdNotFound(self) -> bool: ...
    
    def isMemberInfo(self) -> bool: ...
    
    @staticmethod
    def memberInfo(teamMemberInfo: 'TeamMemberInfo') -> 'MembersGetInfoItem': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ID_NOT_FOUND = 'ID_NOT_FOUND'
        MEMBER_INFO = 'MEMBER_INFO'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class MembersInfo:
    def __init__(self, t: typing.List[str], i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPermanentlyDeletedUsers(self) -> int: ...
    
    def getTeamMemberIds(self) -> typing.List[str]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class MembersListBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'MembersListResult': ...
    
    def withIncludeRemoved(self, b: bool) -> 'MembersListBuilder': ...
    
    def withLimit(self, i: int) -> 'MembersListBuilder': ...
    
    
class MembersListContinueError(java.lang.Enum):
    INVALID_CURSOR = 'INVALID_CURSOR'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MembersListContinueError': ...
    
    @staticmethod
    def values() -> typing.List['MembersListContinueError']: ...
    
    
class MembersListContinueErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MembersListContinueError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', membersListContinueError: MembersListContinueError) -> None: ...
    
    
class MembersListError(java.lang.Enum):
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MembersListError': ...
    
    @staticmethod
    def values() -> typing.List['MembersListError']: ...
    
    
class MembersListErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MembersListError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', membersListError: MembersListError) -> None: ...
    
    
class MembersListResult:
    def __init__(self, t: typing.List['TeamMemberInfo'], s: str, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getHasMore(self) -> bool: ...
    
    def getMembers(self) -> typing.List['TeamMemberInfo']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class MembersRecoverError(java.lang.Enum):
    OTHER = 'OTHER'
    TEAM_LICENSE_LIMIT = 'TEAM_LICENSE_LIMIT'
    USER_NOT_FOUND = 'USER_NOT_FOUND'
    USER_NOT_IN_TEAM = 'USER_NOT_IN_TEAM'
    USER_UNRECOVERABLE = 'USER_UNRECOVERABLE'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MembersRecoverError': ...
    
    @staticmethod
    def values() -> typing.List['MembersRecoverError']: ...
    
    
class MembersRecoverErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MembersRecoverError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', membersRecoverError: MembersRecoverError) -> None: ...
    
    
class MembersRemoveBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> com.dropbox.core.v2.async.LaunchEmptyResult: ...
    
    def withKeepAccount(self, b: bool) -> 'MembersRemoveBuilder': ...
    
    def withRetainTeamShares(self, b: bool) -> 'MembersRemoveBuilder': ...
    
    def withTransferAdminId(self, userSelectorArg: 'UserSelectorArg') -> 'MembersRemoveBuilder': ...
    
    def withTransferDestId(self, userSelectorArg: 'UserSelectorArg') -> 'MembersRemoveBuilder': ...
    
    def withWipeData(self, b: bool) -> 'MembersRemoveBuilder': ...
    
    
class MembersRemoveError(java.lang.Enum):
    CANNOT_KEEP_ACCOUNT = 'CANNOT_KEEP_ACCOUNT'
    CANNOT_KEEP_ACCOUNT_AND_DELETE_DATA = 'CANNOT_KEEP_ACCOUNT_AND_DELETE_DATA'
    CANNOT_KEEP_ACCOUNT_AND_TRANSFER = 'CANNOT_KEEP_ACCOUNT_AND_TRANSFER'
    CANNOT_KEEP_ACCOUNT_REQUIRED_TO_SIGN_TOS = 'CANNOT_KEEP_ACCOUNT_REQUIRED_TO_SIGN_TOS'
    CANNOT_KEEP_ACCOUNT_UNDER_LEGAL_HOLD = 'CANNOT_KEEP_ACCOUNT_UNDER_LEGAL_HOLD'
    CANNOT_KEEP_INVITED_USER_ACCOUNT = 'CANNOT_KEEP_INVITED_USER_ACCOUNT'
    CANNOT_RETAIN_SHARES_WHEN_DATA_WIPED = 'CANNOT_RETAIN_SHARES_WHEN_DATA_WIPED'
    CANNOT_RETAIN_SHARES_WHEN_NO_ACCOUNT_KEPT = 'CANNOT_RETAIN_SHARES_WHEN_NO_ACCOUNT_KEPT'
    CANNOT_RETAIN_SHARES_WHEN_TEAM_EXTERNAL_SHARING_OFF = 'CANNOT_RETAIN_SHARES_WHEN_TEAM_EXTERNAL_SHARING_OFF'
    EMAIL_ADDRESS_TOO_LONG_TO_BE_DISABLED = 'EMAIL_ADDRESS_TOO_LONG_TO_BE_DISABLED'
    OTHER = 'OTHER'
    RECIPIENT_NOT_VERIFIED = 'RECIPIENT_NOT_VERIFIED'
    REMOVED_AND_TRANSFER_ADMIN_SHOULD_DIFFER = 'REMOVED_AND_TRANSFER_ADMIN_SHOULD_DIFFER'
    REMOVED_AND_TRANSFER_DEST_SHOULD_DIFFER = 'REMOVED_AND_TRANSFER_DEST_SHOULD_DIFFER'
    REMOVE_LAST_ADMIN = 'REMOVE_LAST_ADMIN'
    TRANSFER_ADMIN_IS_NOT_ADMIN = 'TRANSFER_ADMIN_IS_NOT_ADMIN'
    TRANSFER_ADMIN_USER_NOT_FOUND = 'TRANSFER_ADMIN_USER_NOT_FOUND'
    TRANSFER_ADMIN_USER_NOT_IN_TEAM = 'TRANSFER_ADMIN_USER_NOT_IN_TEAM'
    TRANSFER_DEST_USER_NOT_FOUND = 'TRANSFER_DEST_USER_NOT_FOUND'
    TRANSFER_DEST_USER_NOT_IN_TEAM = 'TRANSFER_DEST_USER_NOT_IN_TEAM'
    UNSPECIFIED_TRANSFER_ADMIN_ID = 'UNSPECIFIED_TRANSFER_ADMIN_ID'
    USER_NOT_FOUND = 'USER_NOT_FOUND'
    USER_NOT_IN_TEAM = 'USER_NOT_IN_TEAM'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MembersRemoveError': ...
    
    @staticmethod
    def values() -> typing.List['MembersRemoveError']: ...
    
    
class MembersRemoveErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MembersRemoveError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', membersRemoveError: MembersRemoveError) -> None: ...
    
    
class MembersSendWelcomeError(java.lang.Enum):
    OTHER = 'OTHER'
    USER_NOT_FOUND = 'USER_NOT_FOUND'
    USER_NOT_IN_TEAM = 'USER_NOT_IN_TEAM'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MembersSendWelcomeError': ...
    
    @staticmethod
    def values() -> typing.List['MembersSendWelcomeError']: ...
    
    
class MembersSendWelcomeErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MembersSendWelcomeError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', membersSendWelcomeError: MembersSendWelcomeError) -> None: ...
    
    
class MembersSetPermissionsError(java.lang.Enum):
    CANNOT_SET_PERMISSIONS = 'CANNOT_SET_PERMISSIONS'
    LAST_ADMIN = 'LAST_ADMIN'
    OTHER = 'OTHER'
    TEAM_LICENSE_LIMIT = 'TEAM_LICENSE_LIMIT'
    USER_NOT_FOUND = 'USER_NOT_FOUND'
    USER_NOT_IN_TEAM = 'USER_NOT_IN_TEAM'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MembersSetPermissionsError': ...
    
    @staticmethod
    def values() -> typing.List['MembersSetPermissionsError']: ...
    
    
class MembersSetPermissionsErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MembersSetPermissionsError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', membersSetPermissionsError: MembersSetPermissionsError) -> None: ...
    
    
class MembersSetPermissionsResult:
    def __init__(self, s: str, adminTier: AdminTier) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getRole(self) -> AdminTier: ...
    
    def getTeamMemberId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class MembersSetProfileBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'TeamMemberInfo': ...
    
    def withNewEmail(self, s: str) -> 'MembersSetProfileBuilder': ...
    
    def withNewExternalId(self, s: str) -> 'MembersSetProfileBuilder': ...
    
    def withNewGivenName(self, s: str) -> 'MembersSetProfileBuilder': ...
    
    def withNewIsDirectoryRestricted(self, b: bool) -> 'MembersSetProfileBuilder': ...
    
    def withNewPersistentId(self, s: str) -> 'MembersSetProfileBuilder': ...
    
    def withNewSurname(self, s: str) -> 'MembersSetProfileBuilder': ...
    
    
class MembersSetProfileError(java.lang.Enum):
    DIRECTORY_RESTRICTED_OFF = 'DIRECTORY_RESTRICTED_OFF'
    EMAIL_RESERVED_FOR_OTHER_USER = 'EMAIL_RESERVED_FOR_OTHER_USER'
    EXTERNAL_ID_AND_NEW_EXTERNAL_ID_UNSAFE = 'EXTERNAL_ID_AND_NEW_EXTERNAL_ID_UNSAFE'
    EXTERNAL_ID_USED_BY_OTHER_USER = 'EXTERNAL_ID_USED_BY_OTHER_USER'
    NO_NEW_DATA_SPECIFIED = 'NO_NEW_DATA_SPECIFIED'
    OTHER = 'OTHER'
    PARAM_CANNOT_BE_EMPTY = 'PARAM_CANNOT_BE_EMPTY'
    PERSISTENT_ID_DISABLED = 'PERSISTENT_ID_DISABLED'
    PERSISTENT_ID_USED_BY_OTHER_USER = 'PERSISTENT_ID_USED_BY_OTHER_USER'
    SET_PROFILE_DISALLOWED = 'SET_PROFILE_DISALLOWED'
    USER_NOT_FOUND = 'USER_NOT_FOUND'
    USER_NOT_IN_TEAM = 'USER_NOT_IN_TEAM'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MembersSetProfileError': ...
    
    @staticmethod
    def values() -> typing.List['MembersSetProfileError']: ...
    
    
class MembersSetProfileErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MembersSetProfileError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', membersSetProfileError: MembersSetProfileError) -> None: ...
    
    
class MembersSetProfilePhotoError:
    OTHER = '"other"'
    SET_PROFILE_DISALLOWED = '"set_profile_disallowed"'
    USER_NOT_FOUND = '"user_not_found"'
    USER_NOT_IN_TEAM = '"user_not_in_team"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPhotoErrorValue(self) -> com.dropbox.core.v2.account.SetProfilePhotoError: ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPhotoError(self) -> bool: ...
    
    def isSetProfileDisallowed(self) -> bool: ...
    
    def isUserNotFound(self) -> bool: ...
    
    def isUserNotInTeam(self) -> bool: ...
    
    @staticmethod
    def photoError(c: com.dropbox.core.v2.account.SetProfilePhotoError) -> 'MembersSetProfilePhotoError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PHOTO_ERROR = 'PHOTO_ERROR'
        SET_PROFILE_DISALLOWED = 'SET_PROFILE_DISALLOWED'
        USER_NOT_FOUND = 'USER_NOT_FOUND'
        USER_NOT_IN_TEAM = 'USER_NOT_IN_TEAM'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class MembersSetProfilePhotoErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MembersSetProfilePhotoError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', membersSetProfilePhotoError: MembersSetProfilePhotoError) -> None: ...
    
    
class MembersSuspendError(java.lang.Enum):
    OTHER = 'OTHER'
    SUSPEND_INACTIVE_USER = 'SUSPEND_INACTIVE_USER'
    SUSPEND_LAST_ADMIN = 'SUSPEND_LAST_ADMIN'
    TEAM_LICENSE_LIMIT = 'TEAM_LICENSE_LIMIT'
    USER_NOT_FOUND = 'USER_NOT_FOUND'
    USER_NOT_IN_TEAM = 'USER_NOT_IN_TEAM'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MembersSuspendError': ...
    
    @staticmethod
    def values() -> typing.List['MembersSuspendError']: ...
    
    
class MembersSuspendErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MembersSuspendError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', membersSuspendError: MembersSuspendError) -> None: ...
    
    
class MembersTransferFormerMembersFilesError(java.lang.Enum):
    OTHER = 'OTHER'
    RECIPIENT_NOT_VERIFIED = 'RECIPIENT_NOT_VERIFIED'
    REMOVED_AND_TRANSFER_ADMIN_SHOULD_DIFFER = 'REMOVED_AND_TRANSFER_ADMIN_SHOULD_DIFFER'
    REMOVED_AND_TRANSFER_DEST_SHOULD_DIFFER = 'REMOVED_AND_TRANSFER_DEST_SHOULD_DIFFER'
    TRANSFER_ADMIN_IS_NOT_ADMIN = 'TRANSFER_ADMIN_IS_NOT_ADMIN'
    TRANSFER_ADMIN_USER_NOT_FOUND = 'TRANSFER_ADMIN_USER_NOT_FOUND'
    TRANSFER_ADMIN_USER_NOT_IN_TEAM = 'TRANSFER_ADMIN_USER_NOT_IN_TEAM'
    TRANSFER_DEST_USER_NOT_FOUND = 'TRANSFER_DEST_USER_NOT_FOUND'
    TRANSFER_DEST_USER_NOT_IN_TEAM = 'TRANSFER_DEST_USER_NOT_IN_TEAM'
    UNSPECIFIED_TRANSFER_ADMIN_ID = 'UNSPECIFIED_TRANSFER_ADMIN_ID'
    USER_DATA_ALREADY_TRANSFERRED = 'USER_DATA_ALREADY_TRANSFERRED'
    USER_DATA_CANNOT_BE_TRANSFERRED = 'USER_DATA_CANNOT_BE_TRANSFERRED'
    USER_DATA_IS_BEING_TRANSFERRED = 'USER_DATA_IS_BEING_TRANSFERRED'
    USER_NOT_FOUND = 'USER_NOT_FOUND'
    USER_NOT_IN_TEAM = 'USER_NOT_IN_TEAM'
    USER_NOT_REMOVED = 'USER_NOT_REMOVED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MembersTransferFormerMembersFilesError': ...
    
    @staticmethod
    def values() -> typing.List['MembersTransferFormerMembersFilesError']: ...
    
    
class MembersTransferFormerMembersFilesErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MembersTransferFormerMembersFilesError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', membersTransferFormerMembersFilesError: MembersTransferFormerMembersFilesError) -> None: ...
    
    
class MembersUnsuspendError(java.lang.Enum):
    OTHER = 'OTHER'
    TEAM_LICENSE_LIMIT = 'TEAM_LICENSE_LIMIT'
    UNSUSPEND_NON_SUSPENDED_MEMBER = 'UNSUSPEND_NON_SUSPENDED_MEMBER'
    USER_NOT_FOUND = 'USER_NOT_FOUND'
    USER_NOT_IN_TEAM = 'USER_NOT_IN_TEAM'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MembersUnsuspendError': ...
    
    @staticmethod
    def values() -> typing.List['MembersUnsuspendError']: ...
    
    
class MembersUnsuspendErrorException('com.dropbox.core.DbxApiException'):
    errorValue: MembersUnsuspendError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', membersUnsuspendError: MembersUnsuspendError) -> None: ...
    
    
class MobileClientPlatform(java.lang.Enum):
    ANDROID = 'ANDROID'
    BLACKBERRY = 'BLACKBERRY'
    IPAD = 'IPAD'
    IPHONE = 'IPHONE'
    OTHER = 'OTHER'
    WINDOWS_PHONE = 'WINDOWS_PHONE'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MobileClientPlatform': ...
    
    @staticmethod
    def values() -> typing.List['MobileClientPlatform']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.team.MobileClientPlatform.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class MobileClientSession(DeviceSession):
    def __init__(self, s: str, s2: str, mobileClientPlatform: MobileClientPlatform) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getClientType(self) -> MobileClientPlatform: ...
    
    def getClientVersion(self) -> str: ...
    
    def getCountry(self) -> str: ...
    
    def getCreated(self) -> java.util.Date: ...
    
    def getDeviceName(self) -> str: ...
    
    def getIpAddress(self) -> str: ...
    
    def getLastCarrier(self) -> str: ...
    
    def getOsVersion(self) -> str: ...
    
    def getSessionId(self) -> str: ...
    
    def getUpdated(self) -> java.util.Date: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> DeviceSession: ...
        
        def withClientVersion(self, s: str) -> str: ...
        
        def withCountry(self, s: str) -> str: ...
        
        def withCreated(self, j: java.util.Date) -> str: ...
        
        def withIpAddress(self, s: str) -> str: ...
        
        def withLastCarrier(self, s: str) -> str: ...
        
        def withOsVersion(self, s: str) -> str: ...
        
        def withUpdated(self, j: java.util.Date) -> str: ...
        
        
    
class NamespaceMetadata:
    def __init__(self, s: str, s2: str, namespaceType: 'NamespaceType') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getName(self) -> str: ...
    
    def getNamespaceId(self) -> str: ...
    
    def getNamespaceType(self) -> 'NamespaceType': ...
    
    def getTeamMemberId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class NamespaceType(java.lang.Enum):
    APP_FOLDER = 'APP_FOLDER'
    OTHER = 'OTHER'
    SHARED_FOLDER = 'SHARED_FOLDER'
    TEAM_FOLDER = 'TEAM_FOLDER'
    TEAM_MEMBER_FOLDER = 'TEAM_MEMBER_FOLDER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'NamespaceType': ...
    
    @staticmethod
    def values() -> typing.List['NamespaceType']: ...
    
    
class PropertiesTemplateUpdateBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> com.dropbox.core.v2.fileproperties.UpdateTemplateResult: ...
    
    def withAddFields(self, t: typing.List[com.dropbox.core.v2.fileproperties.PropertyFieldTemplate]) -> 'PropertiesTemplateUpdateBuilder': ...
    
    def withDescription(self, s: str) -> 'PropertiesTemplateUpdateBuilder': ...
    
    def withName(self, s: str) -> 'PropertiesTemplateUpdateBuilder': ...
    
    
class RemoveCustomQuotaResult:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getInvalidUserValue(self) -> 'UserSelectorArg': ...
    
    def getSuccessValue(self) -> 'UserSelectorArg': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def invalidUser(userSelectorArg: 'UserSelectorArg') -> 'RemoveCustomQuotaResult': ...
    
    def isInvalidUser(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def success(userSelectorArg: 'UserSelectorArg') -> 'RemoveCustomQuotaResult': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        INVALID_USER = 'INVALID_USER'
        OTHER = 'OTHER'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RemovedStatus:
    def __init__(self, b: bool, b2: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getIsDisconnected(self) -> bool: ...
    
    def getIsRecoverable(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class ReportsGetActivityBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> GetActivityReport: ...
    
    def withEndDate(self, j: java.util.Date) -> 'ReportsGetActivityBuilder': ...
    
    def withStartDate(self, j: java.util.Date) -> 'ReportsGetActivityBuilder': ...
    
    
class ReportsGetDevicesBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> GetDevicesReport: ...
    
    def withEndDate(self, j: java.util.Date) -> 'ReportsGetDevicesBuilder': ...
    
    def withStartDate(self, j: java.util.Date) -> 'ReportsGetDevicesBuilder': ...
    
    
class ReportsGetMembershipBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> GetMembershipReport: ...
    
    def withEndDate(self, j: java.util.Date) -> 'ReportsGetMembershipBuilder': ...
    
    def withStartDate(self, j: java.util.Date) -> 'ReportsGetMembershipBuilder': ...
    
    
class ReportsGetStorageBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> GetStorageReport: ...
    
    def withEndDate(self, j: java.util.Date) -> 'ReportsGetStorageBuilder': ...
    
    def withStartDate(self, j: java.util.Date) -> 'ReportsGetStorageBuilder': ...
    
    
class ResendSecondaryEmailResult:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getNotPendingValue(self) -> str: ...
    
    def getRateLimitedValue(self) -> str: ...
    
    def getSuccessValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isNotPending(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isRateLimited(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def notPending(s: str) -> 'ResendSecondaryEmailResult': ...
    
    @staticmethod
    def rateLimited(s: str) -> 'ResendSecondaryEmailResult': ...
    
    @staticmethod
    def success(s: str) -> 'ResendSecondaryEmailResult': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        NOT_PENDING = 'NOT_PENDING'
        OTHER = 'OTHER'
        RATE_LIMITED = 'RATE_LIMITED'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ResendVerificationEmailResult:
    def __init__(self, t: typing.List['UserResendResult']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getResults(self) -> typing.List['UserResendResult']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class RevokeDesktopClientArg(DeviceSessionArg):
    def __init__(self, s: str, s2: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDeleteOnUnlink(self) -> bool: ...
    
    def getSessionId(self) -> str: ...
    
    def getTeamMemberId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class RevokeDeviceSessionArg:
    def __init__(self) -> None: ...
    
    @staticmethod
    def desktopClient(revokeDesktopClientArg: RevokeDesktopClientArg) -> 'RevokeDeviceSessionArg': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDesktopClientValue(self) -> RevokeDesktopClientArg: ...
    
    def getMobileClientValue(self) -> DeviceSessionArg: ...
    
    def getWebSessionValue(self) -> DeviceSessionArg: ...
    
    def hashCode(self) -> int: ...
    
    def isDesktopClient(self) -> bool: ...
    
    def isMobileClient(self) -> bool: ...
    
    def isWebSession(self) -> bool: ...
    
    @staticmethod
    def mobileClient(deviceSessionArg: DeviceSessionArg) -> 'RevokeDeviceSessionArg': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def webSession(deviceSessionArg: DeviceSessionArg) -> 'RevokeDeviceSessionArg': ...
    
    
    class Tag:
        DESKTOP_CLIENT = 'DESKTOP_CLIENT'
        MOBILE_CLIENT = 'MOBILE_CLIENT'
        WEB_SESSION = 'WEB_SESSION'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RevokeDeviceSessionBatchError(java.lang.Enum):
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'RevokeDeviceSessionBatchError': ...
    
    @staticmethod
    def values() -> typing.List['RevokeDeviceSessionBatchError']: ...
    
    
class RevokeDeviceSessionBatchErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RevokeDeviceSessionBatchError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', revokeDeviceSessionBatchError: RevokeDeviceSessionBatchError) -> None: ...
    
    
class RevokeDeviceSessionBatchResult:
    def __init__(self, t: typing.List['RevokeDeviceSessionStatus']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getRevokeDevicesStatus(self) -> typing.List['RevokeDeviceSessionStatus']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class RevokeDeviceSessionError(java.lang.Enum):
    DEVICE_SESSION_NOT_FOUND = 'DEVICE_SESSION_NOT_FOUND'
    MEMBER_NOT_FOUND = 'MEMBER_NOT_FOUND'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'RevokeDeviceSessionError': ...
    
    @staticmethod
    def values() -> typing.List['RevokeDeviceSessionError']: ...
    
    
class RevokeDeviceSessionErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RevokeDeviceSessionError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', revokeDeviceSessionError: RevokeDeviceSessionError) -> None: ...
    
    
class RevokeDeviceSessionStatus:
    def __init__(self, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getErrorType(self) -> RevokeDeviceSessionError: ...
    
    def getSuccess(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class RevokeLinkedApiAppArg:
    def __init__(self, s: str, s2: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAppId(self) -> str: ...
    
    def getKeepAppFolder(self) -> bool: ...
    
    def getTeamMemberId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class RevokeLinkedAppBatchError(java.lang.Enum):
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'RevokeLinkedAppBatchError': ...
    
    @staticmethod
    def values() -> typing.List['RevokeLinkedAppBatchError']: ...
    
    
class RevokeLinkedAppBatchErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RevokeLinkedAppBatchError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', revokeLinkedAppBatchError: RevokeLinkedAppBatchError) -> None: ...
    
    
class RevokeLinkedAppBatchResult:
    def __init__(self, t: typing.List['RevokeLinkedAppStatus']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getRevokeLinkedAppStatus(self) -> typing.List['RevokeLinkedAppStatus']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class RevokeLinkedAppError(java.lang.Enum):
    APP_FOLDER_REMOVAL_NOT_SUPPORTED = 'APP_FOLDER_REMOVAL_NOT_SUPPORTED'
    APP_NOT_FOUND = 'APP_NOT_FOUND'
    MEMBER_NOT_FOUND = 'MEMBER_NOT_FOUND'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'RevokeLinkedAppError': ...
    
    @staticmethod
    def values() -> typing.List['RevokeLinkedAppError']: ...
    
    
class RevokeLinkedAppErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RevokeLinkedAppError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', revokeLinkedAppError: RevokeLinkedAppError) -> None: ...
    
    
class RevokeLinkedAppStatus:
    def __init__(self, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getErrorType(self) -> RevokeLinkedAppError: ...
    
    def getSuccess(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class SetCustomQuotaError(java.lang.Enum):
    OTHER = 'OTHER'
    SOME_USERS_ARE_EXCLUDED = 'SOME_USERS_ARE_EXCLUDED'
    TOO_MANY_USERS = 'TOO_MANY_USERS'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SetCustomQuotaError': ...
    
    @staticmethod
    def values() -> typing.List['SetCustomQuotaError']: ...
    
    
class SetCustomQuotaErrorException('com.dropbox.core.DbxApiException'):
    errorValue: SetCustomQuotaError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', setCustomQuotaError: SetCustomQuotaError) -> None: ...
    
    
class StorageBucket:
    def __init__(self, s: str, i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getBucket(self) -> str: ...
    
    def getUsers(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class TeamFolderAccessError(java.lang.Enum):
    INVALID_TEAM_FOLDER_ID = 'INVALID_TEAM_FOLDER_ID'
    NO_ACCESS = 'NO_ACCESS'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'TeamFolderAccessError': ...
    
    @staticmethod
    def values() -> typing.List['TeamFolderAccessError']: ...
    
    
class TeamFolderActivateError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(teamFolderAccessError: TeamFolderAccessError) -> 'TeamFolderActivateError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> TeamFolderAccessError: ...
    
    def getStatusErrorValue(self) -> 'TeamFolderInvalidStatusError': ...
    
    def getTeamSharedDropboxErrorValue(self) -> 'TeamFolderTeamSharedDropboxError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isStatusError(self) -> bool: ...
    
    def isTeamSharedDropboxError(self) -> bool: ...
    
    @staticmethod
    def statusError(teamFolderInvalidStatusError: 'TeamFolderInvalidStatusError') -> 'TeamFolderActivateError': ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def teamSharedDropboxError(teamFolderTeamSharedDropboxError: 'TeamFolderTeamSharedDropboxError') -> 'TeamFolderActivateError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        OTHER = 'OTHER'
        STATUS_ERROR = 'STATUS_ERROR'
        TEAM_SHARED_DROPBOX_ERROR = 'TEAM_SHARED_DROPBOX_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TeamFolderActivateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TeamFolderActivateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', teamFolderActivateError: TeamFolderActivateError) -> None: ...
    
    
class TeamFolderArchiveError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(teamFolderAccessError: TeamFolderAccessError) -> 'TeamFolderArchiveError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> TeamFolderAccessError: ...
    
    def getStatusErrorValue(self) -> 'TeamFolderInvalidStatusError': ...
    
    def getTeamSharedDropboxErrorValue(self) -> 'TeamFolderTeamSharedDropboxError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isStatusError(self) -> bool: ...
    
    def isTeamSharedDropboxError(self) -> bool: ...
    
    @staticmethod
    def statusError(teamFolderInvalidStatusError: 'TeamFolderInvalidStatusError') -> 'TeamFolderArchiveError': ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def teamSharedDropboxError(teamFolderTeamSharedDropboxError: 'TeamFolderTeamSharedDropboxError') -> 'TeamFolderArchiveError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        OTHER = 'OTHER'
        STATUS_ERROR = 'STATUS_ERROR'
        TEAM_SHARED_DROPBOX_ERROR = 'TEAM_SHARED_DROPBOX_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TeamFolderArchiveErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TeamFolderArchiveError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', teamFolderArchiveError: TeamFolderArchiveError) -> None: ...
    
    
class TeamFolderArchiveJobStatus:
    IN_PROGRESS = '"in_progress"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def complete(teamFolderMetadata: 'TeamFolderMetadata') -> 'TeamFolderArchiveJobStatus': ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def failed(teamFolderArchiveError: TeamFolderArchiveError) -> 'TeamFolderArchiveJobStatus': ...
    
    def getCompleteValue(self) -> 'TeamFolderMetadata': ...
    
    def getFailedValue(self) -> TeamFolderArchiveError: ...
    
    def hashCode(self) -> int: ...
    
    def isComplete(self) -> bool: ...
    
    def isFailed(self) -> bool: ...
    
    def isInProgress(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        COMPLETE = 'COMPLETE'
        FAILED = 'FAILED'
        IN_PROGRESS = 'IN_PROGRESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TeamFolderArchiveLaunch:
    def __init__(self) -> None: ...
    
    @staticmethod
    def asyncJobId(s: str) -> 'TeamFolderArchiveLaunch': ...
    
    @staticmethod
    def complete(teamFolderMetadata: 'TeamFolderMetadata') -> 'TeamFolderArchiveLaunch': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAsyncJobIdValue(self) -> str: ...
    
    def getCompleteValue(self) -> 'TeamFolderMetadata': ...
    
    def hashCode(self) -> int: ...
    
    def isAsyncJobId(self) -> bool: ...
    
    def isComplete(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ASYNC_JOB_ID = 'ASYNC_JOB_ID'
        COMPLETE = 'COMPLETE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TeamFolderCreateError:
    FOLDER_NAME_ALREADY_USED = '"folder_name_already_used"'
    FOLDER_NAME_RESERVED = '"folder_name_reserved"'
    INVALID_FOLDER_NAME = '"invalid_folder_name"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getSyncSettingsErrorValue(self) -> com.dropbox.core.v2.files.SyncSettingsError: ...
    
    def hashCode(self) -> int: ...
    
    def isFolderNameAlreadyUsed(self) -> bool: ...
    
    def isFolderNameReserved(self) -> bool: ...
    
    def isInvalidFolderName(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isSyncSettingsError(self) -> bool: ...
    
    @staticmethod
    def syncSettingsError(c: com.dropbox.core.v2.files.SyncSettingsError) -> 'TeamFolderCreateError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        FOLDER_NAME_ALREADY_USED = 'FOLDER_NAME_ALREADY_USED'
        FOLDER_NAME_RESERVED = 'FOLDER_NAME_RESERVED'
        INVALID_FOLDER_NAME = 'INVALID_FOLDER_NAME'
        OTHER = 'OTHER'
        SYNC_SETTINGS_ERROR = 'SYNC_SETTINGS_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TeamFolderCreateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TeamFolderCreateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', teamFolderCreateError: TeamFolderCreateError) -> None: ...
    
    
class TeamFolderGetInfoItem:
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getIdNotFoundValue(self) -> str: ...
    
    def getTeamFolderMetadataValue(self) -> 'TeamFolderMetadata': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def idNotFound(s: str) -> 'TeamFolderGetInfoItem': ...
    
    def isIdNotFound(self) -> bool: ...
    
    def isTeamFolderMetadata(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def teamFolderMetadata(teamFolderMetadata: 'TeamFolderMetadata') -> 'TeamFolderGetInfoItem': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ID_NOT_FOUND = 'ID_NOT_FOUND'
        TEAM_FOLDER_METADATA = 'TEAM_FOLDER_METADATA'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TeamFolderInvalidStatusError(java.lang.Enum):
    ACTIVE = 'ACTIVE'
    ARCHIVED = 'ARCHIVED'
    ARCHIVE_IN_PROGRESS = 'ARCHIVE_IN_PROGRESS'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'TeamFolderInvalidStatusError': ...
    
    @staticmethod
    def values() -> typing.List['TeamFolderInvalidStatusError']: ...
    
    
class TeamFolderListContinueError(java.lang.Enum):
    INVALID_CURSOR = 'INVALID_CURSOR'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'TeamFolderListContinueError': ...
    
    @staticmethod
    def values() -> typing.List['TeamFolderListContinueError']: ...
    
    
class TeamFolderListContinueErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TeamFolderListContinueError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', teamFolderListContinueError: TeamFolderListContinueError) -> None: ...
    
    
class TeamFolderListError:
    def __init__(self, teamFolderAccessError: TeamFolderAccessError) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessError(self) -> TeamFolderAccessError: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class TeamFolderListErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TeamFolderListError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', teamFolderListError: TeamFolderListError) -> None: ...
    
    
class TeamFolderListResult:
    def __init__(self, t: typing.List['TeamFolderMetadata'], s: str, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getHasMore(self) -> bool: ...
    
    def getTeamFolders(self) -> typing.List['TeamFolderMetadata']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class TeamFolderMetadata:
    def __init__(self, s: str, s2: str, teamFolderStatus: 'TeamFolderStatus', b: bool, c: com.dropbox.core.v2.files.SyncSetting, t: typing.List[com.dropbox.core.v2.files.ContentSyncSetting]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getContentSyncSettings(self) -> typing.List[com.dropbox.core.v2.files.ContentSyncSetting]: ...
    
    def getIsTeamSharedDropbox(self) -> bool: ...
    
    def getName(self) -> str: ...
    
    def getStatus(self) -> 'TeamFolderStatus': ...
    
    def getSyncSetting(self) -> com.dropbox.core.v2.files.SyncSetting: ...
    
    def getTeamFolderId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class TeamFolderPermanentlyDeleteError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(teamFolderAccessError: TeamFolderAccessError) -> 'TeamFolderPermanentlyDeleteError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> TeamFolderAccessError: ...
    
    def getStatusErrorValue(self) -> TeamFolderInvalidStatusError: ...
    
    def getTeamSharedDropboxErrorValue(self) -> 'TeamFolderTeamSharedDropboxError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isStatusError(self) -> bool: ...
    
    def isTeamSharedDropboxError(self) -> bool: ...
    
    @staticmethod
    def statusError(teamFolderInvalidStatusError: TeamFolderInvalidStatusError) -> 'TeamFolderPermanentlyDeleteError': ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def teamSharedDropboxError(teamFolderTeamSharedDropboxError: 'TeamFolderTeamSharedDropboxError') -> 'TeamFolderPermanentlyDeleteError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        OTHER = 'OTHER'
        STATUS_ERROR = 'STATUS_ERROR'
        TEAM_SHARED_DROPBOX_ERROR = 'TEAM_SHARED_DROPBOX_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TeamFolderPermanentlyDeleteErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TeamFolderPermanentlyDeleteError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', teamFolderPermanentlyDeleteError: TeamFolderPermanentlyDeleteError) -> None: ...
    
    
class TeamFolderRenameError:
    FOLDER_NAME_ALREADY_USED = '"folder_name_already_used"'
    FOLDER_NAME_RESERVED = '"folder_name_reserved"'
    INVALID_FOLDER_NAME = '"invalid_folder_name"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(teamFolderAccessError: TeamFolderAccessError) -> 'TeamFolderRenameError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> TeamFolderAccessError: ...
    
    def getStatusErrorValue(self) -> TeamFolderInvalidStatusError: ...
    
    def getTeamSharedDropboxErrorValue(self) -> 'TeamFolderTeamSharedDropboxError': ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isFolderNameAlreadyUsed(self) -> bool: ...
    
    def isFolderNameReserved(self) -> bool: ...
    
    def isInvalidFolderName(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isStatusError(self) -> bool: ...
    
    def isTeamSharedDropboxError(self) -> bool: ...
    
    @staticmethod
    def statusError(teamFolderInvalidStatusError: TeamFolderInvalidStatusError) -> 'TeamFolderRenameError': ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def teamSharedDropboxError(teamFolderTeamSharedDropboxError: 'TeamFolderTeamSharedDropboxError') -> 'TeamFolderRenameError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        FOLDER_NAME_ALREADY_USED = 'FOLDER_NAME_ALREADY_USED'
        FOLDER_NAME_RESERVED = 'FOLDER_NAME_RESERVED'
        INVALID_FOLDER_NAME = 'INVALID_FOLDER_NAME'
        OTHER = 'OTHER'
        STATUS_ERROR = 'STATUS_ERROR'
        TEAM_SHARED_DROPBOX_ERROR = 'TEAM_SHARED_DROPBOX_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TeamFolderRenameErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TeamFolderRenameError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', teamFolderRenameError: TeamFolderRenameError) -> None: ...
    
    
class TeamFolderStatus(java.lang.Enum):
    ACTIVE = 'ACTIVE'
    ARCHIVED = 'ARCHIVED'
    ARCHIVE_IN_PROGRESS = 'ARCHIVE_IN_PROGRESS'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'TeamFolderStatus': ...
    
    @staticmethod
    def values() -> typing.List['TeamFolderStatus']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.team.TeamFolderStatus.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class TeamFolderTeamSharedDropboxError(java.lang.Enum):
    DISALLOWED = 'DISALLOWED'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'TeamFolderTeamSharedDropboxError': ...
    
    @staticmethod
    def values() -> typing.List['TeamFolderTeamSharedDropboxError']: ...
    
    
class TeamFolderUpdateSyncSettingsBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> TeamFolderMetadata: ...
    
    def withContentSyncSettings(self, t: typing.List[com.dropbox.core.v2.files.ContentSyncSettingArg]) -> 'TeamFolderUpdateSyncSettingsBuilder': ...
    
    def withSyncSetting(self, c: com.dropbox.core.v2.files.SyncSettingArg) -> 'TeamFolderUpdateSyncSettingsBuilder': ...
    
    
class TeamFolderUpdateSyncSettingsError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def accessError(teamFolderAccessError: TeamFolderAccessError) -> 'TeamFolderUpdateSyncSettingsError': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccessErrorValue(self) -> TeamFolderAccessError: ...
    
    def getStatusErrorValue(self) -> TeamFolderInvalidStatusError: ...
    
    def getSyncSettingsErrorValue(self) -> com.dropbox.core.v2.files.SyncSettingsError: ...
    
    def getTeamSharedDropboxErrorValue(self) -> TeamFolderTeamSharedDropboxError: ...
    
    def hashCode(self) -> int: ...
    
    def isAccessError(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isStatusError(self) -> bool: ...
    
    def isSyncSettingsError(self) -> bool: ...
    
    def isTeamSharedDropboxError(self) -> bool: ...
    
    @staticmethod
    def statusError(teamFolderInvalidStatusError: TeamFolderInvalidStatusError) -> 'TeamFolderUpdateSyncSettingsError': ...
    
    @staticmethod
    def syncSettingsError(c: com.dropbox.core.v2.files.SyncSettingsError) -> 'TeamFolderUpdateSyncSettingsError': ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def teamSharedDropboxError(teamFolderTeamSharedDropboxError: TeamFolderTeamSharedDropboxError) -> 'TeamFolderUpdateSyncSettingsError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACCESS_ERROR = 'ACCESS_ERROR'
        OTHER = 'OTHER'
        STATUS_ERROR = 'STATUS_ERROR'
        SYNC_SETTINGS_ERROR = 'SYNC_SETTINGS_ERROR'
        TEAM_SHARED_DROPBOX_ERROR = 'TEAM_SHARED_DROPBOX_ERROR'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TeamFolderUpdateSyncSettingsErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TeamFolderUpdateSyncSettingsError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', teamFolderUpdateSyncSettingsError: TeamFolderUpdateSyncSettingsError) -> None: ...
    
    
class TeamGetInfoResult:
    def __init__(self, s: str, s2: str, i: int, i2: int, c: com.dropbox.core.v2.teampolicies.TeamMemberPolicies) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getName(self) -> str: ...
    
    def getNumLicensedUsers(self) -> int: ...
    
    def getNumProvisionedUsers(self) -> int: ...
    
    def getPolicies(self) -> com.dropbox.core.v2.teampolicies.TeamMemberPolicies: ...
    
    def getTeamId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class TeamMemberInfo:
    def __init__(self, teamMemberProfile: 'TeamMemberProfile', adminTier: AdminTier) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getProfile(self) -> 'TeamMemberProfile': ...
    
    def getRole(self) -> AdminTier: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class TeamMemberProfile(MemberProfile):
    def __init__(self, s: str, s2: str, b: bool, teamMemberStatus: 'TeamMemberStatus', c: com.dropbox.core.v2.users.Name, teamMembershipType: 'TeamMembershipType', t: typing.List[str], s3: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccountId(self) -> str: ...
    
    def getEmail(self) -> str: ...
    
    def getEmailVerified(self) -> bool: ...
    
    def getExternalId(self) -> str: ...
    
    def getGroups(self) -> typing.List[str]: ...
    
    def getInvitedOn(self) -> java.util.Date: ...
    
    def getIsDirectoryRestricted(self) -> bool: ...
    
    def getJoinedOn(self) -> java.util.Date: ...
    
    def getMemberFolderId(self) -> str: ...
    
    def getMembershipType(self) -> 'TeamMembershipType': ...
    
    def getName(self) -> com.dropbox.core.v2.users.Name: ...
    
    def getPersistentId(self) -> str: ...
    
    def getProfilePhotoUrl(self) -> str: ...
    
    def getSecondaryEmails(self) -> typing.List[com.dropbox.core.v2.secondaryemails.SecondaryEmail]: ...
    
    def getStatus(self) -> 'TeamMemberStatus': ...
    
    def getSuspendedOn(self) -> java.util.Date: ...
    
    def getTeamMemberId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> MemberProfile: ...
        
        def withAccountId(self, s: str) -> str: ...
        
        def withExternalId(self, s: str) -> str: ...
        
        def withInvitedOn(self, j: java.util.Date) -> str: ...
        
        def withIsDirectoryRestricted(self, b: bool) -> str: ...
        
        def withJoinedOn(self, j: java.util.Date) -> str: ...
        
        def withPersistentId(self, s: str) -> str: ...
        
        def withProfilePhotoUrl(self, s: str) -> str: ...
        
        def withSecondaryEmails(self, t: typing.List[com.dropbox.core.v2.secondaryemails.SecondaryEmail]) -> str: ...
        
        def withSuspendedOn(self, j: java.util.Date) -> str: ...
        
        
    
class TeamMemberStatus:
    ACTIVE = '"active"'
    INVITED = '"invited"'
    SUSPENDED = '"suspended"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getRemovedValue(self) -> RemovedStatus: ...
    
    def hashCode(self) -> int: ...
    
    def isActive(self) -> bool: ...
    
    def isInvited(self) -> bool: ...
    
    def isRemoved(self) -> bool: ...
    
    def isSuspended(self) -> bool: ...
    
    @staticmethod
    def removed(removedStatus: RemovedStatus) -> 'TeamMemberStatus': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ACTIVE = 'ACTIVE'
        INVITED = 'INVITED'
        REMOVED = 'REMOVED'
        SUSPENDED = 'SUSPENDED'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TeamMembershipType(java.lang.Enum):
    FULL = 'FULL'
    LIMITED = 'LIMITED'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'TeamMembershipType': ...
    
    @staticmethod
    def values() -> typing.List['TeamMembershipType']: ...
    
    
class TeamNamespacesListContinueError(java.lang.Enum):
    INVALID_ARG = 'INVALID_ARG'
    INVALID_CURSOR = 'INVALID_CURSOR'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'TeamNamespacesListContinueError': ...
    
    @staticmethod
    def values() -> typing.List['TeamNamespacesListContinueError']: ...
    
    
class TeamNamespacesListContinueErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TeamNamespacesListContinueError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', teamNamespacesListContinueError: TeamNamespacesListContinueError) -> None: ...
    
    
class TeamNamespacesListError(java.lang.Enum):
    INVALID_ARG = 'INVALID_ARG'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'TeamNamespacesListError': ...
    
    @staticmethod
    def values() -> typing.List['TeamNamespacesListError']: ...
    
    
class TeamNamespacesListErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TeamNamespacesListError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', teamNamespacesListError: TeamNamespacesListError) -> None: ...
    
    
class TeamNamespacesListResult:
    def __init__(self, t: typing.List[NamespaceMetadata], s: str, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getHasMore(self) -> bool: ...
    
    def getNamespaces(self) -> typing.List[NamespaceMetadata]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class TeamReportFailureReason(java.lang.Enum):
    MANY_REPORTS_AT_ONCE = 'MANY_REPORTS_AT_ONCE'
    OTHER = 'OTHER'
    TEMPORARY_ERROR = 'TEMPORARY_ERROR'
    TOO_MUCH_DATA = 'TOO_MUCH_DATA'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'TeamReportFailureReason': ...
    
    @staticmethod
    def values() -> typing.List['TeamReportFailureReason']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.team.TeamReportFailureReason.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class TokenGetAuthenticatedAdminError(java.lang.Enum):
    ADMIN_NOT_ACTIVE = 'ADMIN_NOT_ACTIVE'
    MAPPING_NOT_FOUND = 'MAPPING_NOT_FOUND'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'TokenGetAuthenticatedAdminError': ...
    
    @staticmethod
    def values() -> typing.List['TokenGetAuthenticatedAdminError']: ...
    
    
class TokenGetAuthenticatedAdminErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TokenGetAuthenticatedAdminError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', tokenGetAuthenticatedAdminError: TokenGetAuthenticatedAdminError) -> None: ...
    
    
class TokenGetAuthenticatedAdminResult:
    def __init__(self, teamMemberProfile: TeamMemberProfile) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAdminProfile(self) -> TeamMemberProfile: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UploadApiRateLimitValue:
    OTHER = '"other"'
    UNLIMITED = '"unlimited"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLimitValue(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def isLimit(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isUnlimited(self) -> bool: ...
    
    @staticmethod
    def limit(i: int) -> 'UploadApiRateLimitValue': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        LIMIT = 'LIMIT'
        OTHER = 'OTHER'
        UNLIMITED = 'UNLIMITED'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UserAddResult:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getInvalidUserValue(self) -> 'UserSelectorArg': ...
    
    def getPlaceholderUserValue(self) -> 'UserSelectorArg': ...
    
    def getSuccessValue(self) -> 'UserSecondaryEmailsResult': ...
    
    def getUnverifiedValue(self) -> 'UserSelectorArg': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def invalidUser(userSelectorArg: 'UserSelectorArg') -> 'UserAddResult': ...
    
    def isInvalidUser(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPlaceholderUser(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    def isUnverified(self) -> bool: ...
    
    @staticmethod
    def placeholderUser(userSelectorArg: 'UserSelectorArg') -> 'UserAddResult': ...
    
    @staticmethod
    def success(userSecondaryEmailsResult: 'UserSecondaryEmailsResult') -> 'UserAddResult': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    @staticmethod
    def unverified(userSelectorArg: 'UserSelectorArg') -> 'UserAddResult': ...
    
    
    class Tag:
        INVALID_USER = 'INVALID_USER'
        OTHER = 'OTHER'
        PLACEHOLDER_USER = 'PLACEHOLDER_USER'
        SUCCESS = 'SUCCESS'
        UNVERIFIED = 'UNVERIFIED'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UserCustomQuotaArg:
    def __init__(self, userSelectorArg: 'UserSelectorArg', i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getQuotaGb(self) -> int: ...
    
    def getUser(self) -> 'UserSelectorArg': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UserCustomQuotaResult:
    def __init__(self, userSelectorArg: 'UserSelectorArg') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getQuotaGb(self) -> int: ...
    
    def getUser(self) -> 'UserSelectorArg': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UserDeleteEmailsResult:
    def __init__(self, userSelectorArg: 'UserSelectorArg', t: typing.List[DeleteSecondaryEmailResult]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getResults(self) -> typing.List[DeleteSecondaryEmailResult]: ...
    
    def getUser(self) -> 'UserSelectorArg': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UserDeleteResult:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getInvalidUserValue(self) -> 'UserSelectorArg': ...
    
    def getSuccessValue(self) -> UserDeleteEmailsResult: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def invalidUser(userSelectorArg: 'UserSelectorArg') -> 'UserDeleteResult': ...
    
    def isInvalidUser(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def success(userDeleteEmailsResult: UserDeleteEmailsResult) -> 'UserDeleteResult': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        INVALID_USER = 'INVALID_USER'
        OTHER = 'OTHER'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UserResendEmailsResult:
    def __init__(self, userSelectorArg: 'UserSelectorArg', t: typing.List[ResendSecondaryEmailResult]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getResults(self) -> typing.List[ResendSecondaryEmailResult]: ...
    
    def getUser(self) -> 'UserSelectorArg': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UserResendResult:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getInvalidUserValue(self) -> 'UserSelectorArg': ...
    
    def getSuccessValue(self) -> UserResendEmailsResult: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def invalidUser(userSelectorArg: 'UserSelectorArg') -> 'UserResendResult': ...
    
    def isInvalidUser(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isSuccess(self) -> bool: ...
    
    @staticmethod
    def success(userResendEmailsResult: UserResendEmailsResult) -> 'UserResendResult': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        INVALID_USER = 'INVALID_USER'
        OTHER = 'OTHER'
        SUCCESS = 'SUCCESS'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UserSecondaryEmailsArg:
    def __init__(self, userSelectorArg: 'UserSelectorArg', t: typing.List[str]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getSecondaryEmails(self) -> typing.List[str]: ...
    
    def getUser(self) -> 'UserSelectorArg': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UserSecondaryEmailsResult:
    def __init__(self, userSelectorArg: 'UserSelectorArg', t: typing.List[AddSecondaryEmailResult]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getResults(self) -> typing.List[AddSecondaryEmailResult]: ...
    
    def getUser(self) -> 'UserSelectorArg': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UserSelectorArg:
    def __init__(self) -> None: ...
    
    @staticmethod
    def email(s: str) -> 'UserSelectorArg': ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def externalId(s: str) -> 'UserSelectorArg': ...
    
    def getEmailValue(self) -> str: ...
    
    def getExternalIdValue(self) -> str: ...
    
    def getTeamMemberIdValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isEmail(self) -> bool: ...
    
    def isExternalId(self) -> bool: ...
    
    def isTeamMemberId(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def teamMemberId(s: str) -> 'UserSelectorArg': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        EMAIL = 'EMAIL'
        EXTERNAL_ID = 'EXTERNAL_ID'
        TEAM_MEMBER_ID = 'TEAM_MEMBER_ID'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
