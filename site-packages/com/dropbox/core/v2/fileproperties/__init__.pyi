import typing
import com.dropbox.core.v2
import java.lang


class AddPropertiesArg:
    def __init__(self, s: str, t: typing.List['PropertyGroup']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPath(self) -> str: ...
    
    def getPropertyGroups(self) -> typing.List['PropertyGroup']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.AddPropertiesArg.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class AddPropertiesError:
    DOES_NOT_FIT_TEMPLATE = '"does_not_fit_template"'
    DUPLICATE_PROPERTY_GROUPS = '"duplicate_property_groups"'
    OTHER = '"other"'
    PROPERTY_FIELD_TOO_LARGE = '"property_field_too_large"'
    PROPERTY_GROUP_ALREADY_EXISTS = '"property_group_already_exists"'
    RESTRICTED_CONTENT = '"restricted_content"'
    UNSUPPORTED_FOLDER = '"unsupported_folder"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def getTemplateNotFoundValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isDoesNotFitTemplate(self) -> bool: ...
    
    def isDuplicatePropertyGroups(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isPropertyFieldTooLarge(self) -> bool: ...
    
    def isPropertyGroupAlreadyExists(self) -> bool: ...
    
    def isRestrictedContent(self) -> bool: ...
    
    def isTemplateNotFound(self) -> bool: ...
    
    def isUnsupportedFolder(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'AddPropertiesError': ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def templateNotFound(s: str) -> 'AddPropertiesError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.AddPropertiesError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        DOES_NOT_FIT_TEMPLATE = 'DOES_NOT_FIT_TEMPLATE'
        DUPLICATE_PROPERTY_GROUPS = 'DUPLICATE_PROPERTY_GROUPS'
        OTHER = 'OTHER'
        PATH = 'PATH'
        PROPERTY_FIELD_TOO_LARGE = 'PROPERTY_FIELD_TOO_LARGE'
        PROPERTY_GROUP_ALREADY_EXISTS = 'PROPERTY_GROUP_ALREADY_EXISTS'
        RESTRICTED_CONTENT = 'RESTRICTED_CONTENT'
        TEMPLATE_NOT_FOUND = 'TEMPLATE_NOT_FOUND'
        UNSUPPORTED_FOLDER = 'UNSUPPORTED_FOLDER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class AddPropertiesErrorException('com.dropbox.core.DbxApiException'):
    errorValue: AddPropertiesError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', addPropertiesError: AddPropertiesError) -> None: ...
    
    
class PropertyGroupTemplate:
    def __init__(self, s: str, s2: str, t: typing.List['PropertyFieldTemplate']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDescription(self) -> str: ...
    
    def getFields(self) -> typing.List['PropertyFieldTemplate']: ...
    
    def getName(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class AddTemplateArg(PropertyGroupTemplate):
    def __init__(self, s: str, s2: str, t: typing.List['PropertyFieldTemplate']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDescription(self) -> str: ...
    
    def getFields(self) -> typing.List['PropertyFieldTemplate']: ...
    
    def getName(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.AddTemplateArg.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class AddTemplateResult:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getTemplateId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.AddTemplateResult.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class DbxTeamFilePropertiesRequests:
    def __init__(self, c: com.dropbox.core.v2.DbxRawClientV2) -> None: ...
    
    def templatesAddForTeam(self, s: str, s2: str, t: typing.List['PropertyFieldTemplate']) -> AddTemplateResult: ...
    
    def templatesGetForTeam(self, s: str) -> 'GetTemplateResult': ...
    
    def templatesListForTeam(self) -> 'ListTemplateResult': ...
    
    def templatesRemoveForTeam(self, s: str) -> None: ...
    
    def templatesUpdateForTeam(self, s: str) -> 'UpdateTemplateResult': ...
    
    def templatesUpdateForTeamBuilder(self, s: str) -> 'TemplatesUpdateForTeamBuilder': ...
    
    
class DbxUserFilePropertiesRequests:
    def __init__(self, c: com.dropbox.core.v2.DbxRawClientV2) -> None: ...
    
    def propertiesAdd(self, s: str, t: typing.List['PropertyGroup']) -> None: ...
    
    def propertiesOverwrite(self, s: str, t: typing.List['PropertyGroup']) -> None: ...
    
    def propertiesRemove(self, s: str, t: typing.List[str]) -> None: ...
    
    def propertiesSearch(self, t: typing.List['PropertiesSearchQuery']) -> 'PropertiesSearchResult': ...
    
    def propertiesSearchContinue(self, s: str) -> 'PropertiesSearchResult': ...
    
    def propertiesUpdate(self, s: str, t: typing.List['PropertyGroupUpdate']) -> None: ...
    
    def templatesAddForUser(self, s: str, s2: str, t: typing.List['PropertyFieldTemplate']) -> AddTemplateResult: ...
    
    def templatesGetForUser(self, s: str) -> 'GetTemplateResult': ...
    
    def templatesListForUser(self) -> 'ListTemplateResult': ...
    
    def templatesRemoveForUser(self, s: str) -> None: ...
    
    def templatesUpdateForUser(self, s: str) -> 'UpdateTemplateResult': ...
    
    def templatesUpdateForUserBuilder(self, s: str) -> 'TemplatesUpdateForUserBuilder': ...
    
    
class GetTemplateArg:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getTemplateId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.GetTemplateArg.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class GetTemplateResult(PropertyGroupTemplate):
    def __init__(self, s: str, s2: str, t: typing.List['PropertyFieldTemplate']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDescription(self) -> str: ...
    
    def getFields(self) -> typing.List['PropertyFieldTemplate']: ...
    
    def getName(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.GetTemplateResult.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class InvalidPropertyGroupError:
    DOES_NOT_FIT_TEMPLATE = '"does_not_fit_template"'
    DUPLICATE_PROPERTY_GROUPS = '"duplicate_property_groups"'
    OTHER = '"other"'
    PROPERTY_FIELD_TOO_LARGE = '"property_field_too_large"'
    RESTRICTED_CONTENT = '"restricted_content"'
    UNSUPPORTED_FOLDER = '"unsupported_folder"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> 'LookupError': ...
    
    def getTemplateNotFoundValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isDoesNotFitTemplate(self) -> bool: ...
    
    def isDuplicatePropertyGroups(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isPropertyFieldTooLarge(self) -> bool: ...
    
    def isRestrictedContent(self) -> bool: ...
    
    def isTemplateNotFound(self) -> bool: ...
    
    def isUnsupportedFolder(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: 'LookupError') -> 'InvalidPropertyGroupError': ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def templateNotFound(s: str) -> 'InvalidPropertyGroupError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.InvalidPropertyGroupError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        DOES_NOT_FIT_TEMPLATE = 'DOES_NOT_FIT_TEMPLATE'
        DUPLICATE_PROPERTY_GROUPS = 'DUPLICATE_PROPERTY_GROUPS'
        OTHER = 'OTHER'
        PATH = 'PATH'
        PROPERTY_FIELD_TOO_LARGE = 'PROPERTY_FIELD_TOO_LARGE'
        RESTRICTED_CONTENT = 'RESTRICTED_CONTENT'
        TEMPLATE_NOT_FOUND = 'TEMPLATE_NOT_FOUND'
        UNSUPPORTED_FOLDER = 'UNSUPPORTED_FOLDER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class InvalidPropertyGroupErrorException('com.dropbox.core.DbxApiException'):
    errorValue: InvalidPropertyGroupError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', invalidPropertyGroupError: InvalidPropertyGroupError) -> None: ...
    
    
class ListTemplateResult:
    def __init__(self, t: typing.List[str]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getTemplateIds(self) -> typing.List[str]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.ListTemplateResult.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class LogicalOperator(java.lang.Enum):
    OR_OPERATOR = 'OR_OPERATOR'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LogicalOperator': ...
    
    @staticmethod
    def values() -> typing.List['LogicalOperator']: ...
    
    
class LookUpPropertiesError(java.lang.Enum):
    OTHER = 'OTHER'
    PROPERTY_GROUP_NOT_FOUND = 'PROPERTY_GROUP_NOT_FOUND'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'LookUpPropertiesError': ...
    
    @staticmethod
    def values() -> typing.List['LookUpPropertiesError']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.LookUpPropertiesError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class LookupError:
    NOT_FILE = '"not_file"'
    NOT_FOLDER = '"not_folder"'
    NOT_FOUND = '"not_found"'
    OTHER = '"other"'
    RESTRICTED_CONTENT = '"restricted_content"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getMalformedPathValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isMalformedPath(self) -> bool: ...
    
    def isNotFile(self) -> bool: ...
    
    def isNotFolder(self) -> bool: ...
    
    def isNotFound(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isRestrictedContent(self) -> bool: ...
    
    @staticmethod
    def malformedPath(s: str) -> 'LookupError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        MALFORMED_PATH = 'MALFORMED_PATH'
        NOT_FILE = 'NOT_FILE'
        NOT_FOLDER = 'NOT_FOLDER'
        NOT_FOUND = 'NOT_FOUND'
        OTHER = 'OTHER'
        RESTRICTED_CONTENT = 'RESTRICTED_CONTENT'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ModifyTemplateError:
    CONFLICTING_PROPERTY_NAMES = '"conflicting_property_names"'
    OTHER = '"other"'
    RESTRICTED_CONTENT = '"restricted_content"'
    TEMPLATE_ATTRIBUTE_TOO_LARGE = '"template_attribute_too_large"'
    TOO_MANY_PROPERTIES = '"too_many_properties"'
    TOO_MANY_TEMPLATES = '"too_many_templates"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getTemplateNotFoundValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isConflictingPropertyNames(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isRestrictedContent(self) -> bool: ...
    
    def isTemplateAttributeTooLarge(self) -> bool: ...
    
    def isTemplateNotFound(self) -> bool: ...
    
    def isTooManyProperties(self) -> bool: ...
    
    def isTooManyTemplates(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def templateNotFound(s: str) -> 'ModifyTemplateError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.ModifyTemplateError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        CONFLICTING_PROPERTY_NAMES = 'CONFLICTING_PROPERTY_NAMES'
        OTHER = 'OTHER'
        RESTRICTED_CONTENT = 'RESTRICTED_CONTENT'
        TEMPLATE_ATTRIBUTE_TOO_LARGE = 'TEMPLATE_ATTRIBUTE_TOO_LARGE'
        TEMPLATE_NOT_FOUND = 'TEMPLATE_NOT_FOUND'
        TOO_MANY_PROPERTIES = 'TOO_MANY_PROPERTIES'
        TOO_MANY_TEMPLATES = 'TOO_MANY_TEMPLATES'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ModifyTemplateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: ModifyTemplateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', modifyTemplateError: ModifyTemplateError) -> None: ...
    
    
class OverwritePropertyGroupArg:
    def __init__(self, s: str, t: typing.List['PropertyGroup']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPath(self) -> str: ...
    
    def getPropertyGroups(self) -> typing.List['PropertyGroup']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.OverwritePropertyGroupArg.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class PropertiesSearchContinueError(java.lang.Enum):
    OTHER = 'OTHER'
    RESET = 'RESET'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'PropertiesSearchContinueError': ...
    
    @staticmethod
    def values() -> typing.List['PropertiesSearchContinueError']: ...
    
    
class PropertiesSearchContinueErrorException('com.dropbox.core.DbxApiException'):
    errorValue: PropertiesSearchContinueError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', propertiesSearchContinueError: PropertiesSearchContinueError) -> None: ...
    
    
class PropertiesSearchError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPropertyGroupLookupValue(self) -> LookUpPropertiesError: ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPropertyGroupLookup(self) -> bool: ...
    
    @staticmethod
    def propertyGroupLookup(lookUpPropertiesError: LookUpPropertiesError) -> 'PropertiesSearchError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        OTHER = 'OTHER'
        PROPERTY_GROUP_LOOKUP = 'PROPERTY_GROUP_LOOKUP'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class PropertiesSearchErrorException('com.dropbox.core.DbxApiException'):
    errorValue: PropertiesSearchError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', propertiesSearchError: PropertiesSearchError) -> None: ...
    
    
class PropertiesSearchMatch:
    def __init__(self, s: str, s2: str, b: bool, t: typing.List['PropertyGroup']) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getId(self) -> str: ...
    
    def getIsDeleted(self) -> bool: ...
    
    def getPath(self) -> str: ...
    
    def getPropertyGroups(self) -> typing.List['PropertyGroup']: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class PropertiesSearchMode:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def fieldName(s: str) -> 'PropertiesSearchMode': ...
    
    def getFieldNameValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isFieldName(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        FIELD_NAME = 'FIELD_NAME'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class PropertiesSearchQuery:
    def __init__(self, s: str, propertiesSearchMode: PropertiesSearchMode) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLogicalOperator(self) -> LogicalOperator: ...
    
    def getMode(self) -> PropertiesSearchMode: ...
    
    def getQuery(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class PropertiesSearchResult:
    def __init__(self, t: typing.List[PropertiesSearchMatch]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCursor(self) -> str: ...
    
    def getMatches(self) -> typing.List[PropertiesSearchMatch]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class PropertyField:
    def __init__(self, s: str, s2: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getName(self) -> str: ...
    
    def getValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class PropertyFieldTemplate:
    def __init__(self, s: str, s2: str, propertyType: 'PropertyType') -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getDescription(self) -> str: ...
    
    def getName(self) -> str: ...
    
    def getType(self) -> 'PropertyType': ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class PropertyGroup:
    def __init__(self, s: str, t: typing.List[PropertyField]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getFields(self) -> typing.List[PropertyField]: ...
    
    def getTemplateId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.PropertyGroup.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class PropertyGroupUpdate:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAddOrUpdateFields(self) -> typing.List[PropertyField]: ...
    
    def getRemoveFields(self) -> typing.List[str]: ...
    
    def getTemplateId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'PropertyGroupUpdate': ...
        
        def withAddOrUpdateFields(self, t: typing.List[PropertyField]) -> str: ...
        
        def withRemoveFields(self, t: typing.List[str]) -> str: ...
        
        
    
class PropertyType(java.lang.Enum):
    OTHER = 'OTHER'
    STRING = 'STRING'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'PropertyType': ...
    
    @staticmethod
    def values() -> typing.List['PropertyType']: ...
    
    
class RemovePropertiesArg:
    def __init__(self, s: str, t: typing.List[str]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPath(self) -> str: ...
    
    def getPropertyTemplateIds(self) -> typing.List[str]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.RemovePropertiesArg.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class RemovePropertiesError:
    OTHER = '"other"'
    RESTRICTED_CONTENT = '"restricted_content"'
    UNSUPPORTED_FOLDER = '"unsupported_folder"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> LookupError: ...
    
    def getPropertyGroupLookupValue(self) -> LookUpPropertiesError: ...
    
    def getTemplateNotFoundValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isPropertyGroupLookup(self) -> bool: ...
    
    def isRestrictedContent(self) -> bool: ...
    
    def isTemplateNotFound(self) -> bool: ...
    
    def isUnsupportedFolder(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: LookupError) -> 'RemovePropertiesError': ...
    
    @staticmethod
    def propertyGroupLookup(lookUpPropertiesError: LookUpPropertiesError) -> 'RemovePropertiesError': ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def templateNotFound(s: str) -> 'RemovePropertiesError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.RemovePropertiesError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        OTHER = 'OTHER'
        PATH = 'PATH'
        PROPERTY_GROUP_LOOKUP = 'PROPERTY_GROUP_LOOKUP'
        RESTRICTED_CONTENT = 'RESTRICTED_CONTENT'
        TEMPLATE_NOT_FOUND = 'TEMPLATE_NOT_FOUND'
        UNSUPPORTED_FOLDER = 'UNSUPPORTED_FOLDER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class RemovePropertiesErrorException('com.dropbox.core.DbxApiException'):
    errorValue: RemovePropertiesError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', removePropertiesError: RemovePropertiesError) -> None: ...
    
    
class TemplateError:
    OTHER = '"other"'
    RESTRICTED_CONTENT = '"restricted_content"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getTemplateNotFoundValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isOther(self) -> bool: ...
    
    def isRestrictedContent(self) -> bool: ...
    
    def isTemplateNotFound(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def templateNotFound(s: str) -> 'TemplateError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.TemplateError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        OTHER = 'OTHER'
        RESTRICTED_CONTENT = 'RESTRICTED_CONTENT'
        TEMPLATE_NOT_FOUND = 'TEMPLATE_NOT_FOUND'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TemplateErrorException('com.dropbox.core.DbxApiException'):
    errorValue: TemplateError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', templateError: TemplateError) -> None: ...
    
    
class TemplateFilter:
    FILTER_NONE = '"filter_none"'
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def filterSome(t: typing.List[str]) -> 'TemplateFilter': ...
    
    def getFilterSomeValue(self) -> typing.List[str]: ...
    
    def hashCode(self) -> int: ...
    
    def isFilterNone(self) -> bool: ...
    
    def isFilterSome(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        FILTER_NONE = 'FILTER_NONE'
        FILTER_SOME = 'FILTER_SOME'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TemplateFilterBase:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def filterSome(t: typing.List[str]) -> 'TemplateFilterBase': ...
    
    def getFilterSomeValue(self) -> typing.List[str]: ...
    
    def hashCode(self) -> int: ...
    
    def isFilterSome(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.TemplateFilterBase.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        FILTER_SOME = 'FILTER_SOME'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class TemplatesUpdateForTeamBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'UpdateTemplateResult': ...
    
    def withAddFields(self, t: typing.List[PropertyFieldTemplate]) -> 'TemplatesUpdateForTeamBuilder': ...
    
    def withDescription(self, s: str) -> 'TemplatesUpdateForTeamBuilder': ...
    
    def withName(self, s: str) -> 'TemplatesUpdateForTeamBuilder': ...
    
    
class TemplatesUpdateForUserBuilder:
    def __init__(self) -> None: ...
    
    def start(self) -> 'UpdateTemplateResult': ...
    
    def withAddFields(self, t: typing.List[PropertyFieldTemplate]) -> 'TemplatesUpdateForUserBuilder': ...
    
    def withDescription(self, s: str) -> 'TemplatesUpdateForUserBuilder': ...
    
    def withName(self, s: str) -> 'TemplatesUpdateForUserBuilder': ...
    
    
class UpdatePropertiesArg:
    def __init__(self, s: str, t: typing.List[PropertyGroupUpdate]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPath(self) -> str: ...
    
    def getUpdatePropertyGroups(self) -> typing.List[PropertyGroupUpdate]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.UpdatePropertiesArg.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class UpdatePropertiesError:
    DOES_NOT_FIT_TEMPLATE = '"does_not_fit_template"'
    DUPLICATE_PROPERTY_GROUPS = '"duplicate_property_groups"'
    OTHER = '"other"'
    PROPERTY_FIELD_TOO_LARGE = '"property_field_too_large"'
    RESTRICTED_CONTENT = '"restricted_content"'
    UNSUPPORTED_FOLDER = '"unsupported_folder"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getPathValue(self) -> LookupError: ...
    
    def getPropertyGroupLookupValue(self) -> LookUpPropertiesError: ...
    
    def getTemplateNotFoundValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isDoesNotFitTemplate(self) -> bool: ...
    
    def isDuplicatePropertyGroups(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPath(self) -> bool: ...
    
    def isPropertyFieldTooLarge(self) -> bool: ...
    
    def isPropertyGroupLookup(self) -> bool: ...
    
    def isRestrictedContent(self) -> bool: ...
    
    def isTemplateNotFound(self) -> bool: ...
    
    def isUnsupportedFolder(self) -> bool: ...
    
    @staticmethod
    def path(lookupError: LookupError) -> 'UpdatePropertiesError': ...
    
    @staticmethod
    def propertyGroupLookup(lookUpPropertiesError: LookUpPropertiesError) -> 'UpdatePropertiesError': ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def templateNotFound(s: str) -> 'UpdatePropertiesError': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.UpdatePropertiesError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        DOES_NOT_FIT_TEMPLATE = 'DOES_NOT_FIT_TEMPLATE'
        DUPLICATE_PROPERTY_GROUPS = 'DUPLICATE_PROPERTY_GROUPS'
        OTHER = 'OTHER'
        PATH = 'PATH'
        PROPERTY_FIELD_TOO_LARGE = 'PROPERTY_FIELD_TOO_LARGE'
        PROPERTY_GROUP_LOOKUP = 'PROPERTY_GROUP_LOOKUP'
        RESTRICTED_CONTENT = 'RESTRICTED_CONTENT'
        TEMPLATE_NOT_FOUND = 'TEMPLATE_NOT_FOUND'
        UNSUPPORTED_FOLDER = 'UNSUPPORTED_FOLDER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UpdatePropertiesErrorException('com.dropbox.core.DbxApiException'):
    errorValue: UpdatePropertiesError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', updatePropertiesError: UpdatePropertiesError) -> None: ...
    
    
class UpdateTemplateArg:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAddFields(self) -> typing.List[PropertyFieldTemplate]: ...
    
    def getDescription(self) -> str: ...
    
    def getName(self) -> str: ...
    
    def getTemplateId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'UpdateTemplateArg': ...
        
        def withAddFields(self, t: typing.List[PropertyFieldTemplate]) -> str: ...
        
        def withDescription(self, s: str) -> str: ...
        
        def withName(self, s: str) -> str: ...
        
        
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.UpdateTemplateArg.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class UpdateTemplateResult:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getTemplateId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.fileproperties.UpdateTemplateResult.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
