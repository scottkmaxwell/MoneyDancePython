import typing
import com.dropbox.core.v2
import com.dropbox.core.v2.common
import com.dropbox.core.v2.teamcommon
import com.dropbox.core.v2.teampolicies
import com.dropbox.core.v2.userscommon
import java.lang


class Account:
    def __init__(self, s: str, name: 'Name', s2: str, b: bool, b2: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccountId(self) -> str: ...
    
    def getDisabled(self) -> bool: ...
    
    def getEmail(self) -> str: ...
    
    def getEmailVerified(self) -> bool: ...
    
    def getName(self) -> 'Name': ...
    
    def getProfilePhotoUrl(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class BasicAccount(Account):
    def __init__(self, s: str, name: 'Name', s2: str, b: bool, b2: bool, b3: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccountId(self) -> str: ...
    
    def getDisabled(self) -> bool: ...
    
    def getEmail(self) -> str: ...
    
    def getEmailVerified(self) -> bool: ...
    
    def getIsTeammate(self) -> bool: ...
    
    def getName(self) -> 'Name': ...
    
    def getProfilePhotoUrl(self) -> str: ...
    
    def getTeamMemberId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str, name: 'Name', s2: str, b: bool, b2: bool, b3: bool) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'BasicAccount': ...
        
        def withProfilePhotoUrl(self, s: str) -> str: ...
        
        def withTeamMemberId(self, s: str) -> str: ...
        
        
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.users.BasicAccount.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class DbxUserUsersRequests:
    def __init__(self, c: com.dropbox.core.v2.DbxRawClientV2) -> None: ...
    
    def featuresGetValues(self, t: typing.List['UserFeature']) -> 'UserFeaturesGetValuesBatchResult': ...
    
    def getAccount(self, s: str) -> BasicAccount: ...
    
    def getAccountBatch(self, t: typing.List[str]) -> typing.List[BasicAccount]: ...
    
    def getCurrentAccount(self) -> 'FullAccount': ...
    
    def getSpaceUsage(self) -> 'SpaceUsage': ...
    
    
class FileLockingValue:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def enabled(b: bool) -> 'FileLockingValue': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEnabledValue(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def isEnabled(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ENABLED = 'ENABLED'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class FullAccount(Account):
    def __init__(self, s: str, name: 'Name', s2: str, b: bool, b2: bool, s3: str, s4: str, b3: bool, c: com.dropbox.core.v2.userscommon.AccountType, c2: com.dropbox.core.v2.common.RootInfo) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccountId(self) -> str: ...
    
    def getAccountType(self) -> com.dropbox.core.v2.userscommon.AccountType: ...
    
    def getCountry(self) -> str: ...
    
    def getDisabled(self) -> bool: ...
    
    def getEmail(self) -> str: ...
    
    def getEmailVerified(self) -> bool: ...
    
    def getIsPaired(self) -> bool: ...
    
    def getLocale(self) -> str: ...
    
    def getName(self) -> 'Name': ...
    
    def getProfilePhotoUrl(self) -> str: ...
    
    def getReferralLink(self) -> str: ...
    
    def getRootInfo(self) -> com.dropbox.core.v2.common.RootInfo: ...
    
    def getTeam(self) -> 'FullTeam': ...
    
    def getTeamMemberId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def newBuilder(s: str, name: 'Name', s2: str, b: bool, b2: bool, s3: str, s4: str, b3: bool, c: com.dropbox.core.v2.userscommon.AccountType, c2: com.dropbox.core.v2.common.RootInfo) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Builder:
        def __init__(self) -> None: ...
        
        def build(self) -> 'FullAccount': ...
        
        def withCountry(self, s: str) -> str: ...
        
        def withProfilePhotoUrl(self, s: str) -> str: ...
        
        def withTeam(self, fullTeam: 'FullTeam') -> str: ...
        
        def withTeamMemberId(self, s: str) -> str: ...
        
        
    
class Team:
    def __init__(self, s: str, s2: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getId(self) -> str: ...
    
    def getName(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.users.Team.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class FullTeam(Team):
    def __init__(self, s: str, s2: str, c: com.dropbox.core.v2.teampolicies.TeamSharingPolicies, c2: com.dropbox.core.v2.teampolicies.OfficeAddInPolicy) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getId(self) -> str: ...
    
    def getName(self) -> str: ...
    
    def getOfficeAddinPolicy(self) -> com.dropbox.core.v2.teampolicies.OfficeAddInPolicy: ...
    
    def getSharingPolicies(self) -> com.dropbox.core.v2.teampolicies.TeamSharingPolicies: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class GetAccountArg:
    def __init__(self, s: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccountId(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.users.GetAccountArg.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class GetAccountBatchArg:
    def __init__(self, t: typing.List[str]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccountIds(self) -> typing.List[str]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.users.GetAccountBatchArg.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class GetAccountBatchError:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getNoAccountValue(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def isNoAccount(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    @staticmethod
    def noAccount(s: str) -> 'GetAccountBatchError': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.users.GetAccountBatchError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    class Tag:
        NO_ACCOUNT = 'NO_ACCOUNT'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class GetAccountBatchErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GetAccountBatchError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', getAccountBatchError: GetAccountBatchError) -> None: ...
    
    
class GetAccountError(java.lang.Enum):
    NO_ACCOUNT = 'NO_ACCOUNT'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'GetAccountError': ...
    
    @staticmethod
    def values() -> typing.List['GetAccountError']: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.users.GetAccountError.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class GetAccountErrorException('com.dropbox.core.DbxApiException'):
    errorValue: GetAccountError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', getAccountError: GetAccountError) -> None: ...
    
    
class IndividualSpaceAllocation:
    def __init__(self, i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAllocated(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class Name:
    def __init__(self, s: str, s2: str, s3: str, s4: str, s5: str) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAbbreviatedName(self) -> str: ...
    
    def getDisplayName(self) -> str: ...
    
    def getFamiliarName(self) -> str: ...
    
    def getGivenName(self) -> str: ...
    
    def getSurname(self) -> str: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Serializer:
        INSTANCE = 'com.dropbox.core.v2.users.Name.Serializer'
        
        def __init__(self) -> None: ...
        
        
    
class PaperAsFilesValue:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def enabled(b: bool) -> 'PaperAsFilesValue': ...
    
    def equals(self, o: object) -> bool: ...
    
    def getEnabledValue(self) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def isEnabled(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        ENABLED = 'ENABLED'
        OTHER = 'OTHER'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class SpaceAllocation:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getIndividualValue(self) -> IndividualSpaceAllocation: ...
    
    def getTeamValue(self) -> 'TeamSpaceAllocation': ...
    
    def hashCode(self) -> int: ...
    
    @staticmethod
    def individual(individualSpaceAllocation: IndividualSpaceAllocation) -> 'SpaceAllocation': ...
    
    def isIndividual(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isTeam(self) -> bool: ...
    
    def tag(self) -> str: ...
    
    @staticmethod
    def team(teamSpaceAllocation: 'TeamSpaceAllocation') -> 'SpaceAllocation': ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        INDIVIDUAL = 'INDIVIDUAL'
        OTHER = 'OTHER'
        TEAM = 'TEAM'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class SpaceUsage:
    def __init__(self, i: int, spaceAllocation: SpaceAllocation) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAllocation(self) -> SpaceAllocation: ...
    
    def getUsed(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class TeamSpaceAllocation:
    def __init__(self, i: int, i2: int, i3: int, c: com.dropbox.core.v2.teamcommon.MemberSpaceLimitType, i4: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAllocated(self) -> int: ...
    
    def getUsed(self) -> int: ...
    
    def getUserWithinTeamSpaceAllocated(self) -> int: ...
    
    def getUserWithinTeamSpaceLimitType(self) -> com.dropbox.core.v2.teamcommon.MemberSpaceLimitType: ...
    
    def getUserWithinTeamSpaceUsedCached(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
class UserFeature(java.lang.Enum):
    FILE_LOCKING = 'FILE_LOCKING'
    OTHER = 'OTHER'
    PAPER_AS_FILES = 'PAPER_AS_FILES'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'UserFeature': ...
    
    @staticmethod
    def values() -> typing.List['UserFeature']: ...
    
    
class UserFeatureValue:
    OTHER = '"other"'
    
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def fileLocking(fileLockingValue: FileLockingValue) -> 'UserFeatureValue': ...
    
    def getFileLockingValue(self) -> FileLockingValue: ...
    
    def getPaperAsFilesValue(self) -> PaperAsFilesValue: ...
    
    def hashCode(self) -> int: ...
    
    def isFileLocking(self) -> bool: ...
    
    def isOther(self) -> bool: ...
    
    def isPaperAsFiles(self) -> bool: ...
    
    @staticmethod
    def paperAsFiles(paperAsFilesValue: PaperAsFilesValue) -> 'UserFeatureValue': ...
    
    def tag(self) -> str: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
    class Tag:
        FILE_LOCKING = 'FILE_LOCKING'
        OTHER = 'OTHER'
        PAPER_AS_FILES = 'PAPER_AS_FILES'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class UserFeaturesGetValuesBatchError(java.lang.Enum):
    EMPTY_FEATURES_LIST = 'EMPTY_FEATURES_LIST'
    OTHER = 'OTHER'
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def valueOf(s: str) -> 'UserFeaturesGetValuesBatchError': ...
    
    @staticmethod
    def values() -> typing.List['UserFeaturesGetValuesBatchError']: ...
    
    
class UserFeaturesGetValuesBatchErrorException('com.dropbox.core.DbxApiException'):
    errorValue: UserFeaturesGetValuesBatchError
    
    def __init__(self, s: str, s2: str, c: 'com.dropbox.core.LocalizedText', userFeaturesGetValuesBatchError: UserFeaturesGetValuesBatchError) -> None: ...
    
    
class UserFeaturesGetValuesBatchResult:
    def __init__(self, t: typing.List[UserFeatureValue]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getValues(self) -> typing.List[UserFeatureValue]: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def toStringMultiline(self) -> str: ...
    
    
