import typing
import com.infinitekind.tiksync
import java.io


class MoneydanceSyncableItem(com.infinitekind.tiksync.SyncableItem):
    Companion = 'com.infinitekind.moneydance.model.MoneydanceSyncableItem$Companion'
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    MISC_OBJECT_TYPE = u'misc'
    SECURITY_SUBTYPES_ITEM_ID = u'security_subtypes'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    
    def __init__(self, accountBook: 'AccountBook') -> None: ...
    
    @staticmethod
    def access$getEMPTY_STRING_LIST$cp() -> list: ...
    
    def addParameters(self, t: typing.Dict[str,str]) -> None: ...
    
    def addTags(self, t: typing.Dict[str,str]) -> None: ...
    
    def clearEditingMode(self) -> None: ...
    
    @staticmethod
    def decodeKeywordList(s: str) -> typing.List[str]: ...
    
    def deleteItem(self) -> bool: ...
    
    def doesParameterExist(self, s: str) -> bool: ...
    
    def duplicate(self) -> 'MoneydanceSyncableItem': ...
    
    @staticmethod
    def encodeKeywordList(t: typing.List[str]) -> str: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccountParameter(self, s: str, s2: str, account: 'Account') -> 'Account': ...
    
    def getAddress(self) -> 'AddressBookEntry': ...
    
    def getAddressParameter(self, s: str, s2: str, addressBookEntry: 'AddressBookEntry') -> 'AddressBookEntry': ...
    
    def getBook(self) -> 'AccountBook': ...
    
    def getBooleanParameter(self, s: str) -> bool: ...
    
    def getCurrencyParameter(self, s: str, currencyType: 'CurrencyType') -> 'CurrencyType': ...
    
    def getDoubleParameter(self, s: str, f: float) -> float: ...
    
    def getGroupObject(self) -> 'MoneydanceSyncableItem': ...
    
    def getInfo(self) -> com.infinitekind.tiksync.SyncRecord: ...
    
    def getIntParameter(self, s: str, i: int) -> int: ...
    
    def getKeywords(self) -> typing.List[str]: ...
    
    def getLongParameter(self, s: str) -> int: ...
    
    def getOriginalItem(self) -> 'MoneydanceSyncableItem': ...
    
    def getParameter(self, s: str) -> str: ...
    
    def getParameterCount(self) -> int: ...
    
    def getParameterKeys(self) -> typing.Set[str]: ...
    
    def getPreference(self, s: str, s2: str) -> str: ...
    
    def getPreferenceBoolean(self, s: str) -> bool: ...
    
    def getPreferenceDouble(self, s: str, f: float) -> float: ...
    
    def getPreferenceInt(self, s: str, i: int) -> int: ...
    
    def getPreferenceIntArray(self, s: str) -> typing.List[int]: ...
    
    def getPreferenceLong(self, s: str) -> int: ...
    
    def getPreferenceStringList(self, s: str) -> typing.List[str]: ...
    
    def getPreferenceSublist(self, s: str) -> typing.List[com.infinitekind.tiksync.SyncRecord]: ...
    
    def getPreferenceSubset(self, s: str) -> com.infinitekind.tiksync.SyncRecord: ...
    
    def getShowInSidebar(self) -> bool: ...
    
    def getStringListParameter(self, s: str) -> typing.List[str]: ...
    
    def getSublistParameter(self, s: str) -> typing.List[com.infinitekind.tiksync.SyncRecord]: ...
    
    def getSubsetParameter(self, s: str) -> com.infinitekind.tiksync.SyncRecord: ...
    
    def getSyncInfo(self) -> com.infinitekind.tiksync.SyncRecord: ...
    
    def getSyncItemType(self) -> str: ...
    
    def getSyncTimestamp(self) -> int: ...
    
    def getUUID(self) -> str: ...
    
    def hasBeenSynced(self) -> bool: ...
    
    def hasKeywordSubstring(self, s: str, b: bool) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def isDirty(self) -> bool: ...
    
    def itemWasUpdated(self, c: com.infinitekind.tiksync.SyncRecord) -> None: ...
    
    def itemWillSync(self, c: com.infinitekind.tiksync.SyncRecord) -> None: ...
    
    @staticmethod
    def makeSyncableItem(accountBook: 'AccountBook', c: com.infinitekind.tiksync.SyncRecord) -> 'MoneydanceSyncableItem': ...
    
    def removeParameter(self, s: str) -> None: ...
    
    def setAccountParameter(self, s: str, s2: str, account: 'Account') -> None: ...
    
    def setAddress(self, addressBookEntry: 'AddressBookEntry') -> None: ...
    
    def setAddressParameter(self, s: str, s2: str, addressBookEntry: 'AddressBookEntry') -> None: ...
    
    def setBook(self, accountBook: 'AccountBook') -> None: ...
    
    def setCurrencyParameter(self, s: str, currencyType: 'CurrencyType') -> None: ...
    
    def setDirty(self, b: bool) -> None: ...
    
    def setEditingMode(self) -> None: ...
    
    def setInfo(self, c: com.infinitekind.tiksync.SyncRecord) -> None: ...
    
    def setKeywords(self, t: typing.List[str]) -> None: ...
    
    def setParameter(self, s: str, i: int) -> None: ...
    
    def setParameterNoNotify(self, s: str, s2: str) -> None: ...
    
    def setPreference(self, s: str, i: int) -> None: ...
    
    def setShowInSidebar(self, b: bool) -> None: ...
    
    def syncItem(self) -> bool: ...
    
    
    class WhenMappings:
        $EnumSwitchMapping$0 = "array('i', [0, 1, 2, 3, 0, 4, 5, 6, 0, 0])"
        
        def __init__(self) -> None: ...
        
        
    
class Account(MoneydanceSyncableItem):
    ACCT_KEY_OLD_ID = u'old_id'
    ACCT_KEY_TYPE = u'type'
    Companion = 'com.infinitekind.moneydance.model.Account$Companion'
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    MISC_OBJECT_TYPE = u'misc'
    MONEYBOT_ID_KEY = u'moneybot_id'
    PARAM_INCLUDE_IN_NET_WORTH = u'applies_to_net_worth'
    PARAM_QIF_TXNID = u'qif.txn.lastid'
    PARAM_TAX_RELATED = u'tax_related'
    PARAM_VAT_ACCT = u'vat_acct'
    PARAM_VAT_ACCTID = u'vat_acct_id'
    PARAM_VAT_APPLIES = u'vat_applies'
    PARAM_VAT_PCT = u'vat_pct'
    SECURITY_SUBTYPES_ITEM_ID = u'security_subtypes'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SPLIT_ACCOUNT_ID = -1
    SYNCABLE_TYPE_VALUE = u'acct'
    
    def __init__(self, accountBook: 'AccountBook') -> None: ...
    
    def addSubAccount(self, account: 'Account') -> None: ...
    
    def adjustStartBalance(self, adjust_amount: int) -> None: ...
    
    def balanceIsNegated(self) -> bool: ...
    
    def canDownloadTxns(self) -> bool: ...
    
    def checkedInitialTransfer(self) -> bool: ...
    
    def compareFullPathToAccount(self, account: 'Account') -> int: ...
    
    def compareToAccount(self, account: 'Account') -> int: ...
    
    def downloadedTxnsUpdated(self) -> None: ...
    
    def dumpAccounts(self) -> None: ...
    
    def ensureAccountStructure(self) -> None: ...
    
    def ensureHasSubAccount(self, account: 'Account') -> None: ...
    
    def getAPR(self) -> float: ...
    
    def getAPRPercent(self) -> float: ...
    
    def getAccountByName(self, s: str) -> 'Account': ...
    
    def getAccountDescription(self) -> str: ...
    
    def getAccountIsInactive(self) -> bool: ...
    
    def getAccountName(self) -> str: ...
    
    def getAccountNum(self) -> int: ...
    
    def getAccountOrParentIsInactive(self) -> bool: ...
    
    def getAccountType(self) -> str: ...
    
    def getAcctNum$core(self) -> int: ...
    
    def getAllAccountNames(self) -> typing.List[str]: ...
    
    def getAncestors(self) -> typing.Any: ...
    
    def getAnnualFee(self) -> int: ...
    
    def getBalance(self) -> int: ...
    
    def getBalanceAdjustment(self) -> int: ...
    
    def getBalanceHasChanged(self) -> bool: ...
    
    def getBankAccountNumber(self) -> str: ...
    
    def getBankName(self) -> str: ...
    
    def getBankingFI(self) -> 'OnlineService': ...
    
    def getBankingServices(self) -> typing.List['OnlineServiceLink']: ...
    
    def getBillPayFI(self) -> 'OnlineService': ...
    
    def getBondType(self) -> int: ...
    
    def getBroker(self) -> str: ...
    
    def getBrokerPhone(self) -> str: ...
    
    def getCalcPmt(self) -> bool: ...
    
    def getCardExpirationMonth(self) -> int: ...
    
    def getCardExpirationYear(self) -> int: ...
    
    def getCardNumber(self) -> str: ...
    
    def getCheckNumSettings(self) -> 'CheckNumSettings': ...
    
    def getCheckNumTags(self, s: str) -> typing.List[str]: ...
    
    def getClearedBalance(self) -> int: ...
    
    def getComment(self) -> str: ...
    
    def getCompounding(self) -> 'CompoundingType': ...
    
    def getConfirmedBalance(self) -> int: ...
    
    def getCreationDate(self) -> int: ...
    
    def getCreationDateInt(self) -> int: ...
    
    def getCreditLimit(self) -> int: ...
    
    def getCurrencyChoice(self) -> str: ...
    
    def getCurrencyType(self) -> 'CurrencyType': ...
    
    def getCurrentBalance(self) -> int: ...
    
    def getDebtPaymentAmount(self) -> int: ...
    
    def getDebtPaymentProportion(self) -> float: ...
    
    def getDebtPaymentSpec(self) -> str: ...
    
    def getDefaultAccount(self, acctFilter: 'AcctFilter', s: str) -> 'Account': ...
    
    def getDefaultCategory(self) -> 'Account': ...
    
    def getDefaultFeeCategory(self) -> 'Account': ...
    
    def getDefaultTransferAccount(self) -> 'Account': ...
    
    def getDepth(self) -> int: ...
    
    def getDividend(self) -> int: ...
    
    def getDownloadedTxns(self) -> 'OnlineTxnList': ...
    
    def getEscrow(self) -> bool: ...
    
    def getEscrowAccount(self) -> 'Account': ...
    
    def getEscrowPayment(self) -> int: ...
    
    def getExchange(self) -> str: ...
    
    def getFaceValue(self) -> int: ...
    
    def getFixedMonthlyPaymentAmount(self) -> int: ...
    
    def getFullAccountName(self) -> str: ...
    
    def getHideOnHomePage(self) -> bool: ...
    
    def getIncludeInNetWorth(self) -> bool: ...
    
    def getIndentedName(self) -> str: ...
    
    def getInitialPrincipal(self) -> int: ...
    
    def getInitialTransfer(self) -> 'AbstractTxn': ...
    
    def getInstitutionName(self) -> str: ...
    
    def getInterestAccount(self) -> 'Account': ...
    
    def getInterestRate(self) -> float: ...
    
    def getInvestAccountNumber(self) -> str: ...
    
    def getInvstCommissionAcct(self) -> 'Account': ...
    
    def getMaturity(self) -> int: ...
    
    def getMonth(self) -> int: ...
    
    def getNextCheckNumber(self) -> int: ...
    
    def getNextCheckNumberLong(self) -> int: ...
    
    def getNumPayments(self) -> int: ...
    
    def getNumYears(self) -> int: ...
    
    def getOFXAccountKey(self) -> str: ...
    
    def getOFXAccountMsgType(self) -> int: ...
    
    def getOFXAccountNumber(self) -> str: ...
    
    def getOFXAccountType(self) -> str: ...
    
    def getOFXBankID(self) -> str: ...
    
    def getOFXBillPayAccountNumber(self) -> str: ...
    
    def getOFXBillPayAccountType(self) -> str: ...
    
    def getOFXBillPayBankID(self) -> str: ...
    
    def getOFXBranchID(self) -> str: ...
    
    def getOFXBrokerID(self) -> str: ...
    
    def getOnlineIDForServiceID(self, s: str) -> str: ...
    
    def getOnlinePayees(self) -> 'OnlinePayeeList': ...
    
    def getOnlinePayments(self) -> 'OnlinePaymentList': ...
    
    def getOptionPrice(self) -> float: ...
    
    def getParentAccount(self) -> 'Account': ...
    
    def getParentAtDepth(self, i: int) -> 'Account': ...
    
    def getPath(self) -> typing.List['Account']: ...
    
    def getPaymentSchedule(self) -> 'PaymentSchedule': ...
    
    def getPaymentsPerYear(self) -> int: ...
    
    def getPermanentAPR(self) -> float: ...
    
    def getPoints(self) -> float: ...
    
    def getPreferredSortAscending(self, b: bool) -> bool: ...
    
    def getPreferredSortOrder(self, i: int) -> int: ...
    
    def getPreferredTwoLines(self, b: bool) -> bool: ...
    
    def getPut(self) -> bool: ...
    
    def getRateChangeDate(self) -> int: ...
    
    def getReconcilingBalance(self) -> int: ...
    
    def getRecursiveBalance(self) -> int: ...
    
    def getRecursiveClearedBalance(self) -> int: ...
    
    def getRecursiveCurrentBalance(self) -> int: ...
    
    def getRecursiveReconcilingBalance(self) -> int: ...
    
    def getRecursiveStartBalance(self) -> int: ...
    
    def getRecursiveUserBalance(self) -> int: ...
    
    def getRecursiveUserClearedBalance(self) -> int: ...
    
    def getRecursiveUserCurrentBalance(self) -> int: ...
    
    def getRecursiveUserReconcilingBalance(self) -> int: ...
    
    def getRecursiveUserStartBalance(self) -> int: ...
    
    def getReminder(self) -> bool: ...
    
    def getRootAccount(self) -> 'Account': ...
    
    def getSecuritySubType(self) -> str: ...
    
    def getSecurityType(self) -> 'SecurityType': ...
    
    def getStartBalance(self) -> int: ...
    
    def getStrikePrice(self) -> int: ...
    
    def getSubAccount(self, i: int) -> 'Account': ...
    
    def getSubAccountCount(self) -> int: ...
    
    def getSubAccounts(self) -> typing.List['Account']: ...
    
    def getSyncItemType(self) -> str: ...
    
    def getTaxCategory(self) -> str: ...
    
    def getTxnCount(self) -> int: ...
    
    def getUnadjustedStartBalance(self) -> int: ...
    
    def getUnconfirmedTxnCount(self) -> int: ...
    
    def getUserBalance(self) -> int: ...
    
    def getUserClearedBalance(self) -> int: ...
    
    def getUserConfirmedBalance(self) -> int: ...
    
    def getUserCurrentBalance(self) -> int: ...
    
    def getUserReconcilingBalance(self) -> int: ...
    
    def getUserStartBalance(self) -> int: ...
    
    def getUserUnadjustedStartBalance(self) -> int: ...
    
    def getUsesAverageCost(self) -> bool: ...
    
    def hasExpiringRate(self) -> bool: ...
    
    def indexOf(self, account: 'Account') -> int: ...
    
    def isAccountNetWorthEligible(self) -> bool: ...
    
    def isAncestorOf(self, account: 'Account') -> bool: ...
    
    def isDeductible(self) -> bool: ...
    
    def isDescendantOf(self, account: 'Account') -> bool: ...
    
    def isDirty(self) -> bool: ...
    
    def isLeafNode(self) -> bool: ...
    
    def isOnlineBankingCandidate(self) -> bool: ...
    
    def isOnlineBillpayCandidate(self) -> bool: ...
    
    def isOnlineEnabled(self) -> bool: ...
    
    def isRegisterAccount(self) -> bool: ...
    
    def isTaxRelated(self) -> bool: ...
    
    def isTaxable(self) -> bool: ...
    
    def itemWasUpdated(self) -> None: ...
    
    def itemWillSync(self) -> None: ...
    
    @staticmethod
    def makeAccount(accountBook: 'AccountBook', s: str, account: 'Account') -> 'Account': ...
    
    def markAsGhostAccount(self) -> None: ...
    
    def migrateFromOldDownloadedTxns(self) -> 'OnlineTxnList': ...
    
    def notifyAccountModified(self) -> None: ...
    
    def recordStartingBalances$core(self, t: typing.Dict['Account','Balances']) -> None: ...
    
    def removeAllSubAccounts(self) -> None: ...
    
    def removeSubAccount(self, account: 'Account', b: bool) -> None: ...
    
    def resetDirtyFlags$core(self) -> None: ...
    
    def saveBalances$core(self, balances: 'Balances') -> bool: ...
    
    def setAPR(self, f: float) -> None: ...
    
    def setAPRPercent(self, f: float) -> None: ...
    
    def setAccountDescription(self, s: str) -> None: ...
    
    def setAccountIsInactive(self, b: bool) -> None: ...
    
    def setAccountName(self, s: str) -> None: ...
    
    def setAccountType(self, s: str) -> None: ...
    
    def setAcctNum$core(self, i: int) -> None: ...
    
    def setAnnualFee(self, i: int) -> None: ...
    
    def setBalanceAdjustment(self, i: int) -> None: ...
    
    def setBalanceHasChanged(self, b: bool) -> None: ...
    
    def setBankAccountNumber(self, s: str) -> None: ...
    
    def setBankName(self, s: str) -> None: ...
    
    def setBankingFI(self, onlineService: 'OnlineService') -> None: ...
    
    def setBillPayFI(self, onlineService: 'OnlineService') -> None: ...
    
    def setBondType(self, i: int) -> None: ...
    
    def setBroker(self, s: str) -> None: ...
    
    def setBrokerPhone(self, s: str) -> None: ...
    
    def setCalcPmt(self, b: bool) -> None: ...
    
    def setCardExpirationMonth(self, i: int) -> None: ...
    
    def setCardExpirationYear(self, i: int) -> None: ...
    
    def setCardNumber(self, s: str) -> None: ...
    
    def setCheckNumSettings(self, checkNumSettings: 'CheckNumSettings') -> None: ...
    
    def setCheckNumTags(self, t: typing.List[str]) -> None: ...
    
    def setCheckedInitialTransfer(self) -> None: ...
    
    def setComment(self, s: str) -> None: ...
    
    def setCompounding(self, compoundingType: 'CompoundingType') -> None: ...
    
    def setCreationDate(self, i: int) -> None: ...
    
    def setCreationDateInt(self, i: int) -> None: ...
    
    def setCreditLimit(self, i: int) -> None: ...
    
    def setCurrencyChoice(self, s: str) -> None: ...
    
    def setCurrencyType(self, currencyType: 'CurrencyType') -> None: ...
    
    def setDebtPaymentAmount(self, i: int) -> None: ...
    
    def setDebtPaymentProportion(self, f: float) -> None: ...
    
    def setDebtPaymentSpec(self, s: str) -> None: ...
    
    def setDeductible(self, b: bool) -> None: ...
    
    def setDefaultAccount(self, s: str, account: 'Account') -> None: ...
    
    def setDefaultCategory(self, account: 'Account') -> None: ...
    
    def setDefaultFeeCategory(self, account: 'Account') -> None: ...
    
    def setDefaultTransferAccount(self, account: 'Account') -> None: ...
    
    def setDirty(self, b: bool) -> None: ...
    
    def setDirtyFlag(self) -> None: ...
    
    def setDividend(self, i: int) -> None: ...
    
    def setEscrow(self, b: bool) -> None: ...
    
    def setEscrowAccount(self, account: 'Account') -> None: ...
    
    def setEscrowPayment(self, i: int) -> None: ...
    
    def setExchange(self, s: str) -> None: ...
    
    def setFaceValue(self, i: int) -> None: ...
    
    def setFixedMonthlyPaymentAmount(self, i: int) -> None: ...
    
    def setHasExpiringRate(self, b: bool) -> None: ...
    
    def setHideOnHomePage(self, b: bool) -> None: ...
    
    def setIncludeInNetWorth(self, b: bool) -> None: ...
    
    def setInitialPrincipal(self, i: int) -> None: ...
    
    def setInitialTransfer(self, abstractTxn: 'AbstractTxn') -> None: ...
    
    def setInstitutionName(self, s: str) -> None: ...
    
    def setInterestAccount(self, account: 'Account') -> None: ...
    
    def setInterestRate(self, f: float) -> None: ...
    
    def setInvestAccountNumber(self, s: str) -> None: ...
    
    def setMaturity(self, i: int) -> None: ...
    
    def setMonth(self, i: int) -> None: ...
    
    def setNumPayments(self, i: int) -> None: ...
    
    def setNumYears(self, i: int) -> None: ...
    
    def setOFXAccountKey(self, s: str) -> None: ...
    
    def setOFXAccountMsgType(self, i: int) -> None: ...
    
    def setOFXAccountNumber(self, s: str) -> None: ...
    
    def setOFXAccountType(self, s: str) -> None: ...
    
    def setOFXBankID(self, s: str) -> None: ...
    
    def setOFXBillPayAccountNumber(self, s: str) -> None: ...
    
    def setOFXBillPayAccountType(self, s: str) -> None: ...
    
    def setOFXBillPayBankID(self, s: str) -> None: ...
    
    def setOFXBranchID(self, s: str) -> None: ...
    
    def setOFXBrokerID(self, s: str) -> None: ...
    
    def setOnlineIDForServiceID(self, s: str, s2: str) -> None: ...
    
    def setOnlinePayees(self, onlinePayeeList: 'OnlinePayeeList') -> None: ...
    
    def setOnlinePayments(self, onlinePaymentList: 'OnlinePaymentList') -> None: ...
    
    def setOptionPrice(self, f: float) -> None: ...
    
    def setParentAccount(self, account: 'Account') -> None: ...
    
    def setPaymentsPerYear(self, i: int) -> None: ...
    
    def setPermanentAPR(self, f: float) -> None: ...
    
    def setPoints(self, f: float) -> None: ...
    
    def setPreferredSortAscending(self, b: bool) -> None: ...
    
    def setPreferredSortOrder(self, i: int) -> None: ...
    
    def setPreferredTwoLines(self, b: bool) -> None: ...
    
    def setPut(self, b: bool) -> None: ...
    
    def setRateChangeDate(self, i: int) -> None: ...
    
    def setReminder(self, b: bool) -> None: ...
    
    def setSecuritySubType(self, s: str) -> None: ...
    
    def setSecurityType(self, securityType: 'SecurityType') -> None: ...
    
    def setStartBalance(self, i: int) -> None: ...
    
    def setStrikePrice(self, i: int) -> None: ...
    
    def setTaxCategory(self, s: str) -> None: ...
    
    def setTaxRelated(self, b: bool) -> None: ...
    
    def setTaxable(self, b: bool) -> None: ...
    
    def setUsesAverageCost(self, b: bool) -> None: ...
    
    def sortAccounts(self) -> None: ...
    
    def sortSubAccounts(self) -> None: ...
    
    def toString(self) -> str: ...
    
    
    class AccountType:
        ASSET = 'ASSET'
        BANK = 'BANK'
        CREDIT_CARD = 'CREDIT_CARD'
        Companion = 'com.infinitekind.moneydance.model.Account.AccountType$Companion'
        EXPENSE = 'EXPENSE'
        INCOME = 'INCOME'
        INVESTMENT = 'INVESTMENT'
        LIABILITY = 'LIABILITY'
        LOAN = 'LOAN'
        ROOT = 'ROOT'
        SECURITY = 'SECURITY'
        
        def __init__(self) -> None: ...
        
        def code(self) -> int: ...
        
        def compareCodeTo(self, s: str) -> int: ...
        
        def filter(self) -> 'AcctFilter': ...
        
        @staticmethod
        def getEntries() -> typing.Any: ...
        
        def isCategory(self) -> bool: ...
        
        def syncID(self) -> str: ...
        
        @staticmethod
        def typeForCode(i: int) -> str: ...
        
        @staticmethod
        def typeForSyncID(s: str) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    class BalanceType:
        CLEARED = 'CLEARED'
        CONFIRMED = 'CONFIRMED'
        CURRENT = 'CURRENT'
        NORMAL = 'NORMAL'
        UNCONFIRMED = 'UNCONFIRMED'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def getEntries() -> typing.Any: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    class DebtPaymentSpec:
        BALANCE = 'BALANCE'
        CLEARED_BALANCE = 'CLEARED_BALANCE'
        CURRENT_BALANCE = 'CURRENT_BALANCE'
        Companion = 'com.infinitekind.moneydance.model.Account.DebtPaymentSpec$Companion'
        FIXED = 'FIXED'
        PERCENTAGE_OF_BALANCE = 'PERCENTAGE_OF_BALANCE'
        PERCENTAGE_OF_CLEARED_BALANCE = 'PERCENTAGE_OF_CLEARED_BALANCE'
        PERCENTAGE_OF_CURRENT_BALANCE = 'PERCENTAGE_OF_CURRENT_BALANCE'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def getEntries() -> typing.Any: ...
        
        def getIDString(self) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    class WhenMappings:
        $EnumSwitchMapping$0 = "array('i', [3, 6, 4, 5, 0, 0, 0, 0, 1, 2])"
        $EnumSwitchMapping$1 = "array('i', [1, 2, 3, 4, 5])"
        
        def __init__(self) -> None: ...
        
        
    
class AccountIterator(typing.Iterator, 'kotlin.jvm.internal.markers.KMappedMarker'):
    Companion = 'com.infinitekind.moneydance.model.AccountIterator$Companion'
    
    def __init__(self, account: Account) -> None: ...
    
    def hasNext(self) -> bool: ...
    
    def next(self) -> object: ...
    
    def remove(self) -> None: ...
    
    
class Txn:
    def __init__(self) -> None: ...
    
    def getAccount(self) -> Account: ...
    
    def getCheckNumAsInt(self) -> int: ...
    
    def getCheckNumber(self) -> str: ...
    
    def getClearedStatus(self) -> str: ...
    
    def getDateEntered(self) -> int: ...
    
    def getDateInt(self) -> int: ...
    
    def getDescription(self) -> str: ...
    
    def getKeywords(self) -> typing.List[str]: ...
    
    def getOtherSideAccount(self) -> Account: ...
    
    def getOtherTxn(self, i: int) -> 'AbstractTxn': ...
    
    def getOtherTxnCount(self) -> int: ...
    
    def getParameter(self, s: str) -> str: ...
    
    def getParentTxn(self) -> 'ParentTxn': ...
    
    def getStatus(self) -> int: ...
    
    def getStatusChar(self) -> str: ...
    
    def getTaxDateInt(self) -> int: ...
    
    def getTransferType(self) -> str: ...
    
    def getValue(self) -> int: ...
    
    def isNew(self) -> bool: ...
    
    def isTransferTo(self, account: Account) -> bool: ...
    
    def setClearedStatus(self, s: str) -> None: ...
    
    def setNew(self, b: bool) -> None: ...
    
    def setStatus(self, i: int) -> None: ...
    
    
    class DefaultImpls:
        def __init__(self) -> None: ...
        
        @staticmethod
        def getStatus$annotations() -> None: ...
        
        @staticmethod
        def getStatusChar$annotations() -> None: ...
        
        
    
class AbstractTxn(MoneydanceSyncableItem, Txn):
    BANK_TRANSACTION_TYPE = 0
    Companion = 'com.infinitekind.moneydance.model.AbstractTxn$Companion'
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    MISC_OBJECT_TYPE = u'misc'
    PRINT_CHECKNUM_PREFIX = u'{'
    PRINT_CHECKNUM_SUFFIX = u'}'
    SECURITY_SUBTYPES_ITEM_ID = u'security_subtypes'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SPLIT_TRANSACTION_TYPE = 1
    STATUS_CLEARED = 20
    STATUS_RECONCILING = 30
    STATUS_UNRECONCILED = 40
    TAG_FITID_PREFIX = u'ol_fitid_'
    TAG_FI_ID = u'ol_fi_id'
    TAG_INVST_SPLIT_EXP = u'exp'
    TAG_INVST_SPLIT_FEE = u'fee'
    TAG_INVST_SPLIT_INC = u'inc'
    TAG_INVST_SPLIT_SEC = u'sec'
    TAG_INVST_SPLIT_TYPE = u'invest.splittype'
    TAG_INVST_SPLIT_XFR = u'xfr'
    TAG_INVST_TXN_TYPE = u'invest.txntype'
    TAG_IS_NEW_TXN = u'ol.match-status'
    TAG_MATCH_TYPE = u'ol.match-type'
    TAG_ONLINE_PMT_ID = u'ol_pmtid'
    TAG_QIF_IMPORT_SESSION = u'qif_sn'
    TAG_QIF_INVST_ACTION = u'qif_invst_action'
    TAG_RECON_ASOFDT = u'rec_asof'
    TAG_RECON_DATE = u'rec_dt'
    TAG_SPLIT_AMOUNT = u'split_amount'
    TAG_SPLIT_CALC = u'split_calc'
    TAG_SPLIT_PAIR = u'split_pair'
    TRANSFER_TYPE_BANK = u'xfrtp_bank'
    TRANSFER_TYPE_BUYSELL = u'xfrtp_buysell'
    TRANSFER_TYPE_BUYSELLXFR = u'xfrtp_buysellxfr'
    TRANSFER_TYPE_DIVIDEND = u'xfrtp_dividend'
    TRANSFER_TYPE_DIVIDENDXFR = u'xfrtp_dividendxfr'
    TRANSFER_TYPE_MISCINCEXP = u'xfrtp_miscincexp'
    TRANSFER_TYPE_SHORTCOVER = u'xfrtp_shortcover'
    
    def __init__(self, accountBook: 'AccountBook') -> None: ...
    
    def getAccount(self) -> Account: ...
    
    def getAttachmentKeys(self) -> typing.List[str]: ...
    
    def getAttachmentTag(self, s: str) -> str: ...
    
    def getCheckNumAsInt(self) -> int: ...
    
    def getCheckNumAsLong(self) -> int: ...
    
    def getCheckNumber(self) -> str: ...
    
    def getClearedStatus(self) -> str: ...
    
    def getDateEntered(self) -> int: ...
    
    def getDateInt(self) -> int: ...
    
    def getDatePostedOnline(self) -> int: ...
    
    def getDescription(self) -> str: ...
    
    def getDownloadMatchType(self) -> str: ...
    
    def getFIID(self) -> str: ...
    
    def getFiTxnId(self, i: int) -> str: ...
    
    def getOldTxnID(self) -> int: ...
    
    def getOriginalOnlineTxn(self) -> 'OnlineTxn': ...
    
    def getOtherTxn(self, i: int) -> 'AbstractTxn': ...
    
    def getOtherTxnCount(self) -> int: ...
    
    def getParentTxn(self) -> 'ParentTxn': ...
    
    def getStatus(self) -> int: ...
    
    @staticmethod
    def getStatus$annotations() -> None: ...
    
    def getStatusChar(self) -> str: ...
    
    @staticmethod
    def getStatusChar$annotations() -> None: ...
    
    def getTags(self) -> com.infinitekind.tiksync.SyncRecord: ...
    
    def getTaxDateInt(self) -> int: ...
    
    def getTransferType(self) -> str: ...
    
    def getValue(self) -> int: ...
    
    def hasAttachments(self) -> bool: ...
    
    def isDirty(self) -> bool: ...
    
    def isNew(self) -> bool: ...
    
    def isTransferTo(self, account: Account) -> bool: ...
    
    def loadFromStorage(self, t: typing.Dict[str,str]) -> None: ...
    
    def needsToBePrinted(self) -> bool: ...
    
    def removeAttachmentTag(self, s: str) -> None: ...
    
    def resetDirty(self) -> None: ...
    
    def setAccount(self, account: Account) -> None: ...
    
    def setAttachmentTag(self, s: str, j: java.io.File) -> None: ...
    
    def setClearedStatus(self, s: str) -> None: ...
    
    def setDescription(self, s: str) -> None: ...
    
    def setDirty(self) -> None: ...
    
    def setDownloadMatchType(self, s: str) -> None: ...
    
    def setFIID(self, s: str) -> None: ...
    
    def setFiTxnId(self, i: int, s: str) -> None: ...
    
    def setIsNew(self, b: bool) -> None: ...
    
    def setNew(self, b: bool) -> None: ...
    
    def setOldTxnID(self, i: int) -> None: ...
    
    def setOriginalOnlineTxn(self, onlineTxn: 'OnlineTxn') -> None: ...
    
    def setStatus(self, i: int) -> None: ...
    
    def wasDownloaded(self) -> bool: ...
    
    
    class ClearedStatus:
        CLEARED = 'CLEARED'
        Companion = 'com.infinitekind.moneydance.model.AbstractTxn.ClearedStatus$Companion'
        RECONCILING = 'RECONCILING'
        UNRECONCILED = 'UNRECONCILED'
        
        def __init__(self) -> None: ...
        
        def getCharacter(self) -> str: ...
        
        def getCode(self) -> int: ...
        
        @staticmethod
        def getEntries() -> typing.Any: ...
        
        def legacyValue(self) -> int: ...
        
        def setCharacter(self, s: str) -> None: ...
        
        def setCode(self, i: int) -> None: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    class DownloadMatchType:
        CORRECTION = 'CORRECTION'
        Companion = 'com.infinitekind.moneydance.model.AbstractTxn.DownloadMatchType$Companion'
        DELETION = 'DELETION'
        EXACT_MERGE = 'EXACT_MERGE'
        NO_MATCH = 'NO_MATCH'
        POSSIBLE_MERGE = 'POSSIBLE_MERGE'
        REVERT = 'REVERT'
        SIMILAR_MATCH = 'SIMILAR_MATCH'
        
        def __init__(self) -> None: ...
        
        @staticmethod
        def access$getIntStringCode$p(s: str) -> str: ...
        
        @staticmethod
        def fromTxnMatchAttribute(s: str) -> str: ...
        
        def getCode(self) -> str: ...
        
        @staticmethod
        def getEntries() -> typing.Any: ...
        
        def getIntCode(self) -> int: ...
        
        def isMerge(self) -> bool: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> typing.List[str]: ...
        
        
    
class ParentTxn(AbstractTxn):
    BANK_TRANSACTION_TYPE = 0
    Companion = 'com.infinitekind.moneydance.model.ParentTxn$Companion'
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    MISC_OBJECT_TYPE = u'misc'
    PRINT_CHECKNUM_PREFIX = u'{'
    PRINT_CHECKNUM_SUFFIX = u'}'
    SECURITY_SUBTYPES_ITEM_ID = u'security_subtypes'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SPLIT_TRANSACTION_TYPE = 1
    STATUS_CLEARED = 20
    STATUS_RECONCILING = 30
    STATUS_UNRECONCILED = 40
    SYNCABLE_TYPE_VALUE = u'txn'
    TAG_FITID_PREFIX = u'ol_fitid_'
    TAG_FI_ID = u'ol_fi_id'
    TAG_INVST_SPLIT_EXP = u'exp'
    TAG_INVST_SPLIT_FEE = u'fee'
    TAG_INVST_SPLIT_INC = u'inc'
    TAG_INVST_SPLIT_SEC = u'sec'
    TAG_INVST_SPLIT_TYPE = u'invest.splittype'
    TAG_INVST_SPLIT_XFR = u'xfr'
    TAG_INVST_TXN_TYPE = u'invest.txntype'
    TAG_IS_NEW_TXN = u'ol.match-status'
    TAG_MATCH_TYPE = u'ol.match-type'
    TAG_ONLINE_PMT_ID = u'ol_pmtid'
    TAG_QIF_IMPORT_SESSION = u'qif_sn'
    TAG_QIF_INVST_ACTION = u'qif_invst_action'
    TAG_RECON_ASOFDT = u'rec_asof'
    TAG_RECON_DATE = u'rec_dt'
    TAG_SPLIT_AMOUNT = u'split_amount'
    TAG_SPLIT_CALC = u'split_calc'
    TAG_SPLIT_PAIR = u'split_pair'
    TRANSFER_TYPE_BANK = u'xfrtp_bank'
    TRANSFER_TYPE_BUYSELL = u'xfrtp_buysell'
    TRANSFER_TYPE_BUYSELLXFR = u'xfrtp_buysellxfr'
    TRANSFER_TYPE_DIVIDEND = u'xfrtp_dividend'
    TRANSFER_TYPE_DIVIDENDXFR = u'xfrtp_dividendxfr'
    TRANSFER_TYPE_MISCINCEXP = u'xfrtp_miscincexp'
    TRANSFER_TYPE_SHORTCOVER = u'xfrtp_shortcover'
    
    def __init__(self, accountBook: 'AccountBook') -> None: ...
    
    def addSplit(self, splitTxn: 'SplitTxn') -> None: ...
    
    def clearRemovedSplits(self) -> None: ...
    
    def duplicate(self) -> MoneydanceSyncableItem: ...
    
    def duplicateAsNew(self) -> 'ParentTxn': ...
    
    def getAllSplits(self) -> typing.List['SplitTxn']: ...
    
    def getCheckNumber(self) -> str: ...
    
    def getDateEntered(self) -> int: ...
    
    def getDateInt(self) -> int: ...
    
    def getInvestTxnType(self) -> 'InvestTxnType': ...
    
    def getMemo(self) -> str: ...
    
    def getOtherSideAccount(self) -> Account: ...
    
    def getOtherTxn(self, i: int) -> AbstractTxn: ...
    
    def getOtherTxnCount(self) -> int: ...
    
    def getParentTxn(self) -> 'ParentTxn': ...
    
    def getRemovedSplit(self, i: int) -> 'SplitTxn': ...
    
    def getRemovedSplitCount(self) -> int: ...
    
    def getRemovedSplits(self) -> typing.List['SplitTxn']: ...
    
    def getRemovedSplits$core(self) -> typing.List['SplitTxn']: ...
    
    def getSplit(self, i: int) -> 'SplitTxn': ...
    
    def getSplitCount(self) -> int: ...
    
    def getSyncItemType(self) -> str: ...
    
    def getTaxDateInt(self) -> int: ...
    
    def getTransferType(self) -> str: ...
    
    def getValue(self) -> int: ...
    
    def indexOfSplit(self, splitTxn: 'SplitTxn') -> int: ...
    
    def isDirty(self) -> bool: ...
    
    def isTransferTo(self, account: Account) -> bool: ...
    
    def itemWasUpdated(self) -> None: ...
    
    def itemWillSync(self) -> None: ...
    
    @staticmethod
    def makeParentTxn(accountBook: 'AccountBook', i: int, i2: int, i3: int, s: str, account: Account, s2: str, s3: str, i4: int, i5: int) -> 'ParentTxn': ...
    
    def removeSplit(self, i: int) -> bool: ...
    
    def setCheckNumber(self, s: str) -> None: ...
    
    def setDateEntered(self, i: int) -> None: ...
    
    def setDateInt(self, i: int) -> None: ...
    
    def setInvestTxnType(self, investTxnType: 'InvestTxnType') -> None: ...
    
    def setMemo(self, s: str) -> None: ...
    
    def setTaxDateInt(self, i: int) -> None: ...
    
    def setTransferType(self, s: str) -> None: ...
    
    def toMultilineString(self) -> str: ...
    
    def toString(self) -> str: ...
    
    
    class WhenMappings:
        $EnumSwitchMapping$0 = "array('i', [1, 2, 3, 4, 12, 6, 8, 9, 7, 10, 11, 5])"
        
        def __init__(self) -> None: ...
        
        
    
