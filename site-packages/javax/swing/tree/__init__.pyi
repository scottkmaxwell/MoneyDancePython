import typing
import java.awt
import java.io
import javax.swing
import javax.swing.event


class TreeCellRenderer:
    def __init__(self) -> None: ...
    
    def getTreeCellRendererComponent(self, j: javax.swing.JTree, o: object, b: bool, b2: bool, b3: bool, i: int, b4: bool) -> java.awt.Component: ...
    
    
class DefaultTreeCellRenderer(TreeCellRenderer, javax.swing.JLabel):
    pass
    
class TreeModel:
    pass
    
class DefaultTreeModel(TreeModel, java.io.Serializable):
    pass
    
class ExpandVetoException(Exception):
    def __init__(self, j: javax.swing.event.TreeExpansionEvent) -> None: ...
    
    
class TreeNode:
    def __init__(self) -> None: ...
    
    def children(self) -> typing.Any: ...
    
    def getAllowsChildren(self) -> bool: ...
    
    def getChildAt(self, i: int) -> 'TreeNode': ...
    
    def getChildCount(self) -> int: ...
    
    def getIndex(self, treeNode: 'TreeNode') -> int: ...
    
    def getParent(self) -> 'TreeNode': ...
    
    def isLeaf(self) -> bool: ...
    
    
class TreePath(java.io.Serializable):
    def __init__(self, t: typing.List[object]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getLastPathComponent(self) -> object: ...
    
    def getParentPath(self) -> 'TreePath': ...
    
    def getPath(self) -> typing.List[object]: ...
    
    def getPathComponent(self, i: int) -> object: ...
    
    def getPathCount(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def isDescendant(self, treePath: 'TreePath') -> bool: ...
    
    def pathByAddingChild(self, o: object) -> 'TreePath': ...
    
    def toString(self) -> str: ...
    
    
