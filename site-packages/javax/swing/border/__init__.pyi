import java.awt
import java.io


class Border:
    def __init__(self) -> None: ...
    
    def getBorderInsets(self, j: java.awt.Component) -> java.awt.Insets: ...
    
    def isBorderOpaque(self) -> bool: ...
    
    def paintBorder(self, j: java.awt.Component, j2: java.awt.Graphics, i: int, i2: int, i3: int, i4: int) -> None: ...
    
    
class AbstractBorder(Border, java.io.Serializable):
    def __init__(self) -> None: ...
    
    def getBaseline(self, j: java.awt.Component, i: int, i2: int) -> int: ...
    
    def getBaselineResizeBehavior(self, j: java.awt.Component) -> str: ...
    
    def getBorderInsets(self, j: java.awt.Component) -> java.awt.Insets: ...
    
    def getInteriorRectangle(self, j: java.awt.Component, i: int, i2: int, i3: int, i4: int) -> java.awt.Rectangle: ...
    
    def isBorderOpaque(self) -> bool: ...
    
    def paintBorder(self, j: java.awt.Component, j2: java.awt.Graphics, i: int, i2: int, i3: int, i4: int) -> None: ...
    
    
class EmptyBorder(AbstractBorder):
    @typing.overload
    def __init__(self, top: int, left: int, bottom: int, right: int) -> None: ...
    
    def __init__(self, j: java.awt.Insets) -> None: ...
    
    def getBorderInsets(self) -> java.awt.Insets: ...
    
    def isBorderOpaque(self) -> bool: ...
    
    def paintBorder(self, j: java.awt.Component, j2: java.awt.Graphics, i: int, i2: int, i3: int, i4: int) -> None: ...
    
    
