import typing
import java.awt
import java.io
import java.lang
import javax.accessibility
import text


class Action('java.awt.event.ActionListener'):
    pass
    
class AbstractAction(Action, java.lang.Cloneable, java.io.Serializable):
    pass
    
class TransferHandler(object):
    class HasGetTransferHandler:
        pass
        
class JComponent(TransferHandler.HasGetTransferHandler, java.awt.Container):
    TOOL_TIP_TEXT_KEY: str
    UNDEFINED_CONDITION: int
    WHEN_ANCESTOR_OF_FOCUSED_COMPONENT: int
    WHEN_FOCUSED: int
    WHEN_IN_FOCUSED_WINDOW: int
    def getClientProperty(self, key: Any) -> Any: ...
    def putClientProperty(self, key: Any, value: Any) -> None: ...
    def getFontMetrics(self) -> java.awt.FontMetrics: ...
    
    
class Box(JComponent, javax.accessibility.Accessible):
    def createRigidArea(d: java.awt.Dimension) -> java.awt.Component: ...
    
    
class Icon:
    def __init__(self) -> None: ...
    
    def getIconHeight(self) -> int: ...
    
    def getIconWidth(self) -> int: ...
    
    def paintIcon(self, j: java.awt.Component, j2: java.awt.Graphics, i: int, i2: int) -> None: ...
    
    
class SwingConstants:
    BOTTOM = 3
    CENTER = 0
    EAST = 3
    HORIZONTAL = 0
    LEADING = 10
    LEFT = 2
    NEXT = 12
    NORTH = 1
    NORTH_EAST = 2
    NORTH_WEST = 8
    PREVIOUS = 13
    RIGHT = 4
    SOUTH = 5
    SOUTH_EAST = 4
    SOUTH_WEST = 6
    TOP = 1
    TRAILING = 11
    VERTICAL = 1
    WEST = 7
    
    def __init__(self) -> None: ...
    
    
class AbstractButton(JComponent, SwingConstants, java.awt.ItemSelectable):
    pass
    
class JButton(AbstractButton, javax.accessibility.Accessible):
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, text: str) -> None: ...
    @typing.overload
    def __init__(self, text: str, icon: 'Icon') -> None: ...
    @typing.overload
    def __init__(self, action: 'Action') -> None: ...
    @typing.overload
    def __init__(self, icon: 'Icon') -> None: ...
    
    
class JToggleButton(AbstractButton, javax.accessibility.Accessible):
    pass
    
class JCheckBox(JToggleButton):
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, text: str) -> None: ...
    @typing.overload
    def __init__(self, text: str, selected: bool) -> None: ...
    @typing.overload
    def __init__(self, text: str, icon: 'Icon') -> None: ...
    @typing.overload
    def __init__(self, text: str, icon: 'Icon', selected: bool) -> None: ...
    @typing.overload
    def __init__(self, action: 'Action') -> None: ...
    @typing.overload
    def __init__(self, icon: 'Icon') -> None: ...
    @typing.overload
    def __init__(self, icon: 'Icon', selected: bool) -> None: ...
    
    
class WindowConstants:
    DISPOSE_ON_CLOSE = 2
    DO_NOTHING_ON_CLOSE = 0
    EXIT_ON_CLOSE = 3
    HIDE_ON_CLOSE = 1
    
    def __init__(self) -> None: ...
    
    
class RootPaneContainer:
    def __init__(self) -> None: ...
    
    def getContentPane(self) -> java.awt.Container: ...
    
    def getGlassPane(self) -> java.awt.Component: ...
    
    def getLayeredPane(self) -> 'JLayeredPane': ...
    
    def getRootPane(self) -> 'JRootPane': ...
    
    def setContentPane(self, j: java.awt.Container) -> None: ...
    
    def setGlassPane(self, j: java.awt.Component) -> None: ...
    
    def setLayeredPane(self, jLayeredPane: 'JLayeredPane') -> None: ...
    
    
class JDialog(WindowConstants, RootPaneContainer, TransferHandler.HasGetTransferHandler, java.awt.Dialog):
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, owner: java.awt.Dialog, modal: bool) -> None: ...
    @typing.overload
    def __init__(self, owner: java.awt.Dialog, title: str = , modal: bool = False, gc: typing.Optional[java.awt.GraphicsConfiguration] = None) -> None: ...
    @typing.overload
    def __init__(self, owner: java.awt.Frame, modal: bool) -> None: ...
    @typing.overload
    def __init__(self, owner: java.awt.Frame, title: str = , modal: bool = False, gc: typing.Optional[java.awt.GraphicsConfiguration] = None) -> None: ...
    @typing.overload
    def __init__(self, owner: java.awt.Window, modality: java.awt.Dialog.ModalityType) -> None: ...
    @typing.overload
    def __init__(self, owner: java.awt.Window, title: str = , modality: java.awt.Dialog.ModalityType = java.awt.Dialog.ModalityType.MODELESS, gc: typing.Optional[java.awt.GraphicsConfiguration] = None) -> None: ...
    
    
class JFileChooser(JComponent, javax.accessibility.Accessible):
    APPROVE_OPTION: int
    CANCEL_OPTION: int
    ERROR_OPTION: int
    DIRECTORIES_ONLY: int
    FILES_ONLY: int
    FILES_AND_DIRECTORIES: int
    def __init__(self, title: str = '') -> None: ...
    def getSelectedFile(self) -> java.io.File: ...
    def setDialogTitle(self, title: str) -> None: ...
    def setFileFilter(self, file_filter: 'FileFilter') -> None: ...
    def setFileSelectionMode(self, mode: int) -> None: ...
    def setMultiSelectionEnabled(self, enabled: bool) -> None: ...
    def setSelectedFile(self, file: java.io.File): ...
    def showDialog(self, parent: java.awt.Component, approveButtonText: str) -> int: ...
    def showOpenDialog(self, parent: java.awt.Component) -> int: ...
    def showSaveDialog(self, parent: java.awt.Component) -> int: ...
    
    
class JFrame(WindowConstants, RootPaneContainer, TransferHandler.HasGetTransferHandler, java.awt.Frame):
    def __init__(self, title: str) -> None: ...
    def getJMenuBar(self) -> 'JMenuBar': ...
    def setJMenuBar(self, menu_bar: 'Optional[JMenuBar]') -> None: ...
    
    
class JLabel(JComponent, SwingConstants, javax.accessibility.Accessible):
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, text: str) -> None: ...
    @typing.overload
    def __init__(self, text: str, horizontalAlignment: int) -> None: ...
    @typing.overload
    def __init__(self, text: str, icon: Icon, horizontalAlignment: int) -> None: ...
    @typing.overload
    def __init__(self, icon: Icon) -> None: ...
    @typing.overload
    def __init__(self, icon: Icon, horizontalAlignment: int) -> None: ...
    
    
class MenuElement:
    def __init__(self) -> None: ...
    
    def getComponent(self) -> java.awt.Component: ...
    
    def getSubElements(self) -> typing.List['MenuElement']: ...
    
    def menuSelectionChanged(self, b: bool) -> None: ...
    
    def processKeyEvent(self, j: 'java.awt.event.KeyEvent', t: typing.List['MenuElement'], menuSelectionManager: 'MenuSelectionManager') -> None: ...
    
    def processMouseEvent(self, j: 'java.awt.event.MouseEvent', t: typing.List['MenuElement'], menuSelectionManager: 'MenuSelectionManager') -> None: ...
    
    
class JMenuItem(AbstractButton, MenuElement, javax.accessibility.Accessible):
    pass
    
class JMenu(JMenuItem):
    pass
    
class JMenuBar(JComponent, MenuElement, javax.accessibility.Accessible):
    def add(self, menu: 'JMenu') -> 'JMenu': ...
    
    
class JOptionPane(JComponent, javax.accessibility.Accessible):
    INFORMATION_MESSAGE: int
    PLAIN_MESSAGE: int
    QUESTION_MESSAGE: int
    def showMessageDialog(parent_component: 'javax.swing.Component', message: Any, title: str = '', messageType: int = 0, icon: 'Optional[Icon]' = None) -> None: ...
    
    
class JPanel(JComponent, javax.accessibility.Accessible):
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, isDoubleBuffered: bool) -> None: ...
    @typing.overload
    def __init__(self, layout_manager: java.awt.LayoutManager) -> None: ...
    @typing.overload
    def __init__(self, layout_manager: java.awt.LayoutManager, isDoubleBuffered: bool) -> None: ...
    
    
class ScrollPaneConstants:
    COLUMN_HEADER = u'COLUMN_HEADER'
    HORIZONTAL_SCROLLBAR = u'HORIZONTAL_SCROLLBAR'
    HORIZONTAL_SCROLLBAR_ALWAYS = 32
    HORIZONTAL_SCROLLBAR_AS_NEEDED = 30
    HORIZONTAL_SCROLLBAR_NEVER = 31
    HORIZONTAL_SCROLLBAR_POLICY = u'HORIZONTAL_SCROLLBAR_POLICY'
    LOWER_LEADING_CORNER = u'LOWER_LEADING_CORNER'
    LOWER_LEFT_CORNER = u'LOWER_LEFT_CORNER'
    LOWER_RIGHT_CORNER = u'LOWER_RIGHT_CORNER'
    LOWER_TRAILING_CORNER = u'LOWER_TRAILING_CORNER'
    ROW_HEADER = u'ROW_HEADER'
    UPPER_LEADING_CORNER = u'UPPER_LEADING_CORNER'
    UPPER_LEFT_CORNER = u'UPPER_LEFT_CORNER'
    UPPER_RIGHT_CORNER = u'UPPER_RIGHT_CORNER'
    UPPER_TRAILING_CORNER = u'UPPER_TRAILING_CORNER'
    VERTICAL_SCROLLBAR = u'VERTICAL_SCROLLBAR'
    VERTICAL_SCROLLBAR_ALWAYS = 22
    VERTICAL_SCROLLBAR_AS_NEEDED = 20
    VERTICAL_SCROLLBAR_NEVER = 21
    VERTICAL_SCROLLBAR_POLICY = u'VERTICAL_SCROLLBAR_POLICY'
    VIEWPORT = u'VIEWPORT'
    
    def __init__(self) -> None: ...
    
    
class JScrollPane(JComponent, ScrollPaneConstants, javax.accessibility.Accessible):
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, vsbPolicy: int, hsbPolicy: int) -> None: ...
    @typing.overload
    def __init__(self, view: java.awt.Component) -> None: ...
    @typing.overload
    def __init__(self, view: java.awt.Component, vsbPolicy: int, hsbPolicy: int) -> None: ...
    
    
class JTextArea(text.JTextComponent):
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, rows: int, columns: int) -> None: ...
    @typing.overload
    def __init__(self, text: str) -> None: ...
    @typing.overload
    def __init__(self, text: str, rows: int, columns: int) -> None: ...
    @typing.overload
    def __init__(self, doc: 'text.Document') -> None: ...
    @typing.overload
    def __init__(self, doc: 'text.Document', text: str, rows: int, columns: int) -> None: ...
    
    
class JTextField(SwingConstants, text.JTextComponent):
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, columns: int) -> None: ...
    @typing.overload
    def __init__(self, text: str) -> None: ...
    @typing.overload
    def __init__(self, text: str, columns: int) -> None: ...
    @typing.overload
    def __init__(self, doc: 'text.Document', text: str, columns: int) -> None: ...
    
    
class KeyStroke(java.awt.AWTKeyStroke):
    def getText(self) -> str: ...
    @typing.overload
    @staticmethod
    def getKeyStoke(key: str, onKeyRelease: bool) -> 'KeyStroke': ...
    @typing.overload
    @staticmethod
    def getKeyStoke(key: str, modifiers: int) -> 'KeyStroke': ...
    @typing.overload
    @staticmethod
    def getKeyStoke(key_code: int, modifiers: int, onKeyRelease: bool = False) -> 'KeyStroke': ...
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def getKeyStroke(s: str) -> 'KeyStroke': ...
    
    @staticmethod
    def getKeyStrokeForEvent(j: 'java.awt.event.KeyEvent') -> 'KeyStroke': ...
    
    
class SwingUtilities(SwingConstants):
    BOTTOM = 3
    CENTER = 0
    EAST = 3
    HORIZONTAL = 0
    LEADING = 10
    LEFT = 2
    NEXT = 12
    NORTH = 1
    NORTH_EAST = 2
    NORTH_WEST = 8
    PREVIOUS = 13
    RIGHT = 4
    SOUTH = 5
    SOUTH_EAST = 4
    SOUTH_WEST = 6
    TOP = 1
    TRAILING = 11
    VERTICAL = 1
    WEST = 7
    
    def __init__(self) -> None: ...
    
    @staticmethod
    def calculateInnerArea(jComponent: JComponent, j: java.awt.Rectangle) -> java.awt.Rectangle: ...
    
    @staticmethod
    def computeDifference(j: java.awt.Rectangle, j2: java.awt.Rectangle) -> typing.List[java.awt.Rectangle]: ...
    
    @staticmethod
    def computeIntersection(i: int, i2: int, i3: int, i4: int, j: java.awt.Rectangle) -> java.awt.Rectangle: ...
    
    @staticmethod
    def computeStringWidth(j: java.awt.FontMetrics, s: str) -> int: ...
    
    @staticmethod
    def computeUnion(i: int, i2: int, i3: int, i4: int, j: java.awt.Rectangle) -> java.awt.Rectangle: ...
    
    @staticmethod
    def convertMouseEvent(j: java.awt.Component, j2: 'java.awt.event.MouseEvent', j3: java.awt.Component) -> 'java.awt.event.MouseEvent': ...
    
    @staticmethod
    def convertPoint(j: java.awt.Component, j2: java.awt.Point, j3: java.awt.Component) -> java.awt.Point: ...
    
    @staticmethod
    def convertPointFromScreen(j: java.awt.Point, j2: java.awt.Component) -> None: ...
    
    @staticmethod
    def convertPointToScreen(j: java.awt.Point, j2: java.awt.Component) -> None: ...
    
    @staticmethod
    def convertRectangle(j: java.awt.Component, j2: java.awt.Rectangle, j3: java.awt.Component) -> java.awt.Rectangle: ...
    
    @staticmethod
    def findFocusOwner(j: java.awt.Component) -> java.awt.Component: ...
    
    @staticmethod
    def getAccessibleAt(j: java.awt.Component, j2: java.awt.Point) -> javax.accessibility.Accessible: ...
    
    @staticmethod
    def getAccessibleChild(j: java.awt.Component, i: int) -> javax.accessibility.Accessible: ...
    
    @staticmethod
    def getAccessibleChildrenCount(j: java.awt.Component) -> int: ...
    
    @staticmethod
    def getAccessibleIndexInParent(j: java.awt.Component) -> int: ...
    
    @staticmethod
    def getAccessibleStateSet(j: java.awt.Component) -> javax.accessibility.AccessibleStateSet: ...
    
    @staticmethod
    def getAncestorNamed(s: str, j: java.awt.Component) -> java.awt.Container: ...
    
    @staticmethod
    def getAncestorOfClass(t: typing.Any, j: java.awt.Component) -> java.awt.Container: ...
    
    @staticmethod
    def getDeepestComponentAt(j: java.awt.Component, i: int, i2: int) -> java.awt.Component: ...
    
    @staticmethod
    def getLocalBounds(j: java.awt.Component) -> java.awt.Rectangle: ...
    
    @staticmethod
    def getRoot(j: java.awt.Component) -> java.awt.Component: ...
    
    @staticmethod
    def getRootPane(j: java.awt.Component) -> 'JRootPane': ...
    
    @staticmethod
    def getUIActionMap(jComponent: JComponent) -> 'ActionMap': ...
    
    @staticmethod
    def getUIInputMap(jComponent: JComponent, i: int) -> 'InputMap': ...
    
    @staticmethod
    def getUnwrappedParent(j: java.awt.Component) -> java.awt.Container: ...
    
    @staticmethod
    def getUnwrappedView(jViewport: 'JViewport') -> java.awt.Component: ...
    
    @staticmethod
    def getWindowAncestor(j: java.awt.Component) -> java.awt.Window: ...
    
    @staticmethod
    def invokeAndWait(j: java.lang.Runnable) -> None: ...
    
    @staticmethod
    def invokeLater(j: java.lang.Runnable) -> None: ...
    
    @staticmethod
    def isDescendingFrom(j: java.awt.Component, j2: java.awt.Component) -> bool: ...
    
    @staticmethod
    def isEventDispatchThread() -> bool: ...
    
    @staticmethod
    def isLeftMouseButton(j: 'java.awt.event.MouseEvent') -> bool: ...
    
    @staticmethod
    def isMiddleMouseButton(j: 'java.awt.event.MouseEvent') -> bool: ...
    
    @staticmethod
    def isRectangleContainingRectangle(j: java.awt.Rectangle, j2: java.awt.Rectangle) -> bool: ...
    
    @staticmethod
    def isRightMouseButton(j: 'java.awt.event.MouseEvent') -> bool: ...
    
    @staticmethod
    def layoutCompoundLabel(j: java.awt.FontMetrics, s: str, icon: Icon, i: int, i2: int, i3: int, i4: int, j2: java.awt.Rectangle, j3: java.awt.Rectangle, j4: java.awt.Rectangle, i5: int) -> str: ...
    
    @staticmethod
    def notifyAction(action: Action, keyStroke: KeyStroke, j: 'java.awt.event.KeyEvent', o: object, i: int) -> bool: ...
    
    @staticmethod
    def paintComponent(j: java.awt.Graphics, j2: java.awt.Component, j3: java.awt.Container, j4: java.awt.Rectangle) -> None: ...
    
    @staticmethod
    def processKeyBindings(j: 'java.awt.event.KeyEvent') -> bool: ...
    
    @staticmethod
    def replaceUIActionMap(jComponent: JComponent, actionMap: 'ActionMap') -> None: ...
    
    @staticmethod
    def replaceUIInputMap(jComponent: JComponent, i: int, inputMap: 'InputMap') -> None: ...
    
    @staticmethod
    def updateComponentTreeUI(j: java.awt.Component) -> None: ...
    
    @staticmethod
    def windowForComponent(j: java.awt.Component) -> java.awt.Window: ...
    
    
