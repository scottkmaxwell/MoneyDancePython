import typing
import java.util
import javax.print.attribute


class Chromaticity(javax.print.attribute.EnumSyntax, javax.print.attribute.DocAttribute, javax.print.attribute.PrintRequestAttribute, javax.print.attribute.PrintJobAttribute):
    COLOR = 'color'
    MONOCHROME = 'monochrome'
    
    def __init__(self) -> None: ...
    
    def getCategory(self) -> typing.Any: ...
    
    def getName(self) -> str: ...
    
    
class Copies(javax.print.attribute.IntegerSyntax, javax.print.attribute.PrintRequestAttribute, javax.print.attribute.PrintJobAttribute):
    def __init__(self, i: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCategory(self) -> typing.Any: ...
    
    def getName(self) -> str: ...
    
    
class DialogTypeSelection(javax.print.attribute.EnumSyntax, javax.print.attribute.PrintRequestAttribute):
    COMMON = 'common'
    NATIVE = 'native'
    
    def __init__(self) -> None: ...
    
    def getCategory(self) -> typing.Any: ...
    
    def getName(self) -> str: ...
    
    
class JobName(javax.print.attribute.TextSyntax, javax.print.attribute.PrintRequestAttribute, javax.print.attribute.PrintJobAttribute):
    def __init__(self, s: str, j: typing.Optional[java.util.Locale]) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCategory(self) -> typing.Any: ...
    
    def getName(self) -> str: ...
    
    
class JobSheets(javax.print.attribute.EnumSyntax, javax.print.attribute.PrintRequestAttribute, javax.print.attribute.PrintJobAttribute):
    NONE = 'none'
    STANDARD = 'standard'
    
    def __init__(self) -> None: ...
    
    def getCategory(self) -> typing.Any: ...
    
    def getName(self) -> str: ...
    
    
class MediaPrintableArea(javax.print.attribute.DocAttribute, javax.print.attribute.PrintRequestAttribute, javax.print.attribute.PrintJobAttribute):
    INCH = 25400
    MM = 1000
    
    def __init__(self, i: int, i2: int, i3: int, i4: int, i5: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCategory(self) -> typing.Any: ...
    
    def getHeight(self, i: int) -> float: ...
    
    def getName(self) -> str: ...
    
    def getPrintableArea(self, i: int) -> typing.List[float]: ...
    
    def getWidth(self, i: int) -> float: ...
    
    def getX(self, i: int) -> float: ...
    
    def getY(self, i: int) -> float: ...
    
    def hashCode(self) -> int: ...
    
    def toString(self) -> str: ...
    
    
class Media(javax.print.attribute.EnumSyntax, javax.print.attribute.DocAttribute, javax.print.attribute.PrintRequestAttribute, javax.print.attribute.PrintJobAttribute):
    def __init__(self) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCategory(self) -> typing.Any: ...
    
    def getName(self) -> str: ...
    
    
class MediaSizeName(Media):
    A = 'a'
    B = 'b'
    C = 'c'
    D = 'd'
    E = 'e'
    EXECUTIVE = 'executive'
    FOLIO = 'folio'
    INVOICE = 'invoice'
    ISO_A0 = 'iso-a0'
    ISO_A1 = 'iso-a1'
    ISO_A10 = 'iso-a10'
    ISO_A2 = 'iso-a2'
    ISO_A3 = 'iso-a3'
    ISO_A4 = 'iso-a4'
    ISO_A5 = 'iso-a5'
    ISO_A6 = 'iso-a6'
    ISO_A7 = 'iso-a7'
    ISO_A8 = 'iso-a8'
    ISO_A9 = 'iso-a9'
    ISO_B0 = 'iso-b0'
    ISO_B1 = 'iso-b1'
    ISO_B10 = 'iso-b10'
    ISO_B2 = 'iso-b2'
    ISO_B3 = 'iso-b3'
    ISO_B4 = 'iso-b4'
    ISO_B5 = 'iso-b5'
    ISO_B6 = 'iso-b6'
    ISO_B7 = 'iso-b7'
    ISO_B8 = 'iso-b8'
    ISO_B9 = 'iso-b9'
    ISO_C0 = 'iso-c0'
    ISO_C1 = 'iso-c1'
    ISO_C2 = 'iso-c2'
    ISO_C3 = 'iso-c3'
    ISO_C4 = 'iso-c4'
    ISO_C5 = 'iso-c5'
    ISO_C6 = 'iso-c6'
    ISO_DESIGNATED_LONG = 'iso-designated-long'
    ITALY_ENVELOPE = 'italian-envelope'
    JAPANESE_DOUBLE_POSTCARD = 'oufuko-postcard'
    JAPANESE_POSTCARD = 'japanese-postcard'
    JIS_B0 = 'jis-b0'
    JIS_B1 = 'jis-b1'
    JIS_B10 = 'jis-b10'
    JIS_B2 = 'jis-b2'
    JIS_B3 = 'jis-b3'
    JIS_B4 = 'jis-b4'
    JIS_B5 = 'jis-b5'
    JIS_B6 = 'jis-b6'
    JIS_B7 = 'jis-b7'
    JIS_B8 = 'jis-b8'
    JIS_B9 = 'jis-b9'
    LEDGER = 'ledger'
    MONARCH_ENVELOPE = 'monarch-envelope'
    NA_10X13_ENVELOPE = 'na-10x13-envelope'
    NA_10X14_ENVELOPE = 'na-10x14-envelope'
    NA_10X15_ENVELOPE = 'na-10x15-envelope'
    NA_5X7 = 'na-5x7'
    NA_6X9_ENVELOPE = 'na-6x9-envelope'
    NA_7X9_ENVELOPE = 'na-7x9-envelope'
    NA_8X10 = 'na-8x10'
    NA_9X11_ENVELOPE = 'na-9x11-envelope'
    NA_9X12_ENVELOPE = 'na-9x12-envelope'
    NA_LEGAL = 'na-legal'
    NA_LETTER = 'na-letter'
    NA_NUMBER_10_ENVELOPE = 'na-number-10-envelope'
    NA_NUMBER_11_ENVELOPE = 'na-number-11-envelope'
    NA_NUMBER_12_ENVELOPE = 'na-number-12-envelope'
    NA_NUMBER_14_ENVELOPE = 'na-number-14-envelope'
    NA_NUMBER_9_ENVELOPE = 'na-number-9-envelope'
    PERSONAL_ENVELOPE = 'personal-envelope'
    QUARTO = 'quarto'
    TABLOID = 'tabloid'
    
    def __init__(self) -> None: ...
    
    
class OrientationRequested(javax.print.attribute.EnumSyntax, javax.print.attribute.DocAttribute, javax.print.attribute.PrintRequestAttribute, javax.print.attribute.PrintJobAttribute):
    LANDSCAPE = 'landscape'
    PORTRAIT = 'portrait'
    REVERSE_LANDSCAPE = 'reverse-landscape'
    REVERSE_PORTRAIT = 'reverse-portrait'
    
    def __init__(self) -> None: ...
    
    def getCategory(self) -> typing.Any: ...
    
    def getName(self) -> str: ...
    
    
class PrintQuality(javax.print.attribute.EnumSyntax, javax.print.attribute.DocAttribute, javax.print.attribute.PrintRequestAttribute, javax.print.attribute.PrintJobAttribute):
    DRAFT = 'draft'
    HIGH = 'high'
    NORMAL = 'normal'
    
    def __init__(self) -> None: ...
    
    def getCategory(self) -> typing.Any: ...
    
    def getName(self) -> str: ...
    
    
class PrinterResolution(javax.print.attribute.ResolutionSyntax, javax.print.attribute.DocAttribute, javax.print.attribute.PrintRequestAttribute, javax.print.attribute.PrintJobAttribute):
    DPCM = 254
    DPI = 100
    
    def __init__(self, i: int, i2: int, i3: int) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getCategory(self) -> typing.Any: ...
    
    def getName(self) -> str: ...
    
    
