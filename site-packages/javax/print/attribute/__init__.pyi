import typing
import java.io


class AttributeSet:
    def __init__(self) -> None: ...
    
    def add(self, attribute: 'Attribute') -> bool: ...
    
    def addAll(self, attributeSet: 'AttributeSet') -> bool: ...
    
    def clear(self) -> None: ...
    
    def containsKey(self, t: typing.Any) -> bool: ...
    
    def containsValue(self, attribute: 'Attribute') -> bool: ...
    
    def equals(self, o: object) -> bool: ...
    
    def get(self, t: typing.Any) -> 'Attribute': ...
    
    def hashCode(self) -> int: ...
    
    def isEmpty(self) -> bool: ...
    
    def remove(self, t: typing.Any) -> bool: ...
    
    def size(self) -> int: ...
    
    def toArray(self) -> typing.List['Attribute']: ...
    
    
class HashAttributeSet(AttributeSet, java.io.Serializable):
    def __init__(self) -> None: ...
    
    def add(self, attribute: 'Attribute') -> bool: ...
    
    def addAll(self, attributeSet: AttributeSet) -> bool: ...
    
    def clear(self) -> None: ...
    
    def containsKey(self, t: typing.Any) -> bool: ...
    
    def containsValue(self, attribute: 'Attribute') -> bool: ...
    
    def equals(self, o: object) -> bool: ...
    
    def get(self, t: typing.Any) -> 'Attribute': ...
    
    def hashCode(self) -> int: ...
    
    def isEmpty(self) -> bool: ...
    
    def remove(self, t: typing.Any) -> bool: ...
    
    def size(self) -> int: ...
    
    def toArray(self) -> typing.List['Attribute']: ...
    
    
class PrintRequestAttributeSet(AttributeSet):
    def __init__(self) -> None: ...
    
    def add(self, attribute: 'Attribute') -> bool: ...
    
    def addAll(self, attributeSet: AttributeSet) -> bool: ...
    
    
class HashPrintRequestAttributeSet(HashAttributeSet, PrintRequestAttributeSet):
    @typing.overload
    def __init__(self, o: PrintRequestAttributeSet) -> None: ...
    
    def __init__(self) -> None: ...
    
    
